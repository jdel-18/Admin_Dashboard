{"ast":null,"code":"import { Droppable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren, setDisplayValue, clearReactVueTemplates } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { isGroupAdaptive } from '../base/util';\nimport * as literals from '../base/string-literals';\n// eslint-disable-next-line valid-jsdoc\n/**\n * Content module is used to render grid content\n *\n * @hidden\n */\nvar ContentRender = /** @class */function () {\n  /**\n   * Constructor for content renderer module\n   *\n   * @param {IGrid} parent - specifies the Igrid\n   * @param {ServiceLocator} serviceLocator - specifies the service locator\n   */\n  function ContentRender(parent, serviceLocator) {\n    var _this = this;\n    this.rows = [];\n    this.freezeRows = [];\n    this.movableRows = [];\n    this.freezeRowElements = [];\n    /** @hidden */\n    this.currentInfo = {};\n    /** @hidden */\n    this.prevCurrentView = [];\n    this.isLoaded = true;\n    this.viewColIndexes = [];\n    this.drop = function (e) {\n      _this.parent.notify(events.columnDrop, {\n        target: e.target,\n        droppedElement: e.droppedElement\n      });\n      remove(e.droppedElement);\n    };\n    this.infiniteCache = {};\n    this.isRemove = false;\n    this.visibleRows = [];\n    this.visibleFrozenRows = [];\n    this.rightFreezeRows = [];\n    this.isAddRows = false;\n    this.isInfiniteFreeze = false;\n    this.useGroupCache = false;\n    this.rafCallback = function (args) {\n      var arg = args;\n      return function () {\n        if (_this.parent.isFrozenGrid() && _this.parent.enableVirtualization) {\n          var tableName = args.tableName;\n          _this.isLoaded = _this.parent.getFrozenMode() === literals.leftRight ? tableName === 'frozen-right' : tableName === 'movable';\n          if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n            var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().getElementsByClassName(literals.row));\n            var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().getElementsByClassName(literals.row));\n            _this.isLoaded = mHdr.length === fHdr.length;\n          }\n        }\n        _this.ariaService.setBusy(_this.getPanel().querySelector('.' + literals.content), false);\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n        var rows = _this.rows.slice(0);\n        if (_this.parent.enableInfiniteScrolling) {\n          rows = _this.parent.getRowsObject();\n          var prevPage = arg.prevPage;\n          if (_this.parent.infiniteScrollSettings.enableCache && prevPage) {\n            var maxBlock = _this.parent.infiniteScrollSettings.maxBlocks;\n            rows = [];\n            var rowIdx = parseInt(_this.rowElements[0].getAttribute('aria-rowindex'), 10) + 1;\n            var startIdx = Math.ceil(rowIdx / _this.parent.pageSettings.pageSize);\n            for (var i = 0, count = startIdx; i < maxBlock; i++, count++) {\n              if (_this.infiniteCache[count]) {\n                rows = rows.concat(_this.infiniteCache[count]);\n              }\n            }\n          }\n        }\n        if (_this.parent.isFrozenGrid()) {\n          rows = args.isFrozen ? _this.freezeRows : args.renderFrozenRightContent ? _this.parent.getFrozenRightRowsObject() : _this.movableRows;\n        }\n        _this.parent.notify(events.contentReady, {\n          rows: rows,\n          args: arg\n        });\n        if (_this.isLoaded) {\n          _this.parent.isManualRefresh = false;\n          _this.parent.trigger(events.dataBound, {}, function () {\n            if (_this.parent.allowTextWrap) {\n              _this.parent.notify(events.freezeRender, {\n                case: 'textwrap'\n              });\n            }\n          });\n        }\n        if (arg) {\n          var action = (arg.requestType || '').toLowerCase() + '-complete';\n          _this.parent.notify(action, arg);\n          if (args.requestType === 'batchsave') {\n            args.cancel = false;\n            _this.parent.trigger(events.actionComplete, args);\n          }\n        }\n        if (_this.isLoaded) {\n          _this.parent.hideSpinner();\n        }\n      };\n    };\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.ariaService = this.serviceLocator.getService('ariaService');\n    this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();\n    this.generator = this.getModelGenerator();\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization && !this.parent.groupSettings.enableLazyLoading) {\n      this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n    }\n    this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n    this.parent.on(events.refreshInfiniteModeBlocks, this.refreshContentRows, this);\n    this.parent.on(events.beforeCellFocused, this.beforeCellFocused, this);\n    this.parent.on(events.destroy, this.droppableDestroy, this);\n  }\n  ContentRender.prototype.beforeCellFocused = function (e) {\n    if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n      this.pressedKey = e.keyArgs.action;\n    } else {\n      this.pressedKey = undefined;\n    }\n  };\n  /**\n   * The function is used to render grid content div\n   *\n   * @returns {void}\n   */\n  ContentRender.prototype.renderPanel = function () {\n    var gObj = this.parent;\n    var div = this.parent.element.querySelector('.' + literals.gridContent);\n    if (div) {\n      this.ariaService.setOptions(this.parent.element.querySelector('.' + literals.content), {\n        busy: false\n      });\n      this.setPanel(div);\n      return;\n    }\n    div = this.parent.createElement('div', {\n      className: literals.gridContent\n    });\n    var innerDiv = this.parent.createElement('div', {\n      className: literals.content\n    });\n    this.ariaService.setOptions(innerDiv, {\n      busy: false\n    });\n    div.appendChild(innerDiv);\n    this.setPanel(div);\n    gObj.element.appendChild(div);\n  };\n  /**\n   * The function is used to render grid content table\n   *\n   * @returns {void}\n   */\n  ContentRender.prototype.renderTable = function () {\n    var contentDiv = this.getPanel();\n    var virtualTable = contentDiv.querySelector('.e-virtualtable');\n    var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n    if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n      remove(virtualTable);\n      remove(virtualTrack);\n    }\n    contentDiv.appendChild(this.createContentTable('_content_table'));\n    this.setTable(contentDiv.querySelector('.' + literals.table));\n    this.ariaService.setOptions(this.getTable(), {\n      multiselectable: this.parent.selectionSettings.type === 'Multiple'\n    });\n    this.initializeContentDrop();\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n    }\n  };\n  /**\n   * The function is used to create content table elements\n   *\n   * @param {string} id - specifies the id\n   * @returns {Element} returns the element\n   * @hidden\n   */\n  ContentRender.prototype.createContentTable = function (id) {\n    var innerDiv = this.getPanel().firstElementChild;\n    if (this.getTable()) {\n      remove(this.getTable());\n    }\n    var table = innerDiv.querySelector('.' + literals.table) ? innerDiv.querySelector('.' + literals.table) : this.parent.createElement('table', {\n      className: literals.table,\n      attrs: {\n        cellspacing: '0.25px',\n        role: 'grid',\n        id: this.parent.element.id + id\n      }\n    });\n    this.setColGroup(this.parent.getHeaderTable().querySelector(literals.colGroup).cloneNode(true));\n    table.appendChild(this.getColGroup());\n    table.appendChild(this.parent.createElement(literals.tbody));\n    innerDiv.appendChild(table);\n    return innerDiv;\n  };\n  /**\n   * Refresh the content of the Grid.\n   *\n   * @param {NotifyArgs} args - specifies the args\n   * @returns {void}\n   */\n  // tslint:disable-next-line:max-func-body-length\n  ContentRender.prototype.refreshContentRows = function (args) {\n    var _this = this;\n    if (args === void 0) {\n      args = {};\n    }\n    var gObj = this.parent;\n    if (gObj.currentViewData.length === 0) {\n      return;\n    }\n    var dataSource = this.currentMovableRows || gObj.currentViewData;\n    var contentModule = this.parent.contentModule;\n    var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);\n    var frag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n    if (!this.initialPageRecords) {\n      this.initialPageRecords = extend([], dataSource);\n    }\n    var hdrfrag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n    var columns = gObj.getColumns();\n    var tr;\n    var hdrTbody;\n    var frzCols = gObj.getFrozenColumns();\n    var isFrozenGrid = this.parent.isFrozenGrid();\n    var trElement;\n    var row = new RowRenderer(this.serviceLocator, null, this.parent);\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType === 'infiniteScroll';\n    gObj.notify(events.destroyChildGrid, {});\n    this.rowElements = [];\n    this.rows = [];\n    var fCont = this.getPanel().querySelector('.' + literals.frozenContent);\n    var mCont = this.getPanel().querySelector('.' + literals.movableContent);\n    var cont = this.getPanel().querySelector('.' + literals.content);\n    var tbdy;\n    var tableName;\n    if (isGroupAdaptive(gObj)) {\n      if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder'].some(function (value) {\n        return args.requestType === value;\n      })) {\n        this.emptyVcRows();\n      }\n    }\n    var modelData;\n    if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n      if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') {\n        modelData = this.parent.contentModule.generateRows(dataSource, args);\n        args.renderMovableContent = true;\n      }\n      modelData = this.parent.contentModule.generateRows(dataSource, args);\n    } else {\n      modelData = this.checkCache(modelData, args);\n      if (!this.isAddRows && !this.useGroupCache) {\n        modelData = this.generator.generateRows(dataSource, args);\n      }\n    }\n    this.setGroupCache(modelData, args);\n    this.parent.notify(events.setInfiniteCache, {\n      isInfiniteScroll: isInfiniteScroll,\n      modelData: modelData,\n      args: args\n    });\n    var idx = modelData[0].cells[0].index;\n    if (isFrozenGrid) {\n      tableName = contentModule.setTbody(modelData, args);\n      tbdy = contentModule.getTbody(tableName);\n    }\n    var isFrozenLeft = this.parent.getFrozenMode() === literals.leftRight && tableName === literals.frozenRight;\n    /* eslint-disable */\n    if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {\n      var templatetoclear = [];\n      for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n        for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n          if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n            templatetoclear.push(this.parent.registeredTemplate.template[i]);\n            /* eslint-enable */\n          }\n        }\n      }\n\n      this.parent.destroyTemplate(['template'], templatetoclear);\n    }\n    if ((this.parent.isReact || this.parent.isVue) && args.requestType !== 'infiniteScroll' && !args.isFrozen) {\n      var templates = [this.parent.isVue ? 'template' : 'columnTemplate', 'rowTemplate', 'detailTemplate', 'captionTemplate', 'commandsTemplate', 'groupFooterTemplate', 'groupCaptionTemplate'];\n      clearReactVueTemplates(this.parent, templates);\n    }\n    if (this.parent.enableColumnVirtualization) {\n      var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n      cellMerge.updateVirtualCells(modelData);\n    }\n    if (!isFrozenGrid) {\n      this.tbody = this.getTable().querySelector(literals.tbody);\n    }\n    var startIndex = 0;\n    var blockLoad = true;\n    if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n      var top_1 = 'top';\n      var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top : !isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0;\n      if (scrollTop !== 0) {\n        var offsets_1 = gObj.vGroupOffsets;\n        var bSize = gObj.pageSettings.pageSize / 2;\n        var values = Object.keys(offsets_1).map(function (key) {\n          return offsets_1[key];\n        });\n        for (var m = 0; m < values.length; m++) {\n          if (scrollTop < values[m]) {\n            if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n              startIndex = m > 0 ? (m - 1) * bSize : m * bSize;\n              break;\n            } else {\n              startIndex = m * bSize;\n              if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {\n                args.virtualInfo.blockIndexes = [m, m + 1];\n              }\n              break;\n            }\n          }\n        }\n        if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >= this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n          blockLoad = false;\n        }\n      }\n    }\n    var isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization && args.requestType === 'reorder';\n    if (gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X' || isVFFrozenOnly) {\n      var bIndex = args.virtualInfo.blockIndexes;\n      var page = args.virtualInfo.page;\n      args.virtualInfo.blockIndexes = [1, 2];\n      if (isVFFrozenOnly) {\n        args.virtualInfo.page = 1;\n      }\n      var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;\n      var mhdrData = this.vgenerator.generateRows(data, args);\n      mhdrData.splice(this.parent.frozenRows);\n      for (var i = 0; i < this.parent.frozenRows; i++) {\n        mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n        tr = row.render(mhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n      args.virtualInfo.blockIndexes = bIndex;\n      args.virtualInfo.page = page;\n      if (isVFFrozenOnly && args.virtualInfo.page === 1) {\n        modelData.splice(0, this.parent.frozenRows);\n      }\n    }\n    this.virtualFrozenHdrRefresh(hdrfrag, modelData, row, args, dataSource, columns);\n    for (var i = startIndex, len = modelData.length; i < len; i++) {\n      this.rows.push(modelData[i]);\n      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n        this.setRowsInLazyGroup(modelData[i], i);\n        if (isNullOrUndefined(modelData[i].indent)) {\n          continue;\n        }\n      }\n      this.setInfiniteVisibleRows(args, modelData[i], tableName);\n      if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes && this.rowElements.length >= args.virtualInfo.blockIndexes.length * this.parent.contentModule.getBlockSize() && blockLoad) {\n        this.parent.currentViewData['records'] = this.rows.map(function (m) {\n          return m.data;\n        });\n        break;\n      }\n      if (!gObj.rowTemplate) {\n        tr = row.render(modelData[i], columns);\n        var isVFreorder = this.ensureFrozenHeaderRender(args);\n        if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder && this.ensureVirtualFrozenHeaderRender(args)) {\n          hdrfrag.appendChild(tr);\n        } else {\n          frag.appendChild(tr);\n        }\n        if (modelData[i].isExpand) {\n          gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n        }\n      } else {\n        var rowTemplateID = gObj.element.id + 'rowTemplate';\n        var elements = void 0;\n        if (gObj.isReact) {\n          var isHeader = gObj.frozenRows && i < gObj.frozenRows;\n          var copied = extend({\n            index: i\n          }, dataSource[i]);\n          gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);\n          gObj.renderTemplates();\n        } else {\n          elements = gObj.getRowTemplate()(extend({\n            index: i\n          }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n        }\n        if (!gObj.isReact && elements[0].tagName === 'TBODY') {\n          for (var j = 0; j < elements.length; j++) {\n            var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n            if (isTR || elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length) {\n              tr = isTR ? elements[j] : elements[j].querySelector('tr');\n            }\n          }\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            hdrfrag.appendChild(tr);\n          } else {\n            frag.appendChild(tr);\n          }\n        } else {\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;\n          } else {\n            // frag.appendChild(tr);\n            if (!gObj.isReact) {\n              tr = appendChildren(frag, elements);\n            }\n            trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;\n          }\n        }\n        var arg = {\n          data: modelData[i].data,\n          row: trElement ? trElement : tr\n        };\n        this.parent.trigger(events.rowDataBound, arg);\n      }\n      if (modelData[i].isDataRow) {\n        this.rowElements.push(tr);\n      }\n      this.ariaService.setOptions(this.getTable(), {\n        colcount: gObj.getColumns().length.toString()\n      });\n    }\n    if (isFrozenGrid) {\n      contentModule.splitRows(tableName);\n    }\n    if (gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args) || args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X') {\n      hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(literals.tbody);\n      if (isReact) {\n        var parentTable = hdrTbody.parentElement;\n        remove(hdrTbody);\n        parentTable.appendChild(hdrfrag);\n      } else {\n        hdrTbody.innerHTML = '';\n        hdrTbody.appendChild(hdrfrag);\n      }\n    }\n    if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n      cont.style.height = cont.offsetHeight - hdrTbody.offsetHeight + 'px';\n    }\n    args.rows = this.rows.slice(0);\n    if (isFrozenGrid) {\n      contentModule.setIsFrozen(args, tableName);\n    }\n    this.index = idx;\n    getUpdateUsingRaf(function () {\n      _this.parent.notify(events.beforeFragAppend, args);\n      var isVFTable = _this.parent.enableVirtualization && _this.parent.isFrozenGrid();\n      if (!_this.parent.enableVirtualization && !isInfiniteScroll) {\n        if (_this.parent.isFrozenGrid()) {\n          remove(contentModule.getTbody(tableName));\n          tbdy = _this.parent.createElement(literals.tbody);\n        } else {\n          _this.tbody.innerHTML = '';\n          remove(_this.tbody);\n          _this.tbody = _this.parent.createElement(literals.tbody);\n        }\n      }\n      if (isFrozenGrid && !isVFTable && !_this.parent.enableInfiniteScrolling) {\n        _this.appendContent(tbdy, frag, args, tableName);\n      } else {\n        if (gObj.rowTemplate) {\n          updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n        }\n        if (isVFTable) {\n          if (args.renderFrozenRightContent) {\n            var frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n            _this.appendContent(frCont, frag, args);\n          } else if (!args.renderMovableContent) {\n            _this.appendContent(fCont.querySelector(literals.tbody), frag, args);\n          } else {\n            _this.appendContent(mCont.querySelector(literals.tbody), frag, args);\n            args.renderMovableContent = false;\n          }\n          if (!_this.parent.getFrozenColumns()) {\n            contentModule.renderNextFrozentPart(args, tableName);\n          }\n        } else {\n          if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n            _this.isAddRows = false;\n            _this.parent.notify(events.removeInfiniteRows, {\n              args: args\n            });\n            _this.parent.notify(events.appendInfiniteContent, {\n              tbody: tbdy ? tbdy : _this.tbody,\n              frag: frag,\n              args: args,\n              rows: _this.rows,\n              rowElements: _this.rowElements,\n              visibleRows: _this.visibleRows,\n              tableName: tableName\n            });\n            if (!frzCols && isFrozenGrid) {\n              if (gObj.getFrozenMode() !== literals.leftRight && (tableName === literals.frozenLeft || tableName === literals.frozenRight) || gObj.getFrozenMode() === literals.leftRight && (tableName === literals.frozenLeft || tableName === 'movable')) {\n                _this.refreshContentRows(extend({}, args));\n              }\n            }\n          } else {\n            _this.useGroupCache = false;\n            _this.appendContent(_this.tbody, frag, args);\n          }\n        }\n      }\n      if (frzCols) {\n        contentModule.renderNextFrozentPart(args, tableName);\n      }\n      frag = null;\n    }, this.rafCallback(extend({}, args)));\n  };\n  ContentRender.prototype.emptyVcRows = function () {\n    this.parent.vcRows = [];\n    this.parent.vRows = [];\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ContentRender.prototype.appendContent = function (tbody, frag, args, tableName) {\n    var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);\n    if (isReact) {\n      this.getTable().appendChild(frag);\n    } else {\n      tbody.appendChild(frag);\n      this.getTable().appendChild(tbody);\n    }\n  };\n  ContentRender.prototype.setRowsInLazyGroup = function (row, index) {\n    if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n      this.parent.contentModule.maintainRows(row, index);\n    }\n  };\n  ContentRender.prototype.setGroupCache = function (data, args) {\n    if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {\n      this.parent.notify(events.setGroupCache, {\n        args: args,\n        data: data\n      });\n    }\n  };\n  ContentRender.prototype.ensureFrozenHeaderRender = function (args) {\n    return !(this.parent.enableVirtualization && (args.requestType === 'reorder' || args.requestType === 'refresh') || this.parent.infiniteScrollSettings.enableCache && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete' && this.parent.pageSettings.currentPage !== 1);\n  };\n  ContentRender.prototype.ensureVirtualFrozenHeaderRender = function (args) {\n    return !(this.parent.enableVirtualization && args.requestType === 'delete');\n  };\n  ContentRender.prototype.checkCache = function (modelData, args) {\n    if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {\n      var index = args.isFrozen ? 1 : 0;\n      var frozenCols = this.parent.isFrozenGrid();\n      this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);\n      if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;\n      }\n      if (this.isAddRows) {\n        var data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage] : this.infiniteCache[this.parent.pageSettings.currentPage][index];\n        modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;\n      }\n      return modelData;\n    }\n    if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder') && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {\n      this.useGroupCache = true;\n      return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');\n    }\n    return null;\n  };\n  ContentRender.prototype.setInfiniteVisibleRows = function (args, data, tableName) {\n    var frozenCols = this.parent.isFrozenGrid();\n    if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {\n      if (frozenCols) {\n        if (tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && tableName === literals.frozenRight) {\n          this.visibleFrozenRows.push(data);\n        } else if (tableName === 'movable') {\n          this.visibleRows.push(data);\n        } else {\n          this.rightFreezeRows.push(data);\n        }\n      } else if (!this.parent.infiniteScrollSettings.enableCache) {\n        this.visibleRows.push(data);\n      }\n    }\n  };\n  ContentRender.prototype.getCurrentBlockInfiniteRecords = function (isFreeze) {\n    var data = [];\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      if (!Object.keys(this.infiniteCache).length) {\n        return [];\n      }\n      var frozenCols = this.parent.isFrozenGrid();\n      var rows = this.parent.getRows();\n      var index = parseInt(rows[this.parent.frozenRows].getAttribute(literals.ariaRowIndex), 10);\n      var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);\n      index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n      var last = Math.ceil(index / this.parent.pageSettings.pageSize);\n      if (frozenCols) {\n        var idx = isFreeze ? 0 : 1;\n        for (var i = first; i <= last; i++) {\n          data = !data.length ? this.infiniteCache[i][idx] : data.concat(this.infiniteCache[i][idx]);\n        }\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n          data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);\n        }\n      } else {\n        for (var i = first; i <= last; i++) {\n          data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);\n        }\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n          data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);\n        }\n      }\n    }\n    return data;\n  };\n  ContentRender.prototype.getReorderedVFRows = function (args) {\n    return this.parent.contentModule.getReorderedFrozenRows(args);\n  };\n  ContentRender.prototype.getReorderedRows = function (args) {\n    return this.parent.contentModule.getReorderedFrozenRows(args);\n  };\n  ContentRender.prototype.virtualFrozenHdrRefresh = function (hdrfrag, modelData, row, args, dataSource, columns) {\n    if (this.parent.frozenRows && this.parent.enableVirtualization && (args.requestType === 'reorder' || args.requestType === 'refresh')) {\n      var tr = void 0;\n      var fhdrData = [];\n      if (this.parent.isFrozenGrid()) {\n        this.currentMovableRows = dataSource;\n        fhdrData = this.getReorderedVFRows(args);\n      } else {\n        fhdrData = this.getReorderedRows(args);\n      }\n      for (var i = 0; i < fhdrData.length; i++) {\n        tr = row.render(fhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n      if (args.virtualInfo.page === 1) {\n        modelData.splice(0, this.parent.frozenRows);\n      }\n      if (args.renderMovableContent) {\n        this.parent.currentViewData = this.currentMovableRows;\n        this.currentMovableRows = null;\n      }\n    }\n  };\n  ContentRender.prototype.getInfiniteRows = function () {\n    var rows = [];\n    var frozenCols = this.parent.isFrozenGrid();\n    if (this.parent.enableInfiniteScrolling) {\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        var keys = Object.keys(this.infiniteCache);\n        for (var i = 0; i < keys.length; i++) {\n          rows = !frozenCols ? rows.concat(this.infiniteCache[keys[i]]) : rows.concat(this.infiniteCache[keys[i]][0]);\n        }\n      } else {\n        rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;\n      }\n    }\n    return rows;\n  };\n  ContentRender.prototype.getInfiniteMovableRows = function () {\n    var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();\n    var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows : this.visibleRows : [];\n    return infiniteRows;\n  };\n  /**\n   * Get the content div element of grid\n   *\n   * @returns {Element} returns the element\n   */\n  ContentRender.prototype.getPanel = function () {\n    return this.contentPanel;\n  };\n  /**\n   * Set the content div element of grid\n   *\n   * @param  {Element} panel - specifies the panel\n   * @returns {void}\n   */\n  ContentRender.prototype.setPanel = function (panel) {\n    this.contentPanel = panel;\n  };\n  /**\n   * Get the content table element of grid\n   *\n   * @returns {Element} returns the element\n   */\n  ContentRender.prototype.getTable = function () {\n    return this.contentTable;\n  };\n  /**\n   * Set the content table element of grid\n   *\n   * @param  {Element} table - specifies the table\n   * @returns {void}\n   */\n  ContentRender.prototype.setTable = function (table) {\n    this.contentTable = table;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   *\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n   */\n  ContentRender.prototype.getRows = function () {\n    var infiniteRows = this.getInfiniteRows();\n    return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   *\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n   */\n  ContentRender.prototype.getMovableRows = function () {\n    var infiniteRows = this.getInfiniteMovableRows();\n    return infiniteRows.length ? infiniteRows : this.movableRows;\n  };\n  /**\n   * Get the content table data row elements\n   *\n   * @returns {Element} returns the element\n   */\n  ContentRender.prototype.getRowElements = function () {\n    return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n  };\n  /**\n   * Get the Freeze pane movable content table data row elements\n   *\n   * @returns {Element} returns the element\n   */\n  ContentRender.prototype.getMovableRowElements = function () {\n    return this.rowElements;\n  };\n  /**\n   * Get the content table data row elements\n   *\n   * @param {Element[]} elements - specifies the elements\n   * @returns {void}\n   */\n  ContentRender.prototype.setRowElements = function (elements) {\n    this.rowElements = elements;\n  };\n  /**\n   * Get the header colgroup element\n   *\n   * @returns {Element} returns the element\n   */\n  ContentRender.prototype.getColGroup = function () {\n    return this.colgroup;\n  };\n  /**\n   * Set the header colgroup element\n   *\n   * @param {Element} colGroup - specifies the colgroup\n   * @returns {Element} returns the element\n   */\n  ContentRender.prototype.setColGroup = function (colGroup) {\n    if (!isNullOrUndefined(colGroup)) {\n      colGroup.id = 'content-' + colGroup.id;\n    }\n    return this.colgroup = colGroup;\n  };\n  /**\n   * Function to hide content table column based on visible property\n   *\n   * @param {Column[]} columns - specifies the column\n   * @returns {void}\n   */\n  ContentRender.prototype.setVisible = function (columns) {\n    var gObj = this.parent;\n    var isFrozenGrid = this.parent.isFrozenGrid();\n    var frzCols = gObj.getFrozenColumns();\n    var rows = [];\n    if (isFrozenGrid) {\n      var fRows = this.freezeRows;\n      var mRows = this.movableRows;\n      var rowLen = fRows.length;\n      var cellLen = void 0;\n      var rightRows = [];\n      if (gObj.getFrozenMode() === literals.leftRight) {\n        rightRows = gObj.getFrozenRightRowsObject();\n      }\n      for (var i = 0, row = void 0; i < rowLen; i++) {\n        cellLen = mRows[i].cells.length;\n        var rightLen = rightRows.length ? rightRows[i].cells.length : 0;\n        row = fRows[i].clone();\n        for (var j = 0; j < cellLen; j++) {\n          row.cells.push(mRows[i].cells[j]);\n        }\n        for (var k = 0; k < rightLen; k++) {\n          row.cells.push(rightRows[i].cells[k]);\n        }\n        rows.push(row);\n      }\n    } else {\n      rows = this.getRows();\n    }\n    var testRow;\n    rows.some(function (r) {\n      if (r.isDataRow) {\n        testRow = r;\n      }\n      return r.isDataRow;\n    });\n    var needFullRefresh = true;\n    if (!gObj.groupSettings.columns.length && testRow) {\n      needFullRefresh = false;\n    }\n    var tr = gObj.getDataRows();\n    var args = {};\n    var infiniteData = this.infiniteRowVisibility();\n    var contentrows = infiniteData ? infiniteData : this.rows.filter(function (row) {\n      return !row.isDetailRow;\n    });\n    for (var c = 0, clen = columns.length; c < clen; c++) {\n      var column = columns[c];\n      var idx = this.parent.getNormalizedColumnIndex(column.uid);\n      var colIdx = this.parent.getColumnIndexByUid(column.uid);\n      var displayVal = column.visible === true ? '' : 'none';\n      if (idx !== -1 && testRow && idx < testRow.cells.length) {\n        if (isFrozenGrid) {\n          if (column.getFreezeTableName() !== 'movable') {\n            if (column.getFreezeTableName() === literals.frozenRight) {\n              var left = this.parent.getFrozenLeftColumnsCount();\n              var movable = this.parent.getMovableColumnsCount();\n              colIdx = idx = idx - (left + movable);\n              var colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(literals.colGroup);\n              setStyleAttribute(colG.childNodes[idx], {\n                'display': displayVal\n              });\n              contentrows = gObj.getFrozenRightRowsObject();\n              tr = gObj.getFrozenRightDataRows();\n            } else {\n              setStyleAttribute(this.getColGroup().childNodes[idx], {\n                'display': displayVal\n              });\n              var infiniteFreezeData = this.infiniteRowVisibility(true);\n              contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;\n              tr = gObj.getDataRows();\n            }\n          } else {\n            var mTable = gObj.getContent().querySelector('.' + literals.movableContent).querySelector(literals.colGroup);\n            colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();\n            setStyleAttribute(mTable.childNodes[idx], {\n              'display': displayVal\n            });\n            tr = gObj.getMovableDataRows();\n            var infiniteMovableData = this.infiniteRowVisibility();\n            contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;\n          }\n        } else {\n          setStyleAttribute(this.getColGroup().childNodes[idx], {\n            'display': displayVal\n          });\n        }\n      }\n      if (!needFullRefresh) {\n        this.setDisplayNone(tr, colIdx, displayVal, contentrows);\n        if (contentrows[0].cells[colIdx].isTemplate) {\n          needFullRefresh = true;\n        }\n      }\n      if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n        this.parent.updateMediaColumns(column);\n      }\n      this.parent.invokedFromMedia = false;\n    }\n    if (needFullRefresh) {\n      this.refreshContentRows({\n        requestType: 'refresh'\n      });\n    } else {\n      if (!this.parent.getFrozenColumns()) {\n        this.parent.notify(events.partialRefresh, {\n          rows: contentrows,\n          args: args\n        });\n      } else {\n        this.parent.notify(events.partialRefresh, {\n          rows: this.freezeRows,\n          args: {\n            isFrozen: true,\n            rows: this.freezeRows\n          }\n        });\n        this.parent.notify(events.partialRefresh, {\n          rows: this.movableRows,\n          args: {\n            isFrozen: false,\n            rows: this.movableRows\n          }\n        });\n      }\n    }\n  };\n  /**\n   * @param {Object} tr - specifies the trr\n   * @param {number} idx - specifies the idx\n   * @param {string} displayVal - specifies the displayval\n   * @param {Row<Column>} rows - specifies the rows\n   * @returns {void}\n   * @hidden\n   */\n  ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n    setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());\n    this.parent.notify(events.infiniteShowHide, {\n      visible: displayVal,\n      index: idx,\n      isFreeze: this.isInfiniteFreeze\n    });\n  };\n  ContentRender.prototype.infiniteRowVisibility = function (isFreeze) {\n    var infiniteData;\n    if (this.parent.enableInfiniteScrolling) {\n      this.isInfiniteFreeze = isFreeze;\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();\n      } else {\n        infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;\n      }\n    }\n    return infiniteData;\n  };\n  ContentRender.prototype.colGroupRefresh = function () {\n    if (this.getColGroup()) {\n      var colGroup = void 0;\n      if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns() && this.parent.contentModule.isXaxis()) {\n        colGroup = this.parent.getMovableVirtualHeader().querySelector(literals.colGroup).cloneNode(true);\n      } else {\n        colGroup = this.getHeaderColGroup();\n      }\n      this.getTable().replaceChild(colGroup, this.getColGroup());\n      this.setColGroup(colGroup);\n    }\n  };\n  ContentRender.prototype.getHeaderColGroup = function () {\n    return this.parent.element.querySelector('.' + literals.gridHeader).querySelector(literals.colGroup).cloneNode(true);\n  };\n  ContentRender.prototype.initializeContentDrop = function () {\n    var gObj = this.parent;\n    this.droppable = new Droppable(gObj.element, {\n      accept: '.e-dragclone',\n      drop: this.drop\n    });\n  };\n  ContentRender.prototype.droppableDestroy = function () {\n    if (this.droppable && !this.droppable.isDestroyed) {\n      this.droppable.destroy();\n    }\n  };\n  ContentRender.prototype.canSkip = function (column, row, index) {\n    /**\n     * Skip the toggle visiblity operation when one of the following success\n     * 1. Grid has empty records\n     * 2. column visible property is unchanged\n     * 3. cell`s isVisible property is same as column`s visible property.\n     */\n    return isNullOrUndefined(row) ||\n    //(1)\n    isNullOrUndefined(column.visible) ||\n    //(2)\n    row.cells[index].visible === column.visible; //(3)\n  };\n\n  ContentRender.prototype.getModelGenerator = function () {\n    return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  };\n  ContentRender.prototype.renderEmpty = function (tbody) {\n    this.getTable().appendChild(tbody);\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().querySelector(literals.tbody).innerHTML = '';\n    }\n  };\n  ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n    this.parent.notify(events.setFreezeSelection, {\n      uid: uid,\n      set: set,\n      clearAll: clearAll\n    });\n    var isFrozen = this.parent.isFrozenGrid();\n    if (isFrozen && this.parent.enableVirtualization) {\n      return;\n    }\n    if (isFrozen) {\n      var rows = this.getMovableRows().filter(function (row) {\n        return clearAll || uid === row.uid;\n      });\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].isSelected = set;\n      }\n    }\n    var row = this.getRows().filter(function (row) {\n      return clearAll || uid === row.uid;\n    });\n    for (var j = 0; j < row.length; j++) {\n      row[j].isSelected = set;\n      var cells = row[j].cells;\n      for (var k = 0; k < cells.length; k++) {\n        cells[k].isSelected = set;\n      }\n    }\n  };\n  ContentRender.prototype.getRowByIndex = function (index) {\n    index = this.getInfiniteRowIndex(index);\n    return this.parent.getDataRows()[index];\n  };\n  ContentRender.prototype.getInfiniteRowIndex = function (index) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var fRows = this.parent.frozenRows;\n      var idx = fRows > index ? 0 : fRows;\n      var firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(literals.ariaRowIndex), 10);\n      index = fRows > index ? index : index - firstRowIndex + fRows;\n    }\n    return index;\n  };\n  ContentRender.prototype.getVirtualRowIndex = function (index) {\n    return index;\n  };\n  ContentRender.prototype.getMovableRowByIndex = function (index) {\n    index = this.getInfiniteRowIndex(index);\n    return this.parent.getMovableDataRows()[index];\n  };\n  ContentRender.prototype.enableAfterRender = function (e) {\n    if (e.module === 'group' && e.enable) {\n      this.generator = this.getModelGenerator();\n    }\n  };\n  ContentRender.prototype.setRowObjects = function (rows) {\n    this.rows = rows;\n  };\n  /**\n   * @param {NotifyArgs} args - specifies the args\n   * @returns {void}\n   * @hidden\n   */\n  ContentRender.prototype.immutableModeRendering = function (args) {\n    var _this = this;\n    if (args === void 0) {\n      args = {};\n    }\n    var gObj = this.parent;\n    gObj.hideSpinner();\n    var key = gObj.getPrimaryKeyFieldNames()[0];\n    var oldKeys = {};\n    var newKeys = {};\n    var newRowObjs = [];\n    var oldIndexes = {};\n    var oldRowObjs = gObj.getRowsObject().slice();\n    var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);\n    var newIndexes = {};\n    var hasBatch = Object.keys(batchChangeKeys).length !== 0;\n    if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder' || this.parent.groupSettings.columns.length) {\n      this.refreshContentRows(args);\n    } else {\n      if (gObj.currentViewData.length === 0) {\n        return;\n      }\n      var oldRowElements = {};\n      var tbody = gObj.createElement(literals.tbody);\n      var dataSource = gObj.currentViewData;\n      var trs = [].slice.call(this.getTable().querySelector(literals.tbody).children);\n      if (this.prevCurrentView.length) {\n        var prevLen = this.prevCurrentView.length;\n        var currentLen = dataSource.length;\n        if (prevLen === currentLen) {\n          for (var i = 0; i < currentLen; i++) {\n            if (this.parent.editSettings.mode === 'Batch' && trs[i].classList.contains('e-insertedrow')) {\n              trs.splice(i, 1);\n              --i;\n              continue;\n            }\n            newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;\n            newIndexes[i] = dataSource[i][key];\n            oldRowElements[oldRowObjs[i].uid] = trs[i];\n            oldIndexes[i] = this.prevCurrentView[i][key];\n          }\n        } else {\n          for (var i = 0; i < currentLen; i++) {\n            newKeys[dataSource[i][key]] = i;\n            newIndexes[i] = dataSource[i][key];\n          }\n          for (var i = 0; i < prevLen; i++) {\n            if (this.parent.editSettings.mode === 'Batch' && trs[i].classList.contains('e-insertedrow')) {\n              trs.splice(i, 1);\n              --i;\n              continue;\n            }\n            oldRowElements[oldRowObjs[i].uid] = trs[i];\n            oldKeys[this.prevCurrentView[i][key]] = i;\n            oldIndexes[i] = this.prevCurrentView[i][key];\n          }\n        }\n      }\n      for (var i = 0; i < dataSource.length; i++) {\n        var oldIndex = oldKeys[dataSource[i][key]];\n        if (!isNullOrUndefined(oldIndex)) {\n          var isEqual = false;\n          if (this.parent.enableDeepCompare) {\n            isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);\n          }\n          var tr = oldRowElements[oldRowObjs[oldIndex].uid];\n          newRowObjs.push(oldRowObjs[oldIndex]);\n          if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid && (hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]) || !hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i]))) {\n            if (oldIndex !== i) {\n              this.refreshImmutableContent(i, tr, newRowObjs[i]);\n            }\n            tbody.appendChild(tr);\n            continue;\n          }\n          if (hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]) || !this.parent.enableDeepCompare && dataSource[i] !== this.prevCurrentView[oldIndex] || this.parent.enableDeepCompare && !isEqual) {\n            oldRowObjs[oldIndex].setRowValue(dataSource[i]);\n          }\n          tbody.appendChild(tr);\n          this.refreshImmutableContent(i, tr, newRowObjs[i]);\n        } else {\n          var row = new RowRenderer(this.serviceLocator, null, gObj);\n          var modelData = this.generator.generateRows([dataSource[i]]);\n          newRowObjs.push(modelData[0]);\n          var tr = row.render(modelData[0], gObj.getColumns());\n          tbody.appendChild(tr);\n          this.refreshImmutableContent(i, tr, newRowObjs[i]);\n        }\n      }\n      this.rows = newRowObjs;\n      this.rowElements = [].slice.call(tbody.children);\n      remove(this.getTable().querySelector(literals.tbody));\n      this.getTable().appendChild(tbody);\n      this.parent.trigger(events.dataBound, {}, function () {\n        if (_this.parent.allowTextWrap) {\n          _this.parent.notify(events.freezeRender, {\n            case: 'textwrap'\n          });\n        }\n      });\n      if (args) {\n        var action = (args.requestType || '').toLowerCase() + '-complete';\n        this.parent.notify(action, args);\n      }\n    }\n  };\n  ContentRender.prototype.objectEqualityChecker = function (old, next) {\n    var keys = Object.keys(old);\n    var isEqual = true;\n    for (var i = 0; i < keys.length; i++) {\n      if (old[keys[i]] !== next[keys[i]]) {\n        var isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;\n        if (!isDate || old[keys[i]].getTime() !== next[keys[i]].getTime()) {\n          isEqual = false;\n          break;\n        }\n      }\n    }\n    return isEqual;\n  };\n  ContentRender.prototype.getBatchEditedRecords = function (primaryKey, rows) {\n    var keys = {};\n    var changes = this.parent.getBatchChanges();\n    var changedRecords = [];\n    var addedRecords = [];\n    if (Object.keys(changes).length) {\n      changedRecords = changes.changedRecords;\n      addedRecords = changes.addedRecords;\n    }\n    var args = {\n      cancel: false\n    };\n    this.parent.notify(events.immutableBatchCancel, {\n      rows: rows,\n      args: args\n    });\n    if (addedRecords.length) {\n      if (this.parent.editSettings.newRowPosition === 'Bottom') {\n        rows.splice(rows.length - 1, addedRecords.length);\n      } else {\n        if (!args.cancel) {\n          rows.splice(0, addedRecords.length);\n        }\n      }\n    }\n    for (var i = 0; i < changedRecords.length; i++) {\n      keys[changedRecords[i][primaryKey]] = i;\n    }\n    return keys;\n  };\n  ContentRender.prototype.refreshImmutableContent = function (index, tr, row) {\n    row.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n    if (row.isAltRow) {\n      tr.classList.add('e-altrow');\n    } else {\n      tr.classList.remove('e-altrow');\n    }\n    row.index = index;\n    row.edit = undefined;\n    row.isDirty = false;\n    tr.setAttribute(literals.ariaRowIndex, index.toString());\n    this.updateCellIndex(tr, index);\n  };\n  ContentRender.prototype.updateCellIndex = function (rowEle, index) {\n    for (var i = 0; i < rowEle.cells.length; i++) {\n      rowEle.cells[i].setAttribute('index', index.toString());\n    }\n  };\n  return ContentRender;\n}();\nexport { ContentRender };","map":{"version":3,"names":["Droppable","isNullOrUndefined","extend","setStyleAttribute","remove","updateBlazorTemplate","getUpdateUsingRaf","appendChildren","setDisplayValue","clearReactVueTemplates","events","RowRenderer","CellMergeRender","RowModelGenerator","GroupModelGenerator","isGroupAdaptive","literals","ContentRender","parent","serviceLocator","_this","rows","freezeRows","movableRows","freezeRowElements","currentInfo","prevCurrentView","isLoaded","viewColIndexes","drop","e","notify","columnDrop","target","droppedElement","infiniteCache","isRemove","visibleRows","visibleFrozenRows","rightFreezeRows","isAddRows","isInfiniteFreeze","useGroupCache","rafCallback","args","arg","isFrozenGrid","enableVirtualization","tableName","getFrozenMode","leftRight","enableColumnVirtualization","requestType","mHdr","slice","call","getMovableVirtualHeader","getElementsByClassName","row","fHdr","getFrozenVirtualHeader","length","ariaService","setBusy","getPanel","querySelector","content","isDestroyed","enableInfiniteScrolling","getRowsObject","prevPage","infiniteScrollSettings","enableCache","maxBlock","maxBlocks","rowIdx","parseInt","rowElements","getAttribute","startIdx","Math","ceil","pageSettings","pageSize","i","count","concat","isFrozen","renderFrozenRightContent","getFrozenRightRowsObject","contentReady","isManualRefresh","trigger","dataBound","allowTextWrap","freezeRender","case","action","toLowerCase","cancel","actionComplete","hideSpinner","getService","enableDeepCompare","getDataModule","isRemote","generator","getModelGenerator","groupSettings","enableLazyLoading","on","columnVisibilityChanged","setVisible","colGroupRefresh","uiUpdate","enableAfterRender","refreshInfiniteModeBlocks","refreshContentRows","beforeCellFocused","destroy","droppableDestroy","prototype","byKey","keyArgs","pressedKey","undefined","renderPanel","gObj","div","element","gridContent","setOptions","busy","setPanel","createElement","className","innerDiv","appendChild","renderTable","contentDiv","virtualTable","virtualTrack","createContentTable","setTable","table","getTable","multiselectable","selectionSettings","type","initializeContentDrop","frozenRows","getHeaderContent","classList","add","id","firstElementChild","attrs","cellspacing","role","setColGroup","getHeaderTable","colGroup","cloneNode","getColGroup","tbody","currentViewData","dataSource","currentMovableRows","contentModule","isReact","rowTemplate","frag","document","createDocumentFragment","initialPageRecords","hdrfrag","columns","getColumns","tr","hdrTbody","frzCols","getFrozenColumns","trElement","isInfiniteScroll","destroyChildGrid","fCont","frozenContent","mCont","movableContent","cont","tbdy","some","value","emptyVcRows","modelData","virtualInfo","sentinelInfo","axis","generateRows","renderMovableContent","checkCache","setGroupCache","setInfiniteCache","idx","cells","index","setTbody","getTbody","isFrozenLeft","frozenRight","registeredTemplate","template","templatetoclear","j","rootNodes","parentNode","push","destroyTemplate","isVue","templates","cellMerge","updateVirtualCells","startIndex","blockLoad","vcRows","top_1","scrollTop","offsets","top","offsets_1","vGroupOffsets","bSize","values","Object","keys","map","key","m","direction","isEndBlock","blockIndexes","round","contentPanel","offsetHeight","scrollHeight","rowObject","isVFFrozenOnly","bIndex","page","data","mhdrData","vgenerator","splice","render","virtualFrozenHdrRefresh","len","setRowsInLazyGroup","indent","setInfiniteVisibleRows","getBlockSize","isVFreorder","ensureFrozenHeaderRender","ensureVirtualFrozenHeaderRender","isExpand","expandChildGrid","rowTemplateID","elements","isHeader","copied","getRowTemplate","renderTemplates","tagName","isTR","nodeName","querySelectorAll","lastElementChild","rowDataBound","isDataRow","colcount","toString","splitRows","getFrozenHeader","parentTable","parentElement","innerHTML","Number","height","style","setIsFrozen","beforeFragAppend","isVFTable","appendContent","frCont","getContent","renderNextFrozentPart","infiniteScrollModule","removeInfiniteRows","appendInfiniteContent","frozenLeft","vRows","maintainRows","currentPage","frozenCols","getGroupCache","initialGroupRows","getCurrentBlockInfiniteRecords","isFreeze","getRows","ariaRowIndex","first","last","getReorderedVFRows","getReorderedFrozenRows","getReorderedRows","fhdrData","getInfiniteRows","getInfiniteMovableRows","infiniteCacheRows","infiniteRows","panel","contentTable","getMovableRows","getRowElements","getMovableRowElements","setRowElements","colgroup","fRows","mRows","rowLen","cellLen","rightRows","rightLen","clone","k","testRow","r","needFullRefresh","getDataRows","infiniteData","infiniteRowVisibility","contentrows","filter","isDetailRow","c","clen","column","getNormalizedColumnIndex","uid","colIdx","getColumnIndexByUid","displayVal","visible","getFreezeTableName","left","getFrozenLeftColumnsCount","movable","getMovableColumnsCount","colG","childNodes","getFrozenRightDataRows","infiniteFreezeData","mTable","getMovableDataRows","infiniteMovableData","setDisplayNone","isTemplate","invokedFromMedia","hideAtMedia","updateMediaColumns","partialRefresh","isRowDragable","infiniteShowHide","isXaxis","getHeaderColGroup","replaceChild","gridHeader","droppable","accept","canSkip","allowGrouping","renderEmpty","setSelection","set","clearAll","setFreezeSelection","isSelected","getRowByIndex","getInfiniteRowIndex","firstRowIndex","getVirtualRowIndex","getMovableRowByIndex","module","enable","setRowObjects","immutableModeRendering","getPrimaryKeyFieldNames","oldKeys","newKeys","newRowObjs","oldIndexes","oldRowObjs","batchChangeKeys","getBatchEditedRecords","newIndexes","hasBatch","oldRowElements","trs","children","prevLen","currentLen","editSettings","mode","contains","oldIndex","isEqual","objectEqualityChecker","refreshImmutableContent","setRowValue","old","next","isDate","Date","getTime","primaryKey","changes","getBatchChanges","changedRecords","addedRecords","immutableBatchCancel","newRowPosition","isAltRow","enableAltRow","edit","isDirty","setAttribute","updateCellIndex","rowEle"],"sources":["C:/Users/Josh/Desktop/School-work/admin_dash/Admin_Dashboard/node_modules/@syncfusion/ej2-grids/src/grid/renderer/content-renderer.js"],"sourcesContent":["import { Droppable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren, setDisplayValue, clearReactVueTemplates } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { isGroupAdaptive } from '../base/util';\nimport * as literals from '../base/string-literals';\n// eslint-disable-next-line valid-jsdoc\n/**\n * Content module is used to render grid content\n *\n * @hidden\n */\nvar ContentRender = /** @class */ (function () {\n    /**\n     * Constructor for content renderer module\n     *\n     * @param {IGrid} parent - specifies the Igrid\n     * @param {ServiceLocator} serviceLocator - specifies the service locator\n     */\n    function ContentRender(parent, serviceLocator) {\n        var _this = this;\n        this.rows = [];\n        this.freezeRows = [];\n        this.movableRows = [];\n        this.freezeRowElements = [];\n        /** @hidden */\n        this.currentInfo = {};\n        /** @hidden */\n        this.prevCurrentView = [];\n        this.isLoaded = true;\n        this.viewColIndexes = [];\n        this.drop = function (e) {\n            _this.parent.notify(events.columnDrop, { target: e.target, droppedElement: e.droppedElement });\n            remove(e.droppedElement);\n        };\n        this.infiniteCache = {};\n        this.isRemove = false;\n        this.visibleRows = [];\n        this.visibleFrozenRows = [];\n        this.rightFreezeRows = [];\n        this.isAddRows = false;\n        this.isInfiniteFreeze = false;\n        this.useGroupCache = false;\n        this.rafCallback = function (args) {\n            var arg = args;\n            return function () {\n                if (_this.parent.isFrozenGrid() && _this.parent.enableVirtualization) {\n                    var tableName = args.tableName;\n                    _this.isLoaded = _this.parent.getFrozenMode() === literals.leftRight ? tableName === 'frozen-right' : tableName === 'movable';\n                    if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n                        var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().getElementsByClassName(literals.row));\n                        var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().getElementsByClassName(literals.row));\n                        _this.isLoaded = mHdr.length === fHdr.length;\n                    }\n                }\n                _this.ariaService.setBusy(_this.getPanel().querySelector('.' + literals.content), false);\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                var rows = _this.rows.slice(0);\n                if (_this.parent.enableInfiniteScrolling) {\n                    rows = _this.parent.getRowsObject();\n                    var prevPage = arg.prevPage;\n                    if (_this.parent.infiniteScrollSettings.enableCache && prevPage) {\n                        var maxBlock = _this.parent.infiniteScrollSettings.maxBlocks;\n                        rows = [];\n                        var rowIdx = (parseInt(_this.rowElements[0].getAttribute('aria-rowindex'), 10) + 1);\n                        var startIdx = Math.ceil(rowIdx / _this.parent.pageSettings.pageSize);\n                        for (var i = 0, count = startIdx; i < maxBlock; i++, count++) {\n                            if (_this.infiniteCache[count]) {\n                                rows = rows.concat(_this.infiniteCache[count]);\n                            }\n                        }\n                    }\n                }\n                if (_this.parent.isFrozenGrid()) {\n                    rows = args.isFrozen ? _this.freezeRows : args.renderFrozenRightContent ? _this.parent.getFrozenRightRowsObject()\n                        : _this.movableRows;\n                }\n                _this.parent.notify(events.contentReady, { rows: rows, args: arg });\n                if (_this.isLoaded) {\n                    _this.parent.isManualRefresh = false;\n                    _this.parent.trigger(events.dataBound, {}, function () {\n                        if (_this.parent.allowTextWrap) {\n                            _this.parent.notify(events.freezeRender, { case: 'textwrap' });\n                        }\n                    });\n                }\n                if (arg) {\n                    var action = (arg.requestType || '').toLowerCase() + '-complete';\n                    _this.parent.notify(action, arg);\n                    if (args.requestType === 'batchsave') {\n                        args.cancel = false;\n                        _this.parent.trigger(events.actionComplete, args);\n                    }\n                }\n                if (_this.isLoaded) {\n                    _this.parent.hideSpinner();\n                }\n            };\n        };\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.ariaService = this.serviceLocator.getService('ariaService');\n        this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();\n        this.generator = this.getModelGenerator();\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization\n            && !this.parent.groupSettings.enableLazyLoading) {\n            this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n        }\n        this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n        this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n        this.parent.on(events.refreshInfiniteModeBlocks, this.refreshContentRows, this);\n        this.parent.on(events.beforeCellFocused, this.beforeCellFocused, this);\n        this.parent.on(events.destroy, this.droppableDestroy, this);\n    }\n    ContentRender.prototype.beforeCellFocused = function (e) {\n        if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n            this.pressedKey = e.keyArgs.action;\n        }\n        else {\n            this.pressedKey = undefined;\n        }\n    };\n    /**\n     * The function is used to render grid content div\n     *\n     * @returns {void}\n     */\n    ContentRender.prototype.renderPanel = function () {\n        var gObj = this.parent;\n        var div = this.parent.element.querySelector('.' + literals.gridContent);\n        if (div) {\n            this.ariaService.setOptions(this.parent.element.querySelector('.' + literals.content), { busy: false });\n            this.setPanel(div);\n            return;\n        }\n        div = this.parent.createElement('div', { className: literals.gridContent });\n        var innerDiv = this.parent.createElement('div', {\n            className: literals.content\n        });\n        this.ariaService.setOptions(innerDiv, { busy: false });\n        div.appendChild(innerDiv);\n        this.setPanel(div);\n        gObj.element.appendChild(div);\n    };\n    /**\n     * The function is used to render grid content table\n     *\n     * @returns {void}\n     */\n    ContentRender.prototype.renderTable = function () {\n        var contentDiv = this.getPanel();\n        var virtualTable = contentDiv.querySelector('.e-virtualtable');\n        var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n        if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n            remove(virtualTable);\n            remove(virtualTrack);\n        }\n        contentDiv.appendChild(this.createContentTable('_content_table'));\n        this.setTable(contentDiv.querySelector('.' + literals.table));\n        this.ariaService.setOptions(this.getTable(), {\n            multiselectable: this.parent.selectionSettings.type === 'Multiple'\n        });\n        this.initializeContentDrop();\n        if (this.parent.frozenRows) {\n            this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n        }\n    };\n    /**\n     * The function is used to create content table elements\n     *\n     * @param {string} id - specifies the id\n     * @returns {Element} returns the element\n     * @hidden\n     */\n    ContentRender.prototype.createContentTable = function (id) {\n        var innerDiv = this.getPanel().firstElementChild;\n        if (this.getTable()) {\n            remove(this.getTable());\n        }\n        var table = innerDiv.querySelector('.' + literals.table) ? innerDiv.querySelector('.' + literals.table) :\n            this.parent.createElement('table', {\n                className: literals.table, attrs: {\n                    cellspacing: '0.25px', role: 'grid',\n                    id: this.parent.element.id + id\n                }\n            });\n        this.setColGroup(this.parent.getHeaderTable().querySelector(literals.colGroup).cloneNode(true));\n        table.appendChild(this.getColGroup());\n        table.appendChild(this.parent.createElement(literals.tbody));\n        innerDiv.appendChild(table);\n        return innerDiv;\n    };\n    /**\n     * Refresh the content of the Grid.\n     *\n     * @param {NotifyArgs} args - specifies the args\n     * @returns {void}\n     */\n    // tslint:disable-next-line:max-func-body-length\n    ContentRender.prototype.refreshContentRows = function (args) {\n        var _this = this;\n        if (args === void 0) { args = {}; }\n        var gObj = this.parent;\n        if (gObj.currentViewData.length === 0) {\n            return;\n        }\n        var dataSource = this.currentMovableRows || gObj.currentViewData;\n        var contentModule = this.parent.contentModule;\n        var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);\n        var frag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n        if (!this.initialPageRecords) {\n            this.initialPageRecords = extend([], dataSource);\n        }\n        var hdrfrag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n        var columns = gObj.getColumns();\n        var tr;\n        var hdrTbody;\n        var frzCols = gObj.getFrozenColumns();\n        var isFrozenGrid = this.parent.isFrozenGrid();\n        var trElement;\n        var row = new RowRenderer(this.serviceLocator, null, this.parent);\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling\n            && args.requestType === 'infiniteScroll';\n        gObj.notify(events.destroyChildGrid, {});\n        this.rowElements = [];\n        this.rows = [];\n        var fCont = this.getPanel().querySelector('.' + literals.frozenContent);\n        var mCont = this.getPanel().querySelector('.' + literals.movableContent);\n        var cont = this.getPanel().querySelector('.' + literals.content);\n        var tbdy;\n        var tableName;\n        if (isGroupAdaptive(gObj)) {\n            if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder']\n                .some(function (value) { return args.requestType === value; })) {\n                this.emptyVcRows();\n            }\n        }\n        var modelData;\n        if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n            if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll'\n                && args.virtualInfo.sentinelInfo.axis === 'X') {\n                modelData = this.parent.contentModule.generateRows(dataSource, args);\n                args.renderMovableContent = true;\n            }\n            modelData = this.parent.contentModule.generateRows(dataSource, args);\n        }\n        else {\n            modelData = this.checkCache(modelData, args);\n            if (!this.isAddRows && !this.useGroupCache) {\n                modelData = this.generator.generateRows(dataSource, args);\n            }\n        }\n        this.setGroupCache(modelData, args);\n        this.parent.notify(events.setInfiniteCache, { isInfiniteScroll: isInfiniteScroll, modelData: modelData, args: args });\n        var idx = modelData[0].cells[0].index;\n        if (isFrozenGrid) {\n            tableName = contentModule.setTbody(modelData, args);\n            tbdy = contentModule.getTbody(tableName);\n        }\n        var isFrozenLeft = this.parent.getFrozenMode() === literals.leftRight && tableName === literals.frozenRight;\n        /* eslint-disable */\n        if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate\n            && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {\n            var templatetoclear = [];\n            for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n                for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n                    if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n                        templatetoclear.push(this.parent.registeredTemplate.template[i]);\n                        /* eslint-enable */\n                    }\n                }\n            }\n            this.parent.destroyTemplate(['template'], templatetoclear);\n        }\n        if ((this.parent.isReact || this.parent.isVue) && args.requestType !== 'infiniteScroll' && !args.isFrozen) {\n            var templates = [\n                this.parent.isVue ? 'template' : 'columnTemplate', 'rowTemplate', 'detailTemplate',\n                'captionTemplate', 'commandsTemplate', 'groupFooterTemplate', 'groupCaptionTemplate'\n            ];\n            clearReactVueTemplates(this.parent, templates);\n        }\n        if (this.parent.enableColumnVirtualization) {\n            var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n            cellMerge.updateVirtualCells(modelData);\n        }\n        if (!isFrozenGrid) {\n            this.tbody = this.getTable().querySelector(literals.tbody);\n        }\n        var startIndex = 0;\n        var blockLoad = true;\n        if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n            var top_1 = 'top';\n            var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top :\n                (!isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0);\n            if (scrollTop !== 0) {\n                var offsets_1 = gObj.vGroupOffsets;\n                var bSize = gObj.pageSettings.pageSize / 2;\n                var values = Object.keys(offsets_1).map(function (key) { return offsets_1[key]; });\n                for (var m = 0; m < values.length; m++) {\n                    if (scrollTop < values[m]) {\n                        if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n                            startIndex = m > 0 ? ((m - 1) * bSize) : (m * bSize);\n                            break;\n                        }\n                        else {\n                            startIndex = m * bSize;\n                            if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {\n                                args.virtualInfo.blockIndexes = [m, m + 1];\n                            }\n                            break;\n                        }\n                    }\n                }\n                if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >=\n                    this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n                    blockLoad = false;\n                }\n            }\n        }\n        var isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization\n            && args.requestType === 'reorder';\n        if ((gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') || isVFFrozenOnly) {\n            var bIndex = args.virtualInfo.blockIndexes;\n            var page = args.virtualInfo.page;\n            args.virtualInfo.blockIndexes = [1, 2];\n            if (isVFFrozenOnly) {\n                args.virtualInfo.page = 1;\n            }\n            var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;\n            var mhdrData = this.vgenerator\n                .generateRows(data, args);\n            mhdrData.splice(this.parent.frozenRows);\n            for (var i = 0; i < this.parent.frozenRows; i++) {\n                mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n                tr = row.render(mhdrData[i], columns);\n                hdrfrag.appendChild(tr);\n            }\n            args.virtualInfo.blockIndexes = bIndex;\n            args.virtualInfo.page = page;\n            if (isVFFrozenOnly && args.virtualInfo.page === 1) {\n                modelData.splice(0, this.parent.frozenRows);\n            }\n        }\n        this.virtualFrozenHdrRefresh(hdrfrag, modelData, row, args, dataSource, columns);\n        for (var i = startIndex, len = modelData.length; i < len; i++) {\n            this.rows.push(modelData[i]);\n            if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n                this.setRowsInLazyGroup(modelData[i], i);\n                if (isNullOrUndefined(modelData[i].indent)) {\n                    continue;\n                }\n            }\n            this.setInfiniteVisibleRows(args, modelData[i], tableName);\n            if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes\n                && (this.rowElements.length >= (args.virtualInfo.blockIndexes.length * this.parent.contentModule.getBlockSize()))\n                && blockLoad) {\n                this.parent.currentViewData['records'] = this.rows.map(function (m) { return m.data; });\n                break;\n            }\n            if (!gObj.rowTemplate) {\n                tr = row.render(modelData[i], columns);\n                var isVFreorder = this.ensureFrozenHeaderRender(args);\n                if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder\n                    && this.ensureVirtualFrozenHeaderRender(args)) {\n                    hdrfrag.appendChild(tr);\n                }\n                else {\n                    frag.appendChild(tr);\n                }\n                if (modelData[i].isExpand) {\n                    gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n                }\n            }\n            else {\n                var rowTemplateID = gObj.element.id + 'rowTemplate';\n                var elements = void 0;\n                if (gObj.isReact) {\n                    var isHeader = gObj.frozenRows && i < gObj.frozenRows;\n                    var copied = extend({ index: i }, dataSource[i]);\n                    gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);\n                    gObj.renderTemplates();\n                }\n                else {\n                    elements = gObj.getRowTemplate()(extend({ index: i }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n                }\n                if (!gObj.isReact && elements[0].tagName === 'TBODY') {\n                    for (var j = 0; j < elements.length; j++) {\n                        var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n                        if (isTR || (elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length)) {\n                            tr = isTR ? elements[j] : elements[j].querySelector('tr');\n                        }\n                    }\n                    if (gObj.frozenRows && i < gObj.frozenRows) {\n                        hdrfrag.appendChild(tr);\n                    }\n                    else {\n                        frag.appendChild(tr);\n                    }\n                }\n                else {\n                    if (gObj.frozenRows && i < gObj.frozenRows) {\n                        tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;\n                    }\n                    else {\n                        // frag.appendChild(tr);\n                        if (!gObj.isReact) {\n                            tr = appendChildren(frag, elements);\n                        }\n                        trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;\n                    }\n                }\n                var arg = { data: modelData[i].data, row: trElement ? trElement : tr };\n                this.parent.trigger(events.rowDataBound, arg);\n            }\n            if (modelData[i].isDataRow) {\n                this.rowElements.push(tr);\n            }\n            this.ariaService.setOptions(this.getTable(), { colcount: gObj.getColumns().length.toString() });\n        }\n        if (isFrozenGrid) {\n            contentModule.splitRows(tableName);\n        }\n        if ((gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args))\n            || (args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X')) {\n            hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(literals.tbody);\n            if (isReact) {\n                var parentTable = hdrTbody.parentElement;\n                remove(hdrTbody);\n                parentTable.appendChild(hdrfrag);\n            }\n            else {\n                hdrTbody.innerHTML = '';\n                hdrTbody.appendChild(hdrfrag);\n            }\n        }\n        if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n            cont.style.height = (cont.offsetHeight - hdrTbody.offsetHeight) + 'px';\n        }\n        args.rows = this.rows.slice(0);\n        if (isFrozenGrid) {\n            contentModule.setIsFrozen(args, tableName);\n        }\n        this.index = idx;\n        getUpdateUsingRaf(function () {\n            _this.parent.notify(events.beforeFragAppend, args);\n            var isVFTable = _this.parent.enableVirtualization && _this.parent.isFrozenGrid();\n            if (!_this.parent.enableVirtualization && !isInfiniteScroll) {\n                if (_this.parent.isFrozenGrid()) {\n                    remove(contentModule.getTbody(tableName));\n                    tbdy = _this.parent.createElement(literals.tbody);\n                }\n                else {\n                    _this.tbody.innerHTML = '';\n                    remove(_this.tbody);\n                    _this.tbody = _this.parent.createElement(literals.tbody);\n                }\n            }\n            if (isFrozenGrid && !isVFTable && !_this.parent.enableInfiniteScrolling) {\n                _this.appendContent(tbdy, frag, args, tableName);\n            }\n            else {\n                if (gObj.rowTemplate) {\n                    updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n                }\n                if (isVFTable) {\n                    if (args.renderFrozenRightContent) {\n                        var frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n                        _this.appendContent(frCont, frag, args);\n                    }\n                    else if (!args.renderMovableContent) {\n                        _this.appendContent(fCont.querySelector(literals.tbody), frag, args);\n                    }\n                    else {\n                        _this.appendContent(mCont.querySelector(literals.tbody), frag, args);\n                        args.renderMovableContent = false;\n                    }\n                    if (!_this.parent.getFrozenColumns()) {\n                        contentModule.renderNextFrozentPart(args, tableName);\n                    }\n                }\n                else {\n                    if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n                        _this.isAddRows = false;\n                        _this.parent.notify(events.removeInfiniteRows, { args: args });\n                        _this.parent.notify(events.appendInfiniteContent, {\n                            tbody: tbdy ? tbdy : _this.tbody, frag: frag, args: args, rows: _this.rows,\n                            rowElements: _this.rowElements, visibleRows: _this.visibleRows,\n                            tableName: tableName\n                        });\n                        if (!frzCols && isFrozenGrid) {\n                            if ((gObj.getFrozenMode() !== literals.leftRight\n                                && (tableName === literals.frozenLeft || tableName === literals.frozenRight))\n                                || (gObj.getFrozenMode() === literals.leftRight\n                                    && (tableName === literals.frozenLeft || tableName === 'movable'))) {\n                                _this.refreshContentRows(extend({}, args));\n                            }\n                        }\n                    }\n                    else {\n                        _this.useGroupCache = false;\n                        _this.appendContent(_this.tbody, frag, args);\n                    }\n                }\n            }\n            if (frzCols) {\n                contentModule.renderNextFrozentPart(args, tableName);\n            }\n            frag = null;\n        }, this.rafCallback(extend({}, args)));\n    };\n    ContentRender.prototype.emptyVcRows = function () {\n        this.parent.vcRows = [];\n        this.parent.vRows = [];\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ContentRender.prototype.appendContent = function (tbody, frag, args, tableName) {\n        var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);\n        if (isReact) {\n            this.getTable().appendChild(frag);\n        }\n        else {\n            tbody.appendChild(frag);\n            this.getTable().appendChild(tbody);\n        }\n    };\n    ContentRender.prototype.setRowsInLazyGroup = function (row, index) {\n        if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n            this.parent.contentModule.maintainRows(row, index);\n        }\n    };\n    ContentRender.prototype.setGroupCache = function (data, args) {\n        if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {\n            this.parent.notify(events.setGroupCache, { args: args, data: data });\n        }\n    };\n    ContentRender.prototype.ensureFrozenHeaderRender = function (args) {\n        return !((this.parent.enableVirtualization\n            && (args.requestType === 'reorder' || args.requestType === 'refresh')) || (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete'\n            && this.parent.pageSettings.currentPage !== 1));\n    };\n    ContentRender.prototype.ensureVirtualFrozenHeaderRender = function (args) {\n        return !(this.parent.enableVirtualization && args.requestType === 'delete');\n    };\n    ContentRender.prototype.checkCache = function (modelData, args) {\n        if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {\n            var index = args.isFrozen ? 1 : 0;\n            var frozenCols = this.parent.isFrozenGrid();\n            this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);\n            if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;\n            }\n            if (this.isAddRows) {\n                var data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage]\n                    : this.infiniteCache[this.parent.pageSettings.currentPage][index];\n                modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;\n            }\n            return modelData;\n        }\n        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length &&\n            (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder')\n            && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {\n            this.useGroupCache = true;\n            return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');\n        }\n        return null;\n    };\n    ContentRender.prototype.setInfiniteVisibleRows = function (args, data, tableName) {\n        var frozenCols = this.parent.isFrozenGrid();\n        if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {\n            if (frozenCols) {\n                if (tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && tableName === literals.frozenRight)) {\n                    this.visibleFrozenRows.push(data);\n                }\n                else if (tableName === 'movable') {\n                    this.visibleRows.push(data);\n                }\n                else {\n                    this.rightFreezeRows.push(data);\n                }\n            }\n            else if (!this.parent.infiniteScrollSettings.enableCache) {\n                this.visibleRows.push(data);\n            }\n        }\n    };\n    ContentRender.prototype.getCurrentBlockInfiniteRecords = function (isFreeze) {\n        var data = [];\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            if (!Object.keys(this.infiniteCache).length) {\n                return [];\n            }\n            var frozenCols = this.parent.isFrozenGrid();\n            var rows = this.parent.getRows();\n            var index = parseInt(rows[this.parent.frozenRows].getAttribute(literals.ariaRowIndex), 10);\n            var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);\n            index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n            var last = Math.ceil(index / this.parent.pageSettings.pageSize);\n            if (frozenCols) {\n                var idx = isFreeze ? 0 : 1;\n                for (var i = first; i <= last; i++) {\n                    data = !data.length ? this.infiniteCache[i][idx]\n                        : data.concat(this.infiniteCache[i][idx]);\n                }\n                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n                    data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);\n                }\n            }\n            else {\n                for (var i = first; i <= last; i++) {\n                    data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);\n                }\n                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n                    data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);\n                }\n            }\n        }\n        return data;\n    };\n    ContentRender.prototype.getReorderedVFRows = function (args) {\n        return this.parent.contentModule.getReorderedFrozenRows(args);\n    };\n    ContentRender.prototype.getReorderedRows = function (args) {\n        return this.parent.contentModule.getReorderedFrozenRows(args);\n    };\n    ContentRender.prototype.virtualFrozenHdrRefresh = function (hdrfrag, modelData, row, args, dataSource, columns) {\n        if (this.parent.frozenRows && this.parent.enableVirtualization\n            && (args.requestType === 'reorder' || args.requestType === 'refresh')) {\n            var tr = void 0;\n            var fhdrData = [];\n            if (this.parent.isFrozenGrid()) {\n                this.currentMovableRows = dataSource;\n                fhdrData = this.getReorderedVFRows(args);\n            }\n            else {\n                fhdrData = this.getReorderedRows(args);\n            }\n            for (var i = 0; i < fhdrData.length; i++) {\n                tr = row.render(fhdrData[i], columns);\n                hdrfrag.appendChild(tr);\n            }\n            if (args.virtualInfo.page === 1) {\n                modelData.splice(0, this.parent.frozenRows);\n            }\n            if (args.renderMovableContent) {\n                this.parent.currentViewData = this.currentMovableRows;\n                this.currentMovableRows = null;\n            }\n        }\n    };\n    ContentRender.prototype.getInfiniteRows = function () {\n        var rows = [];\n        var frozenCols = this.parent.isFrozenGrid();\n        if (this.parent.enableInfiniteScrolling) {\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                var keys = Object.keys(this.infiniteCache);\n                for (var i = 0; i < keys.length; i++) {\n                    rows = !frozenCols ? rows.concat(this.infiniteCache[keys[i]]) : rows.concat(this.infiniteCache[keys[i]][0]);\n                }\n            }\n            else {\n                rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;\n            }\n        }\n        return rows;\n    };\n    ContentRender.prototype.getInfiniteMovableRows = function () {\n        var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();\n        var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows\n            : this.visibleRows : [];\n        return infiniteRows;\n    };\n    /**\n     * Get the content div element of grid\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getPanel = function () {\n        return this.contentPanel;\n    };\n    /**\n     * Set the content div element of grid\n     *\n     * @param  {Element} panel - specifies the panel\n     * @returns {void}\n     */\n    ContentRender.prototype.setPanel = function (panel) {\n        this.contentPanel = panel;\n    };\n    /**\n     * Get the content table element of grid\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getTable = function () {\n        return this.contentTable;\n    };\n    /**\n     * Set the content table element of grid\n     *\n     * @param  {Element} table - specifies the table\n     * @returns {void}\n     */\n    ContentRender.prototype.setTable = function (table) {\n        this.contentTable = table;\n    };\n    /**\n     * Get the Movable Row collection in the Freeze pane Grid.\n     *\n     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n     */\n    ContentRender.prototype.getRows = function () {\n        var infiniteRows = this.getInfiniteRows();\n        return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n    };\n    /**\n     * Get the Movable Row collection in the Freeze pane Grid.\n     *\n     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n     */\n    ContentRender.prototype.getMovableRows = function () {\n        var infiniteRows = this.getInfiniteMovableRows();\n        return infiniteRows.length ? infiniteRows : this.movableRows;\n    };\n    /**\n     * Get the content table data row elements\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getRowElements = function () {\n        return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n    };\n    /**\n     * Get the Freeze pane movable content table data row elements\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getMovableRowElements = function () {\n        return this.rowElements;\n    };\n    /**\n     * Get the content table data row elements\n     *\n     * @param {Element[]} elements - specifies the elements\n     * @returns {void}\n     */\n    ContentRender.prototype.setRowElements = function (elements) {\n        this.rowElements = elements;\n    };\n    /**\n     * Get the header colgroup element\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getColGroup = function () {\n        return this.colgroup;\n    };\n    /**\n     * Set the header colgroup element\n     *\n     * @param {Element} colGroup - specifies the colgroup\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.setColGroup = function (colGroup) {\n        if (!isNullOrUndefined(colGroup)) {\n            colGroup.id = 'content-' + colGroup.id;\n        }\n        return this.colgroup = colGroup;\n    };\n    /**\n     * Function to hide content table column based on visible property\n     *\n     * @param {Column[]} columns - specifies the column\n     * @returns {void}\n     */\n    ContentRender.prototype.setVisible = function (columns) {\n        var gObj = this.parent;\n        var isFrozenGrid = this.parent.isFrozenGrid();\n        var frzCols = gObj.getFrozenColumns();\n        var rows = [];\n        if (isFrozenGrid) {\n            var fRows = this.freezeRows;\n            var mRows = this.movableRows;\n            var rowLen = fRows.length;\n            var cellLen = void 0;\n            var rightRows = [];\n            if (gObj.getFrozenMode() === literals.leftRight) {\n                rightRows = gObj.getFrozenRightRowsObject();\n            }\n            for (var i = 0, row = void 0; i < rowLen; i++) {\n                cellLen = mRows[i].cells.length;\n                var rightLen = rightRows.length ? rightRows[i].cells.length : 0;\n                row = fRows[i].clone();\n                for (var j = 0; j < cellLen; j++) {\n                    row.cells.push(mRows[i].cells[j]);\n                }\n                for (var k = 0; k < rightLen; k++) {\n                    row.cells.push(rightRows[i].cells[k]);\n                }\n                rows.push(row);\n            }\n        }\n        else {\n            rows = this.getRows();\n        }\n        var testRow;\n        rows.some(function (r) { if (r.isDataRow) {\n            testRow = r;\n        } return r.isDataRow; });\n        var needFullRefresh = true;\n        if (!gObj.groupSettings.columns.length && testRow) {\n            needFullRefresh = false;\n        }\n        var tr = gObj.getDataRows();\n        var args = {};\n        var infiniteData = this.infiniteRowVisibility();\n        var contentrows = infiniteData ? infiniteData\n            : this.rows.filter(function (row) { return !row.isDetailRow; });\n        for (var c = 0, clen = columns.length; c < clen; c++) {\n            var column = columns[c];\n            var idx = this.parent.getNormalizedColumnIndex(column.uid);\n            var colIdx = this.parent.getColumnIndexByUid(column.uid);\n            var displayVal = column.visible === true ? '' : 'none';\n            if (idx !== -1 && testRow && idx < testRow.cells.length) {\n                if (isFrozenGrid) {\n                    if (column.getFreezeTableName() !== 'movable') {\n                        if (column.getFreezeTableName() === literals.frozenRight) {\n                            var left = this.parent.getFrozenLeftColumnsCount();\n                            var movable = this.parent.getMovableColumnsCount();\n                            colIdx = idx = idx - (left + movable);\n                            var colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(literals.colGroup);\n                            setStyleAttribute(colG.childNodes[idx], { 'display': displayVal });\n                            contentrows = gObj.getFrozenRightRowsObject();\n                            tr = gObj.getFrozenRightDataRows();\n                        }\n                        else {\n                            setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });\n                            var infiniteFreezeData = this.infiniteRowVisibility(true);\n                            contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;\n                            tr = gObj.getDataRows();\n                        }\n                    }\n                    else {\n                        var mTable = gObj.getContent().querySelector('.' + literals.movableContent).querySelector(literals.colGroup);\n                        colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();\n                        setStyleAttribute(mTable.childNodes[idx], { 'display': displayVal });\n                        tr = gObj.getMovableDataRows();\n                        var infiniteMovableData = this.infiniteRowVisibility();\n                        contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;\n                    }\n                }\n                else {\n                    setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });\n                }\n            }\n            if (!needFullRefresh) {\n                this.setDisplayNone(tr, colIdx, displayVal, contentrows);\n                if (contentrows[0].cells[colIdx].isTemplate) {\n                    needFullRefresh = true;\n                }\n            }\n            if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n                this.parent.updateMediaColumns(column);\n            }\n            this.parent.invokedFromMedia = false;\n        }\n        if (needFullRefresh) {\n            this.refreshContentRows({ requestType: 'refresh' });\n        }\n        else {\n            if (!this.parent.getFrozenColumns()) {\n                this.parent.notify(events.partialRefresh, { rows: contentrows, args: args });\n            }\n            else {\n                this.parent.notify(events.partialRefresh, { rows: this.freezeRows, args: { isFrozen: true, rows: this.freezeRows } });\n                this.parent.notify(events.partialRefresh, { rows: this.movableRows, args: { isFrozen: false, rows: this.movableRows } });\n            }\n        }\n    };\n    /**\n     * @param {Object} tr - specifies the trr\n     * @param {number} idx - specifies the idx\n     * @param {string} displayVal - specifies the displayval\n     * @param {Row<Column>} rows - specifies the rows\n     * @returns {void}\n     * @hidden\n     */\n    ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n        setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());\n        this.parent.notify(events.infiniteShowHide, { visible: displayVal, index: idx, isFreeze: this.isInfiniteFreeze });\n    };\n    ContentRender.prototype.infiniteRowVisibility = function (isFreeze) {\n        var infiniteData;\n        if (this.parent.enableInfiniteScrolling) {\n            this.isInfiniteFreeze = isFreeze;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();\n            }\n            else {\n                infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;\n            }\n        }\n        return infiniteData;\n    };\n    ContentRender.prototype.colGroupRefresh = function () {\n        if (this.getColGroup()) {\n            var colGroup = void 0;\n            if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns()\n                && this.parent.contentModule.isXaxis()) {\n                colGroup = this.parent.getMovableVirtualHeader().querySelector(literals.colGroup).cloneNode(true);\n            }\n            else {\n                colGroup = this.getHeaderColGroup();\n            }\n            this.getTable().replaceChild(colGroup, this.getColGroup());\n            this.setColGroup(colGroup);\n        }\n    };\n    ContentRender.prototype.getHeaderColGroup = function () {\n        return this.parent.element.querySelector('.' + literals.gridHeader).querySelector(literals.colGroup).cloneNode(true);\n    };\n    ContentRender.prototype.initializeContentDrop = function () {\n        var gObj = this.parent;\n        this.droppable = new Droppable(gObj.element, {\n            accept: '.e-dragclone',\n            drop: this.drop\n        });\n    };\n    ContentRender.prototype.droppableDestroy = function () {\n        if (this.droppable && !this.droppable.isDestroyed) {\n            this.droppable.destroy();\n        }\n    };\n    ContentRender.prototype.canSkip = function (column, row, index) {\n        /**\n         * Skip the toggle visiblity operation when one of the following success\n         * 1. Grid has empty records\n         * 2. column visible property is unchanged\n         * 3. cell`s isVisible property is same as column`s visible property.\n         */\n        return isNullOrUndefined(row) || //(1)\n            isNullOrUndefined(column.visible) || //(2)\n            row.cells[index].visible === column.visible; //(3)\n    };\n    ContentRender.prototype.getModelGenerator = function () {\n        return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n    };\n    ContentRender.prototype.renderEmpty = function (tbody) {\n        this.getTable().appendChild(tbody);\n        if (this.parent.frozenRows) {\n            this.parent.getHeaderContent().querySelector(literals.tbody).innerHTML = '';\n        }\n    };\n    ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n        this.parent.notify(events.setFreezeSelection, { uid: uid, set: set, clearAll: clearAll });\n        var isFrozen = this.parent.isFrozenGrid();\n        if (isFrozen && this.parent.enableVirtualization) {\n            return;\n        }\n        if (isFrozen) {\n            var rows = this.getMovableRows().filter(function (row) { return clearAll || uid === row.uid; });\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].isSelected = set;\n            }\n        }\n        var row = this.getRows().filter(function (row) { return clearAll || uid === row.uid; });\n        for (var j = 0; j < row.length; j++) {\n            row[j].isSelected = set;\n            var cells = row[j].cells;\n            for (var k = 0; k < cells.length; k++) {\n                cells[k].isSelected = set;\n            }\n        }\n    };\n    ContentRender.prototype.getRowByIndex = function (index) {\n        index = this.getInfiniteRowIndex(index);\n        return this.parent.getDataRows()[index];\n    };\n    ContentRender.prototype.getInfiniteRowIndex = function (index) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var fRows = this.parent.frozenRows;\n            var idx = fRows > index ? 0 : fRows;\n            var firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(literals.ariaRowIndex), 10);\n            index = fRows > index ? index : (index - firstRowIndex) + fRows;\n        }\n        return index;\n    };\n    ContentRender.prototype.getVirtualRowIndex = function (index) {\n        return index;\n    };\n    ContentRender.prototype.getMovableRowByIndex = function (index) {\n        index = this.getInfiniteRowIndex(index);\n        return this.parent.getMovableDataRows()[index];\n    };\n    ContentRender.prototype.enableAfterRender = function (e) {\n        if (e.module === 'group' && e.enable) {\n            this.generator = this.getModelGenerator();\n        }\n    };\n    ContentRender.prototype.setRowObjects = function (rows) {\n        this.rows = rows;\n    };\n    /**\n     * @param {NotifyArgs} args - specifies the args\n     * @returns {void}\n     * @hidden\n     */\n    ContentRender.prototype.immutableModeRendering = function (args) {\n        var _this = this;\n        if (args === void 0) { args = {}; }\n        var gObj = this.parent;\n        gObj.hideSpinner();\n        var key = gObj.getPrimaryKeyFieldNames()[0];\n        var oldKeys = {};\n        var newKeys = {};\n        var newRowObjs = [];\n        var oldIndexes = {};\n        var oldRowObjs = gObj.getRowsObject().slice();\n        var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);\n        var newIndexes = {};\n        var hasBatch = Object.keys(batchChangeKeys).length !== 0;\n        if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder'\n            || this.parent.groupSettings.columns.length) {\n            this.refreshContentRows(args);\n        }\n        else {\n            if (gObj.currentViewData.length === 0) {\n                return;\n            }\n            var oldRowElements = {};\n            var tbody = gObj.createElement(literals.tbody);\n            var dataSource = gObj.currentViewData;\n            var trs = [].slice.call(this.getTable().querySelector(literals.tbody).children);\n            if (this.prevCurrentView.length) {\n                var prevLen = this.prevCurrentView.length;\n                var currentLen = dataSource.length;\n                if (prevLen === currentLen) {\n                    for (var i = 0; i < currentLen; i++) {\n                        if (this.parent.editSettings.mode === 'Batch'\n                            && trs[i].classList.contains('e-insertedrow')) {\n                            trs.splice(i, 1);\n                            --i;\n                            continue;\n                        }\n                        newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;\n                        newIndexes[i] = dataSource[i][key];\n                        oldRowElements[oldRowObjs[i].uid] = trs[i];\n                        oldIndexes[i] = this.prevCurrentView[i][key];\n                    }\n                }\n                else {\n                    for (var i = 0; i < currentLen; i++) {\n                        newKeys[dataSource[i][key]] = i;\n                        newIndexes[i] = dataSource[i][key];\n                    }\n                    for (var i = 0; i < prevLen; i++) {\n                        if (this.parent.editSettings.mode === 'Batch'\n                            && trs[i].classList.contains('e-insertedrow')) {\n                            trs.splice(i, 1);\n                            --i;\n                            continue;\n                        }\n                        oldRowElements[oldRowObjs[i].uid] = trs[i];\n                        oldKeys[this.prevCurrentView[i][key]] = i;\n                        oldIndexes[i] = this.prevCurrentView[i][key];\n                    }\n                }\n            }\n            for (var i = 0; i < dataSource.length; i++) {\n                var oldIndex = oldKeys[dataSource[i][key]];\n                if (!isNullOrUndefined(oldIndex)) {\n                    var isEqual = false;\n                    if (this.parent.enableDeepCompare) {\n                        isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);\n                    }\n                    var tr = oldRowElements[oldRowObjs[oldIndex].uid];\n                    newRowObjs.push(oldRowObjs[oldIndex]);\n                    if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid\n                        && ((hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]))\n                            || (!hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i])))) {\n                        if (oldIndex !== i) {\n                            this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                        }\n                        tbody.appendChild(tr);\n                        continue;\n                    }\n                    if ((hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]))\n                        || (!this.parent.enableDeepCompare && dataSource[i] !== this.prevCurrentView[oldIndex])\n                        || (this.parent.enableDeepCompare && !isEqual)) {\n                        oldRowObjs[oldIndex].setRowValue(dataSource[i]);\n                    }\n                    tbody.appendChild(tr);\n                    this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                }\n                else {\n                    var row = new RowRenderer(this.serviceLocator, null, gObj);\n                    var modelData = this.generator.generateRows([dataSource[i]]);\n                    newRowObjs.push(modelData[0]);\n                    var tr = row.render(modelData[0], gObj.getColumns());\n                    tbody.appendChild(tr);\n                    this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                }\n            }\n            this.rows = newRowObjs;\n            this.rowElements = [].slice.call(tbody.children);\n            remove(this.getTable().querySelector(literals.tbody));\n            this.getTable().appendChild(tbody);\n            this.parent.trigger(events.dataBound, {}, function () {\n                if (_this.parent.allowTextWrap) {\n                    _this.parent.notify(events.freezeRender, { case: 'textwrap' });\n                }\n            });\n            if (args) {\n                var action = (args.requestType || '').toLowerCase() + '-complete';\n                this.parent.notify(action, args);\n            }\n        }\n    };\n    ContentRender.prototype.objectEqualityChecker = function (old, next) {\n        var keys = Object.keys(old);\n        var isEqual = true;\n        for (var i = 0; i < keys.length; i++) {\n            if (old[keys[i]] !== next[keys[i]]) {\n                var isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;\n                if (!isDate || (old[keys[i]].getTime() !== next[keys[i]].getTime())) {\n                    isEqual = false;\n                    break;\n                }\n            }\n        }\n        return isEqual;\n    };\n    ContentRender.prototype.getBatchEditedRecords = function (primaryKey, rows) {\n        var keys = {};\n        var changes = this.parent.getBatchChanges();\n        var changedRecords = [];\n        var addedRecords = [];\n        if (Object.keys(changes).length) {\n            changedRecords = changes.changedRecords;\n            addedRecords = changes.addedRecords;\n        }\n        var args = { cancel: false };\n        this.parent.notify(events.immutableBatchCancel, { rows: rows, args: args });\n        if (addedRecords.length) {\n            if (this.parent.editSettings.newRowPosition === 'Bottom') {\n                rows.splice(rows.length - 1, addedRecords.length);\n            }\n            else {\n                if (!args.cancel) {\n                    rows.splice(0, addedRecords.length);\n                }\n            }\n        }\n        for (var i = 0; i < changedRecords.length; i++) {\n            keys[changedRecords[i][primaryKey]] = i;\n        }\n        return keys;\n    };\n    ContentRender.prototype.refreshImmutableContent = function (index, tr, row) {\n        row.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n        if (row.isAltRow) {\n            tr.classList.add('e-altrow');\n        }\n        else {\n            tr.classList.remove('e-altrow');\n        }\n        row.index = index;\n        row.edit = undefined;\n        row.isDirty = false;\n        tr.setAttribute(literals.ariaRowIndex, index.toString());\n        this.updateCellIndex(tr, index);\n    };\n    ContentRender.prototype.updateCellIndex = function (rowEle, index) {\n        for (var i = 0; i < rowEle.cells.length; i++) {\n            rowEle.cells[i].setAttribute('index', index.toString());\n        }\n    };\n    return ContentRender;\n}());\nexport { ContentRender };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}