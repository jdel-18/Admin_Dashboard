{"ast":null,"code":"import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */function () {\n  /**\n   * Constructor for the Grid infinite scrolling.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n   * @hidden\n   */\n  function InfiniteScroll(parent, serviceLocator) {\n    this.infiniteCache = {};\n    this.infiniteCurrentViewData = {};\n    this.infiniteFrozenCache = {};\n    this.isDownScroll = false;\n    this.isUpScroll = false;\n    this.isScroll = true;\n    this.enableContinuousScroll = false;\n    this.initialRender = true;\n    this.isRemove = false;\n    this.isInitialCollapse = false;\n    this.prevScrollTop = 0;\n    this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n    this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n    this.rowTop = 0;\n    this.isInitialMovableRender = true;\n    this.virtualInfiniteData = {};\n    this.isCancel = false;\n    this.emptyRowData = {};\n    this.isNormaledit = false;\n    this.isInfiniteScroll = false;\n    this.isLastPage = false;\n    this.isInitialRender = true;\n    this.isFocusScroll = false;\n    this.isGroupCollapse = false;\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n    this.addEventListener();\n    this.widthService = serviceLocator.getService('widthService');\n    this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  }\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.dataReady, this.onDataReady, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n    this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n    this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n    this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n    this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n    this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n    this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n    this.parent.on(events.setInfiniteCache, this.setCache, this);\n    this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n    this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n    this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n    this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n    this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n    this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n    this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n    this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n    this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);\n    this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n    this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.contentReady, this.selectNewRow, this);\n    this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n    this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n    this.actionBeginFunction = this.actionBegin.bind(this);\n    this.actionCompleteFunction = this.actionComplete.bind(this);\n    this.dataBoundFunction = this.dataBound.bind(this);\n    this.parent.on(events.deleteComplete, this.deleteComplate, this);\n    this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off(events.dataReady, this.onDataReady);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n    this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n    this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n    this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n    this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n    this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n    this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n    this.parent.off(events.setInfiniteCache, this.setCache);\n    this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n    this.parent.off(events.keyPressed, this.infiniteCellFocus);\n    this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n    this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n    this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n    this.parent.off(events.editReset, this.resetInfiniteEdit);\n    this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n    this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n    this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);\n    this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n    this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.contentReady, this.selectNewRow);\n    this.parent.off(events.captionActionComplete, this.captionActionComplete);\n    this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n    this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n  };\n  InfiniteScroll.prototype.dataBound = function () {\n    if (this.groupCaptionAction === 'collapse') {\n      this.groupCaptionAction = 'refresh';\n      this.makeGroupCollapseRequest();\n    } else if (this.groupCaptionAction === 'refresh') {\n      this.parent.hideSpinner();\n      this.groupCaptionAction = this.empty;\n    }\n  };\n  InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n    var gObj = this.parent;\n    if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n      args.skipPage = true;\n      this.isGroupCollapse = false;\n      if (this.groupCaptionAction === 'collapse') {\n        var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n        var rowObjs = gObj.getRowsObject();\n        var childCount = 0;\n        for (var i = rowObjs.length - 1; i >= 0; i--) {\n          if (rowObjs[i].indent === captionRow.indent) {\n            break;\n          }\n          if (rowObjs[i].isDataRow) {\n            childCount++;\n          }\n        }\n        var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n        var pred = generateExpandPredicates(key.fields, key.keys, this);\n        var predicateList = getPredicates(pred);\n        pred = predicateList[predicateList.length - 1];\n        for (var i = predicateList.length - 2; i >= 0; i--) {\n          pred = pred.and(predicateList[i]);\n        }\n        args.query.where(pred);\n        args.query.skip(childCount);\n        this.parentCapUid = this.empty;\n      } else {\n        var rows = gObj.getRows();\n        var size = gObj.pageSettings.pageSize;\n        var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n        var additionalCnt = skip - skip % size + size - skip;\n        if (skip % size === 0) {\n          additionalCnt = 0;\n        }\n        args.query.skip(skip);\n        args.query.take(gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize + additionalCnt);\n      }\n    }\n  };\n  InfiniteScroll.prototype.captionActionComplete = function (args) {\n    var gObj = this.parent;\n    if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n      var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n      var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n      if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n        this.parentCapUid = args.parentUid;\n        this.groupCaptionAction = 'collapse';\n        gObj.showSpinner();\n        var caption = gObj.getRowObjectFromUID(args.parentUid);\n        var childCount = this.getCaptionChildCount(caption);\n        if (!childCount) {\n          this.groupCaptionAction = 'refresh';\n          this.makeGroupCollapseRequest();\n        } else {\n          this.makeGroupCollapseRequest(args.parentUid);\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n    var gObj = this.parent;\n    var rows = gObj.getRows();\n    var index = getRowIndexFromElement(rows[rows.length - 1]);\n    var prevPage = this.parent.pageSettings.currentPage;\n    this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n    if (this.parent.pageSettings.currentPage > this.maxPage) {\n      gObj.hideSpinner();\n      return;\n    }\n    var scrollArg = {\n      requestType: 'infiniteScroll',\n      currentPage: this.parent.pageSettings.currentPage,\n      prevPage: prevPage,\n      startIndex: index + 1,\n      direction: 'down',\n      isCaptionCollapse: true,\n      parentUid: parentUid\n    };\n    this.isGroupCollapse = true;\n    this.parent.notify('model-changed', scrollArg);\n  };\n  InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n    var rowObj = this.parent.getRowsObject();\n    var index = rowObj.indexOf(caption);\n    var make = false;\n    for (var i = index; i < rowObj.length; i++) {\n      if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent) && rowObj[i].data.key !== caption.data.key) {\n        break;\n      }\n      if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {\n        make = true;\n        break;\n      }\n    }\n    return make;\n  };\n  InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n    var childCount = 0;\n    for (var i = index + 1; i < rowObj.length; i++) {\n      if (rowObj[i].indent === row.indent) {\n        break;\n      }\n      if (rowObj[i].indent === row.indent + 1 && rowObj[i].parentUid === row.uid) {\n        childCount++;\n      }\n    }\n    return row.data.count === childCount;\n  };\n  InfiniteScroll.prototype.updateCurrentViewData = function () {\n    var gObj = this.parent;\n    if (gObj.groupSettings.columns.length) {\n      return;\n    }\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    gObj.currentViewData = [];\n    var page = gObj.pageSettings.currentPage;\n    var isCache = gObj.infiniteScrollSettings.enableCache;\n    var blocks = gObj.infiniteScrollSettings.maxBlocks;\n    var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);\n    var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;\n    var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;\n    for (var i = start; i <= end; i++) {\n      if (this.infiniteCurrentViewData[i]) {\n        gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n      }\n    }\n  };\n  InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n    var page = this.parent.pageSettings.currentPage;\n    var size = this.parent.pageSettings.pageSize;\n    var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var cache = this.parent.infiniteScrollSettings.enableCache;\n    if (!this.parent.groupSettings.columns.length) {\n      var isAdd = e.args.requestType === 'save';\n      var isDelete = e.args.requestType === 'delete';\n      if (!cache && (isAdd || isDelete)) {\n        if (isAdd) {\n          this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n        } else {\n          this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n        }\n      } else {\n        if (blocks > 1 && e.data.length === blocks * size) {\n          this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n        } else {\n          this.infiniteCurrentViewData[page] = e.data.slice();\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.deleteComplate = function () {\n    if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n      this.parent.contentModule.refreshScrollOffset();\n    }\n  };\n  InfiniteScroll.prototype.modelChanged = function (args) {\n    var rows = this.parent.getRows();\n    if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n      this.firstIndex = getRowIndexFromElement(rows[0]);\n      this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n      this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n      if (args.requestType === 'delete') {\n        var rowObj = this.parent.getRowsObject();\n        args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n      } else {\n        args.startIndex = this.firstIndex;\n      }\n      if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n        this.isLastPage = true;\n        this.lastIndex = this.lastIndex - 1;\n      }\n    }\n  };\n  InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n    if (this.isNormaledit) {\n      this.isAdd = true;\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        if (!Object.keys(this.emptyRowData).length) {\n          this.createEmptyRowdata();\n        }\n        if (this.parent.pageSettings.currentPage > 1) {\n          args.startEdit = false;\n          this.resetInfiniteBlocks({}, true);\n          this.makeRequest({\n            currentPage: 1\n          });\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete' || args.e.requestType === 'save' && this.requestType === 'add')) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var rowElms = this.parent.getRows();\n      var rows = this.parent.getRowsObject();\n      if (this.ensureRowAvailability(rows, args.result[0])) {\n        if (rowElms.length) {\n          this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n          if (frozenCols) {\n            var rows_1 = this.parent.getMovableRowsObject();\n            this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n            if (this.parent.getFrozenMode() === literals.leftRight) {\n              var frRows = this.parent.getFrozenRightRowsObject();\n              this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n            }\n          }\n        }\n        if (!this.isLastPage) {\n          this.createRow(rows, args);\n        } else {\n          this.isLastPage = false;\n          this.parent.pageSettings.currentPage = this.maxPage;\n          if (this.parent.selectionModule.index < this.parent.frozenRows) {\n            remove(rowElms[this.parent.frozenRows - 1]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n            if (frozenCols) {\n              var movableRows = this.parent.getMovableDataRows();\n              remove(movableRows[this.parent.frozenRows]);\n              this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n              if (this.parent.getFrozenMode() === literals.leftRight) {\n                var rightRows = this.parent.getFrozenRightDataRows();\n                remove(rightRows[this.parent.frozenRows]);\n                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n              }\n            }\n            setRowElements(this.parent);\n          }\n        }\n      }\n      this.parent.hideSpinner();\n      this.parent.notify(events.refreshInfinitePersistSelection, {});\n      if (this.requestType === 'delete') {\n        this.parent.notify(events.deleteComplete, args.e);\n      } else {\n        this.parent.notify(events.saveComplete, args.e);\n      }\n    }\n    this.parent.notify(events.freezeRender, {\n      case: 'refreshHeight'\n    });\n  };\n  InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n    var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    var tbody;\n    if (isFrozenRight) {\n      tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n    } else {\n      tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualContent().querySelector(literals.tbody) : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n    }\n    if (this.parent.frozenRows) {\n      tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add' ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody) : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody) : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n    }\n    var notifyArgs = {\n      rows: rows,\n      cancel: false,\n      args: args,\n      isMovable: isMovable,\n      isFrozenRows: isFrozenRows,\n      isFrozenRight: isFrozenRows,\n      row: row\n    };\n    this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n    if (!notifyArgs.cancel) {\n      for (var i = row.length - 1; i >= 0; i--) {\n        if (this.requestType === 'delete') {\n          tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n        } else {\n          tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n        }\n      }\n    }\n    if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n      var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows() : this.parent.getRows();\n      var index = (isMovable || isFrozenRight) && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n      remove(rowElems[index]);\n      this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n    }\n    if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n      if (isFrozenRight) {\n        setRowElements(this.parent);\n        this.parent.contentModule.rightFreezeRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n      } else if (!this.parent.isFrozenGrid() || isMovable) {\n        setRowElements(this.parent);\n        this.parent.contentModule.visibleRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          args.e.renderMovableContent = true;\n          this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n        }\n      } else {\n        this.parent.contentModule.visibleFrozenRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n        args.e.isFrozen = true;\n        this.createRow(this.parent.getMovableRowsObject(), args, true);\n      }\n    }\n  };\n  InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n    var resume = true;\n    if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === 'add') {\n      var key = this.parent.getPrimaryKeyFieldNames()[0];\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].data[key] === data[key]) {\n          resume = false;\n          break;\n        }\n      }\n    }\n    return resume;\n  };\n  InfiniteScroll.prototype.generateRows = function (data, args) {\n    return this.rowModelGenerator.generateRows(data, args);\n  };\n  InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n    var _this = this;\n    var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n    var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n    if (isAdd) {\n      if (isRemove) {\n        if (isFrozen && !this.parent.groupSettings.columns.length) {\n          this.swapCurrentViewData(1, true);\n        }\n        remove(rowElms[rows.length - 1]);\n        rowElms.splice(rows.length - 1, 1);\n        rows.splice(rows.length - 1, 1);\n      }\n    } else {\n      rows.filter(function (e, index) {\n        if (e.data[keyField] === args.data[0][keyField]) {\n          if (isFrozen && !_this.parent.groupSettings.columns.length) {\n            var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n            _this.resetInfiniteCurrentViewData(page, index);\n          }\n          rows.splice(index, 1);\n          remove(rowElms[index]);\n          rowElms.splice(index, 1);\n        }\n      });\n    }\n    var startIndex = isAdd ? 1 : 0;\n    resetRowIndex(this.parent, rows, rowElms, startIndex);\n  };\n  InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n    index = index - (page - 1) * this.parent.pageSettings.pageSize;\n    this.infiniteCurrentViewData[page].splice(index, 1);\n    this.swapCurrentViewData(page, false);\n  };\n  InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var end = isAdd ? keys.length + 1 : keys.length;\n    for (var i = page; i < end; i++) {\n      if (this.infiniteCurrentViewData[i + 1]) {\n        var pageIndex = isAdd ? i : i + 1;\n        var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n        var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n        if (isAdd) {\n          this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n          if (i + 1 === end - 1) {\n            this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n          }\n        } else {\n          this.infiniteCurrentViewData[i].push(data[0]);\n        }\n      }\n    }\n    this.updateCurrentViewData();\n  };\n  InfiniteScroll.prototype.setDisplayNone = function (args) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n      for (var i = 1; i <= keys.length; i++) {\n        var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0] : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n        cache.filter(function (e) {\n          e.cells[args.index].visible = args.visible === '';\n        });\n      }\n      this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n    }\n  };\n  InfiniteScroll.prototype.refreshInfiniteCache = function (args) {\n    this.getEditedRowObject().data = args.data;\n  };\n  InfiniteScroll.prototype.refreshInfiniteEditrowindex = function (args) {\n    this.editRowIndex = args.index;\n  };\n  InfiniteScroll.prototype.getEditedRowObject = function () {\n    var rowObjects = this.parent.getRowsObject();\n    var editedrow;\n    for (var i = 0; i < rowObjects.length; i++) {\n      if (rowObjects[i].index === this.editRowIndex) {\n        editedrow = rowObjects[i];\n      }\n    }\n    return editedrow;\n  };\n  InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n    if (this.isNormaledit) {\n      if (!this.isAdd && args.data) {\n        this.updateCurrentViewRecords(args.data);\n      }\n      this.isAdd = false;\n    }\n  };\n  InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n    var index = getEditedDataIndex(this.parent, data);\n    if (!isNullOrUndefined(index)) {\n      this.parent.getCurrentViewRecords()[index] = data;\n    }\n  };\n  InfiniteScroll.prototype.actionBegin = function (args) {\n    if (args.requestType === 'add' || args.requestType === 'delete') {\n      this.requestType = args.requestType;\n    } else if (args.action === 'add' && args.requestType === 'save') {\n      this.requestType = args.action;\n    }\n    if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching' || args.requestType === 'sorting' || args.requestType === 'filtering') {\n      this.isInitialRender = true;\n    }\n  };\n  InfiniteScroll.prototype.actionComplete = function (args) {\n    if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n      this.requestType = this.empty;\n      this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n      this.isAdd = this.isEdit = false;\n      if (this.isNormaledit) {\n        this.editRowIndex = this.empty;\n        this.virtualInfiniteData = {};\n        this.parent.editModule.previousVirtualData = {};\n      }\n    }\n  };\n  InfiniteScroll.prototype.resetInfiniteEdit = function () {\n    if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n      if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {\n        this.parent.isEdit = true;\n      }\n    }\n  };\n  InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n    data.virtualData = this.virtualInfiniteData;\n    data.isAdd = this.isAdd;\n    data.isCancel = this.isCancel;\n  };\n  InfiniteScroll.prototype.editActionBegin = function (e) {\n    this.isEdit = true;\n    this.editRowIndex = e.index;\n    var rowObject = extend({}, this.getEditedRowObject().data);\n    e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n  };\n  InfiniteScroll.prototype.dataSourceModified = function () {\n    this.resetInfiniteBlocks({\n      requestType: this.empty\n    }, true);\n  };\n  InfiniteScroll.prototype.onDataReady = function (e) {\n    if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n      this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n    }\n  };\n  InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n    this.isInitialCollapse = !isExpand;\n  };\n  InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n    this.restoreInfiniteEdit();\n    this.restoreInfiniteAdd();\n    var targetEle = e.target;\n    var isInfinite = targetEle.classList.contains(literals.content);\n    if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n      var scrollEle = this.parent.getContent().firstElementChild;\n      this.prevScrollTop = scrollEle.scrollTop;\n      var rows = this.parent.getRows();\n      if (!rows.length) {\n        return;\n      }\n      var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n      var prevPage = this.parent.pageSettings.currentPage;\n      var args = void 0;\n      var offset = targetEle.scrollHeight - targetEle.scrollTop;\n      var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n      var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n      if (floor > targetEle.clientHeight) {\n        floor = floor - 1;\n      }\n      var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;\n      if (!isNullOrUndefined(this.groupCaptionAction)) {\n        return;\n      }\n      if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isUpScroll = false;\n          this.isDownScroll = true;\n        }\n        var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n        var row = rows_2[rows_2.length - 1];\n        var rowIndex = getRowIndexFromElement(row);\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n        args = {\n          requestType: 'infiniteScroll',\n          currentPage: this.parent.pageSettings.currentPage,\n          prevPage: prevPage,\n          startIndex: index,\n          direction: 'down'\n        };\n        this.makeRequest(args);\n      }\n      if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isDownScroll = false;\n          this.isUpScroll = true;\n        }\n        var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n        var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n        var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n        if (this.parent.pageSettings.currentPage) {\n          args = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: startIndex,\n            direction: 'up'\n          };\n          this.makeRequest(args);\n        }\n      }\n      if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n        if (this.isDownScroll || this.isUpScroll) {\n          scrollEle.scrollTop = this.top;\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.makeRequest = function (args) {\n    var _this = this;\n    if (this.parent.pageSettings.currentPage !== args.prevPage) {\n      var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n      if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {\n        this.isInfiniteScroll = true;\n        if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n            _this.parent.notify('model-changed', args);\n          }, 100);\n        } else {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n            _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n          }, 100);\n        }\n      } else {\n        this.parent.pageSettings.currentPage = this.maxPage;\n      }\n    }\n  };\n  InfiniteScroll.prototype.infinitePageQuery = function (query) {\n    if (this.initialRender) {\n      this.initialRender = false;\n      this.intialPageQuery(query);\n    } else {\n      if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n        this.editPageQuery(query);\n      } else {\n        query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n      }\n    }\n  };\n  InfiniteScroll.prototype.editPageQuery = function (query) {\n    var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var isCache = this.parent.infiniteScrollSettings.enableCache;\n    if (isCache) {\n      this.infiniteCache = {};\n      this.infiniteFrozenCache = {};\n      this.infiniteCurrentViewData = {};\n      query.skip(this.firstIndex);\n      query.take(initialBlocks * this.parent.pageSettings.pageSize);\n    } else {\n      if (this.parent.editSettings.mode === 'Dialog') {\n        this.parent.clearSelection();\n      }\n      var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n      query.skip(index);\n      query.take(1);\n    }\n  };\n  InfiniteScroll.prototype.intialPageQuery = function (query) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n      this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n    }\n    var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n    query.page(1, pageSize);\n  };\n  InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n    var gObj = this.parent;\n    var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n    var cellIdx = this.lastFocusInfo.cellIdx;\n    var row = gObj.getRowByIndex(rowIdx);\n    var content = gObj.getContent().firstElementChild;\n    if (!row) {\n      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n      var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n      gObj.pageSettings.currentPage = page;\n      var cols = gObj.getColumns();\n      remove(gObj.getContent().querySelector('tbody'));\n      gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody'));\n      var focusRows = [];\n      for (var i = page === 1 || this.maxPage === page ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n        var rows = this.infiniteCache[page + i];\n        if (rows) {\n          focusRows = focusRows.concat(rows);\n          for (var j = 0; j < rows.length; j++) {\n            gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));\n          }\n        }\n      }\n      gObj.notify(events.contentReady, {\n        rows: focusRows,\n        args: {}\n      });\n      setRowElements(gObj);\n    }\n    row = gObj.getRowByIndex(rowIdx);\n    var target = row.cells[cellIdx];\n    gObj.focusModule.isInfiniteScroll = true;\n    gObj.focusModule.onClick({\n      target: target\n    }, true);\n    gObj.selectRow(rowIdx);\n    target.focus();\n    this.isFocusScroll = false;\n    e.cancel = true;\n  };\n  InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n    var cell = e.byClick && e.clickArgs.target || e.byKey && e.keyArgs.target || (!this.isFocusScroll && e).target;\n    if (cell && cell.classList.contains('e-rowcell')) {\n      var cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);\n      var rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));\n      this.lastFocusInfo = {\n        rowIdx: rowIdx,\n        cellIdx: cellIdx\n      };\n    }\n  };\n  InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n    var gObj = this.parent;\n    var cache = gObj.infiniteScrollSettings.enableCache;\n    if (e.byKey) {\n      if (cache && this.isFocusScroll) {\n        this.scrollToLastFocusedCell(e);\n        return;\n      }\n      var cell = document.activeElement;\n      var rowIndex = getRowIndexFromElement(cell.parentElement);\n      this.cellIndex = parseInt(cell.getAttribute(literals.ariaColIndex), 10);\n      var content = gObj.getContent().firstElementChild;\n      var totalRowsCount = this.maxPage * gObj.pageSettings.pageSize - 1;\n      var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n      var contentRect = content.getBoundingClientRect();\n      if (!isNaN(rowIndex)) {\n        if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n          this.rowIndex = rowIndex += 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex + 1;\n          }\n          if (this.isFocusScroll || !row && rowIndex < totalRowsCount || rowRect && rowRect.bottom >= contentRect.bottom) {\n            if (!this.isFocusScroll) {\n              this.pressedKey = e.keyArgs.action;\n            }\n            this.isFocusScroll = false;\n            content.scrollTop = (rowIndex - visibleRowCount + 1) * this.parent.getRowHeight();\n          } else if (!cache && row) {\n            if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n              row.cells[this.cellIndex].scrollIntoView();\n            }\n          }\n        } else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n          this.rowIndex = rowIndex -= 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex - 1;\n          }\n          if (!row || rowRect.top <= contentRect.top) {\n            this.pressedKey = e.keyArgs.action;\n            content.scrollTop = rowIndex * this.parent.getRowHeight();\n          }\n        }\n      }\n    } else if (e.key === 'PageDown' || e.key === 'PageUp') {\n      this.pressedKey = e.key;\n    }\n    this.setLastCellFocusInfo(e);\n  };\n  InfiniteScroll.prototype.createEmptyRowdata = function () {\n    var _this = this;\n    this.parent.getColumns().filter(function (e) {\n      _this.emptyRowData[e.field] = _this.empty;\n    });\n  };\n  InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n    var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n    var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n    var gridForm = this.parent.element.querySelector('.e-gridform');\n    if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n      var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);\n      this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n      if (this.parent.isFrozenGrid()) {\n        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n      }\n    }\n  };\n  InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n    var content = this.parent.getContent().firstElementChild;\n    var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n    if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n      if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n        var row = this.parent.getRowByIndex(this.editRowIndex);\n        if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n          var top_1 = row.getBoundingClientRect().top;\n          if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n            this.parent.isEdit = false;\n            this.parent.editModule.startEdit(row);\n          }\n        }\n      }\n    }\n  };\n  InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n    var content = this.parent.getContent().firstElementChild;\n    if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n      var isTop = content.scrollTop < this.parent.getRowHeight();\n      if (isTop) {\n        this.parent.isEdit = false;\n        this.parent.addRecord();\n      }\n    }\n  };\n  InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var scrollEle = this.parent.getContent().firstElementChild;\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n    if (isInfiniteScroll && !e.args.isFrozen && !isMovable || !isInfiniteScroll) {\n      if (isInfiniteScroll && e.args.direction === 'up') {\n        e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n      } else {\n        e.tbody.appendChild(e.frag);\n      }\n    }\n    if (!frozenCols) {\n      this.parent.contentModule.getTable().appendChild(e.tbody);\n      this.updateCurrentViewData();\n    } else {\n      if (isInfiniteScroll) {\n        if (e.tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight) {\n          this.frozenFrag = e.frag;\n        } else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n          this.movableFrag = e.frag;\n        } else {\n          var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n          if (e.args.direction === 'up') {\n            tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n          } else {\n            tbody.appendChild(this.frozenFrag);\n          }\n          if (e.tableName === literals.frozenRight) {\n            this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n            this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n          } else {\n            this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n          }\n          this.parent.contentModule.refreshScrollOffset();\n          this.updateCurrentViewData();\n        }\n      } else {\n        var table = void 0;\n        if (e.tableName === literals.frozenLeft) {\n          table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n        } else if (e.tableName === 'movable') {\n          table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n          if (this.parent.getFrozenMode() !== literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        } else {\n          table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n          if (this.parent.getFrozenMode() === literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        }\n        table.appendChild(e.tbody);\n        this.widthService.refreshFrozenScrollbar();\n      }\n    }\n    if (this.isInitialRender && !e.args.isFrozen) {\n      this.isInitialRender = false;\n      this.parent.scrollModule.setHeight();\n    }\n    if (!e.args.isFrozen) {\n      this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n      if (isInfiniteScroll) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n          scrollEle.scrollTop = this.top;\n        }\n        setRowElements(this.parent);\n      }\n      this.restoreInfiniteAdd();\n      this.isScroll = true;\n    }\n    this.isInfiniteScroll = false;\n  };\n  InfiniteScroll.prototype.selectNewRow = function (args) {\n    var _this = this;\n    var gObj = this.parent;\n    var row = gObj.getRowByIndex(this.rowIndex);\n    var cache = gObj.infiniteScrollSettings.enableCache;\n    if (row && this.keys.some(function (value) {\n      return value === _this.pressedKey;\n    })) {\n      var content = gObj.getContent().firstElementChild;\n      var rowHeight = gObj.getRowHeight();\n      var target = row.cells[this.cellIndex];\n      if (this.pressedKey === literals.downArrow || this.pressedKey === literals.enter || cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter)) {\n        if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n          content.scrollTop = content.scrollTop + rowHeight;\n        }\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({\n          target: target\n        }, true);\n        gObj.selectRow(this.rowIndex);\n      }\n    } else if (this.lastFocusInfo || this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp) {\n      var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n      if (gObj.getRowByIndex(idx)) {\n        var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n        if (target) {\n          this.isFocusScroll = true;\n          if (!cache) {\n            gObj.focusModule.isInfiniteScroll = true;\n            gObj.focusModule.onClick({\n              target: target\n            }, true);\n          } else {\n            target.focus({\n              preventScroll: true\n            });\n          }\n        }\n      }\n    }\n    this.pressedKey = undefined;\n  };\n  InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n      var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n      if (e.args.direction === 'down') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        }\n        var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n        this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n      }\n      if (e.args.direction === 'up') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        } else {\n          this.removeBottomRows(rows, rows.length - 1, e.args);\n        }\n      }\n      this.isScroll = false;\n      this.top = this.calculateScrollTop(e.args);\n    }\n  };\n  InfiniteScroll.prototype.calculateScrollTop = function (args) {\n    var top = 0;\n    var scrollCnt = this.parent.getContent().firstElementChild;\n    if (args.direction === 'down') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.captionRowHeight();\n      }\n      var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n      var captionCount = 0;\n      if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n        captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n      }\n      var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n      var currentViewRowCount = 0;\n      var i = 0;\n      while (currentViewRowCount < scrollCnt.clientHeight) {\n        i++;\n        currentViewRowCount = i * this.parent.getRowHeight();\n      }\n      i = i - 1;\n      top += (value - i) * this.parent.getRowHeight();\n    }\n    if (args.direction === 'up') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n      } else if (this.isInitialCollapse) {\n        var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n        var count = 0;\n        for (var i = 0; i < groupedData.length; i++) {\n          if (groupedData[i].isCaptionRow) {\n            count++;\n          }\n        }\n        top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n      } else {\n        top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();\n      }\n    }\n    return top;\n  };\n  InfiniteScroll.prototype.captionRowHeight = function () {\n    var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n    return rows.length * this.parent.getRowHeight();\n  };\n  InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n    var frozeCols = this.parent.isFrozenGrid();\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n    for (var i = 0; i <= maxIndx; i++) {\n      if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {\n        continue;\n      }\n      remove(rows[i]);\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n  InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n    var cnt = 0;\n    var frozeCols = this.parent.isFrozenGrid();\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var pageSize = this.parent.pageSettings.pageSize;\n    if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n    }\n    if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n    }\n    for (var i = maxIndx; cnt < pageSize; i--) {\n      cnt++;\n      remove(rows[i]);\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n  InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n    var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n    if (args.direction === 'down') {\n      var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n      var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n      var k = 0;\n      for (var i = 0; k < lastRowIndex; i++) {\n        if (!rows[i].classList.contains(literals.row)) {\n          remove(rows[i]);\n        } else {\n          k = getRowIndexFromElement(rows[i]);\n        }\n      }\n    }\n    if (args.direction === 'up') {\n      var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n      var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n      var startIndex = 0;\n      for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n        startIndex += this.infiniteCache[i].length;\n      }\n      for (var i = startIndex; i < rows.length; i++) {\n        remove(rows[i]);\n      }\n    }\n  };\n  InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n    if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n      if (this.actions.some(function (value) {\n        return value === args.requestType;\n      }) || isDataModified) {\n        var scrollEle = this.parent.getContent().firstElementChild;\n        this.initialRender = true;\n        scrollEle.scrollTop = 0;\n        this.parent.pageSettings.currentPage = 1;\n        this.infiniteCache = this.infiniteFrozenCache = {};\n        this.infiniteCurrentViewData = {};\n        this.resetContentModuleCache({});\n        this.isRemove = false;\n        this.top = 0;\n        this.isInitialMovableRender = true;\n        this.isInitialCollapse = false;\n        this.parent.contentModule.isRemove = this.isRemove;\n        this.parent.contentModule.isAddRows = this.isRemove;\n        this.parent.contentModule.visibleRows = [];\n        this.parent.contentModule.visibleFrozenRows = [];\n      }\n    }\n  };\n  InfiniteScroll.prototype.setCache = function (e) {\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var frozeCols = this.parent.isFrozenGrid();\n      var idx = e.args.isFrozen ? 1 : 0;\n      var isEdit = e.args.requestType !== 'infiniteScroll' && (this.requestType === 'delete' || this.requestType === 'add');\n      var currentPage = this.parent.pageSettings.currentPage;\n      if (frozeCols && this.isInitialMovableRender || !frozeCols && !Object.keys(this.infiniteCache).length || isEdit) {\n        this.isInitialMovableRender = !e.args.isFrozen;\n        this.setInitialCache(e.modelData, e.args, isEdit);\n      }\n      if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n        this.resetContentModuleCache(this.infiniteCache);\n      }\n      if (frozeCols) {\n        if (idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]) || !this.infiniteFrozenCache[currentPage][idx].length) {\n          this.createFrozenCache(currentPage);\n          this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n          if (idx === 1) {\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          }\n        }\n      }\n      if (e.isInfiniteScroll && !this.isRemove) {\n        this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n        this.parent.contentModule.isRemove = this.isRemove;\n      }\n    }\n  };\n  InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var idx = args.isFrozen ? 1 : 0;\n    var k = !isEdit ? 1 : this.firstBlock;\n    for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n      var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n      var endIndex = i * this.parent.pageSettings.pageSize;\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n        this.setInitialGroupCache(data, k, startIndex, endIndex);\n      } else {\n        if (isCurrentViewData) {\n          this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n        } else {\n          if (frozenCols) {\n            this.createFrozenCache(k);\n            this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          } else {\n            this.infiniteCache[k] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteCache);\n          }\n        }\n      }\n      k++;\n    }\n  };\n  InfiniteScroll.prototype.createFrozenCache = function (index) {\n    if (!this.infiniteFrozenCache[index]) {\n      this.infiniteFrozenCache[index] = [[], []];\n    }\n  };\n  InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n    var pageData = [];\n    var startIndex = 0;\n    for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n      startIndex += this.infiniteCache[i].length;\n    }\n    var k = sIndex;\n    for (var i = startIndex; i < data.length && k < eIndex; i++) {\n      if (data[i].index < eIndex || data[i].isCaptionRow) {\n        k = data[i].isCaptionRow ? k : data[i].index;\n        pageData.push(data[i]);\n      }\n      if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n        break;\n      }\n    }\n    this.infiniteCache[index] = pageData;\n    this.resetContentModuleCache(this.infiniteCache);\n  };\n  InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n    this.parent.contentModule.infiniteCache = data;\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  return InfiniteScroll;\n}();\nexport { InfiniteScroll };","map":{"version":3,"names":["isNullOrUndefined","remove","extend","RowModelGenerator","FreezeRowModelGenerator","RowRenderer","events","getScrollBarWidth","getEditedDataIndex","resetRowIndex","setRowElements","getRowIndexFromElement","getGroupKeysAndFields","getPredicates","generateExpandPredicates","literals","InfiniteScroll","parent","serviceLocator","infiniteCache","infiniteCurrentViewData","infiniteFrozenCache","isDownScroll","isUpScroll","isScroll","enableContinuousScroll","initialRender","isRemove","isInitialCollapse","prevScrollTop","actions","keys","downArrow","upArrow","enter","shiftEnter","rowTop","isInitialMovableRender","virtualInfiniteData","isCancel","emptyRowData","isNormaledit","isInfiniteScroll","isLastPage","isInitialRender","isFocusScroll","isGroupCollapse","editSettings","mode","addEventListener","widthService","getService","rowModelGenerator","isFrozenGrid","prototype","getModuleName","on","dataReady","onDataReady","dataSourceModified","infinitePageQuery","infiniteScrollHandler","beforeCellFocused","infiniteCellFocus","appendInfiniteContent","appendInfiniteRows","removeInfiniteRows","removeInfiniteCacheRows","resetInfiniteBlocks","setInfiniteCache","setCache","initialCollapse","ensureIntialCollapse","keyPressed","infiniteShowHide","setDisplayNone","virtualScrollEditActionBegin","editActionBegin","getVirtualData","getVirtualInfiniteData","editReset","resetInfiniteEdit","virtualScrollEditSuccess","infiniteEditSuccess","refreshVirtualCache","refreshInfiniteCache","refreshInfiniteEditrowindex","infiniteEditHandler","virtualScrollAddActionBegin","infiniteAddActionBegin","modelChanged","refreshInfiniteCurrentViewData","destroy","contentReady","selectNewRow","captionActionComplete","setVirtualPageQuery","setGroupCollapsePageQuery","actionBeginFunction","actionBegin","bind","actionCompleteFunction","actionComplete","dataBoundFunction","dataBound","deleteComplete","deleteComplate","removeEventListener","isDestroyed","off","groupCaptionAction","makeGroupCollapseRequest","hideSpinner","empty","args","gObj","infiniteScrollSettings","enableCache","skipPage","captionRow","getRowObjectFromUID","parentCapUid","rowObjs","getRowsObject","childCount","i","length","indent","isDataRow","key","indexOf","pred","fields","predicateList","and","query","where","skip","rows","getRows","size","pageSettings","pageSize","additionalCnt","take","initialBlocks","isCollapse","contetRect","getContent","firstElementChild","getBoundingClientRect","tableReact","contentModule","getTable","Math","round","bottom","getRowHeight","parentUid","showSpinner","caption","getCaptionChildCount","index","prevPage","currentPage","ceil","maxPage","scrollArg","requestType","startIndex","direction","isCaptionCollapse","notify","rowObj","make","data","isCaptionRow","childCheck","row","uid","count","updateCurrentViewData","groupSettings","columns","Object","currentViewData","page","isCache","blocks","maxBlocks","isMiddlePage","start","end","concat","e","cache","isAdd","isDelete","push","setInitialCache","slice","refreshScrollOffset","firstIndex","firstBlock","lastIndex","createEmptyRowdata","startEdit","makeRequest","frozenCols","rowElms","ensureRowAvailability","result","rows_1","getMovableRowsObject","getMovableDataRows","getFrozenMode","leftRight","frRows","getFrozenRightRowsObject","getFrozenRightRows","createRow","selectionModule","frozenRows","movableRows","rightRows","getFrozenRightDataRows","refreshInfinitePersistSelection","saveComplete","freezeRender","case","isMovable","isFrozenRows","isFrozenRight","generateRows","rowRenderer","tbody","element","querySelector","getMovableVirtualContent","getFrozenVirtualContent","getHeaderContent","getMovableVirtualHeader","getFrozenVirtualHeader","notifyArgs","cancel","infiniteCrudCancel","appendChild","render","getColumns","insertBefore","rowElems","rightFreezeRows","visibleRows","renderMovableContent","visibleFrozenRows","isFrozen","resume","sortSettings","getPrimaryKeyFieldNames","_this","keyField","swapCurrentViewData","splice","filter","resetInfiniteCurrentViewData","pageIndex","isFreeze","cells","visible","resetContentModuleCache","getEditedRowObject","editRowIndex","rowObjects","editedrow","updateCurrentViewRecords","getCurrentViewRecords","action","isEdit","editModule","previousVirtualData","enableInfiniteScrolling","allowEditing","allowAdding","virtualData","rowObject","isExpand","restoreInfiniteEdit","restoreInfiniteAdd","targetEle","target","isInfinite","classList","contains","content","isLeft","scrollEle","scrollTop","offset","scrollHeight","floor","clientHeight","isBottom","rows_2","call","querySelectorAll","rowIndex","getElementsByClassName","top","initBlocks","setTimeout","getVirtualInfiniteEditedData","refreshInfiniteModeBlocks","intialPageQuery","editPageQuery","clearSelection","scrollToLastFocusedCell","rowIdx","lastFocusInfo","keyArgs","cellIdx","getRowByIndex","cols","createElement","focusRows","k","j","focusModule","onClick","selectRow","focus","setLastCellFocusInfo","cell","byClick","clickArgs","byKey","parseInt","getAttribute","parentElement","document","activeElement","cellIndex","ariaColIndex","totalRowsCount","visibleRowCount","offsetHeight","contentRect","isNaN","rowRect","pressedKey","scrollIntoView","field","editForm","editedRow","addForm","addedRow","gridForm","rowData","getCurrentEditedData","frozenEdit","top_1","isTop","addRecord","tableName","frag","frozenLeft","frozenRight","frozenFrag","movableFrag","table","refreshFrozenScrollbar","scrollModule","setHeight","some","value","rowHeight","pageDown","pageUp","idx","getCellFromIndex","preventScroll","undefined","getContentTable","allowGrouping","captionRows","removeCaptionRows","addRowCount","removeTopRows","removeBottomRows","calculateScrollTop","scrollCnt","captionRowHeight","captionCount","currentViewRowCount","groupedData","maxIndx","frozeCols","cnt","rowElements","lastRow","lastRowIndex","isDataModified","infiniteScrollModule","isAddRows","modelData","createFrozenCache","isCurrentViewData","endIndex","setInitialGroupCache","sIndex","eIndex","pageData"],"sources":["C:/Users/Josh/Desktop/School-work/admin_dash/Admin_Dashboard/node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js"],"sourcesContent":["import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for the Grid infinite scrolling.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n     * @hidden\n     */\n    function InfiniteScroll(parent, serviceLocator) {\n        this.infiniteCache = {};\n        this.infiniteCurrentViewData = {};\n        this.infiniteFrozenCache = {};\n        this.isDownScroll = false;\n        this.isUpScroll = false;\n        this.isScroll = true;\n        this.enableContinuousScroll = false;\n        this.initialRender = true;\n        this.isRemove = false;\n        this.isInitialCollapse = false;\n        this.prevScrollTop = 0;\n        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n        this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n        this.rowTop = 0;\n        this.isInitialMovableRender = true;\n        this.virtualInfiniteData = {};\n        this.isCancel = false;\n        this.emptyRowData = {};\n        this.isNormaledit = false;\n        this.isInfiniteScroll = false;\n        this.isLastPage = false;\n        this.isInitialRender = true;\n        this.isFocusScroll = false;\n        this.isGroupCollapse = false;\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n        this.addEventListener();\n        this.widthService = serviceLocator.getService('widthService');\n        this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent)\n            : new RowModelGenerator(this.parent);\n    }\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.dataReady, this.onDataReady, this);\n        this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n        this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n        this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n        this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n        this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n        this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n        this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n        this.parent.on(events.setInfiniteCache, this.setCache, this);\n        this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n        this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n        this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n        this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n        this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n        this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n        this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n        this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n        this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);\n        this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n        this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n        this.parent.on(events.modelChanged, this.modelChanged, this);\n        this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n        this.parent.on(events.destroy, this.destroy, this);\n        this.parent.on(events.contentReady, this.selectNewRow, this);\n        this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n        this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n        this.actionBeginFunction = this.actionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.dataBoundFunction = this.dataBound.bind(this);\n        this.parent.on(events.deleteComplete, this.deleteComplate, this);\n        this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dataReady, this.onDataReady);\n        this.parent.off(events.dataSourceModified, this.dataSourceModified);\n        this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n        this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n        this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n        this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n        this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n        this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n        this.parent.off(events.setInfiniteCache, this.setCache);\n        this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n        this.parent.off(events.keyPressed, this.infiniteCellFocus);\n        this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n        this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n        this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n        this.parent.off(events.editReset, this.resetInfiniteEdit);\n        this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n        this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n        this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);\n        this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n        this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n        this.parent.off(events.modelChanged, this.modelChanged);\n        this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n        this.parent.off(events.destroy, this.destroy);\n        this.parent.off(events.contentReady, this.selectNewRow);\n        this.parent.off(events.captionActionComplete, this.captionActionComplete);\n        this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n        this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    InfiniteScroll.prototype.dataBound = function () {\n        if (this.groupCaptionAction === 'collapse') {\n            this.groupCaptionAction = 'refresh';\n            this.makeGroupCollapseRequest();\n        }\n        else if (this.groupCaptionAction === 'refresh') {\n            this.parent.hideSpinner();\n            this.groupCaptionAction = this.empty;\n        }\n    };\n    InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n            args.skipPage = true;\n            this.isGroupCollapse = false;\n            if (this.groupCaptionAction === 'collapse') {\n                var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n                var rowObjs = gObj.getRowsObject();\n                var childCount = 0;\n                for (var i = rowObjs.length - 1; i >= 0; i--) {\n                    if (rowObjs[i].indent === captionRow.indent) {\n                        break;\n                    }\n                    if (rowObjs[i].isDataRow) {\n                        childCount++;\n                    }\n                }\n                var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n                var pred = generateExpandPredicates(key.fields, key.keys, this);\n                var predicateList = getPredicates(pred);\n                pred = predicateList[predicateList.length - 1];\n                for (var i = predicateList.length - 2; i >= 0; i--) {\n                    pred = pred.and(predicateList[i]);\n                }\n                args.query.where(pred);\n                args.query.skip(childCount);\n                this.parentCapUid = this.empty;\n            }\n            else {\n                var rows = gObj.getRows();\n                var size = gObj.pageSettings.pageSize;\n                var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n                var additionalCnt = ((skip - (skip % size)) + size) - skip;\n                if ((skip % size) === 0) {\n                    additionalCnt = 0;\n                }\n                args.query.skip(skip);\n                args.query.take((gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize) + additionalCnt);\n            }\n        }\n    };\n    InfiniteScroll.prototype.captionActionComplete = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n            var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n            var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n            if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n                this.parentCapUid = args.parentUid;\n                this.groupCaptionAction = 'collapse';\n                gObj.showSpinner();\n                var caption = gObj.getRowObjectFromUID(args.parentUid);\n                var childCount = this.getCaptionChildCount(caption);\n                if (!childCount) {\n                    this.groupCaptionAction = 'refresh';\n                    this.makeGroupCollapseRequest();\n                }\n                else {\n                    this.makeGroupCollapseRequest(args.parentUid);\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n        var gObj = this.parent;\n        var rows = gObj.getRows();\n        var index = getRowIndexFromElement(rows[rows.length - 1]);\n        var prevPage = this.parent.pageSettings.currentPage;\n        this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n        if (this.parent.pageSettings.currentPage > this.maxPage) {\n            gObj.hideSpinner();\n            return;\n        }\n        var scrollArg = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: index + 1,\n            direction: 'down',\n            isCaptionCollapse: true,\n            parentUid: parentUid\n        };\n        this.isGroupCollapse = true;\n        this.parent.notify('model-changed', scrollArg);\n    };\n    InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n        var rowObj = this.parent.getRowsObject();\n        var index = rowObj.indexOf(caption);\n        var make = false;\n        for (var i = index; i < rowObj.length; i++) {\n            if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent)\n                && rowObj[i].data.key !== caption.data.key) {\n                break;\n            }\n            if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {\n                make = true;\n                break;\n            }\n        }\n        return make;\n    };\n    InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n        var childCount = 0;\n        for (var i = index + 1; i < rowObj.length; i++) {\n            if (rowObj[i].indent === row.indent) {\n                break;\n            }\n            if (rowObj[i].indent === (row.indent + 1) && rowObj[i].parentUid === row.uid) {\n                childCount++;\n            }\n        }\n        return row.data.count === childCount;\n    };\n    InfiniteScroll.prototype.updateCurrentViewData = function () {\n        var gObj = this.parent;\n        if (gObj.groupSettings.columns.length) {\n            return;\n        }\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        gObj.currentViewData = [];\n        var page = gObj.pageSettings.currentPage;\n        var isCache = gObj.infiniteScrollSettings.enableCache;\n        var blocks = gObj.infiniteScrollSettings.maxBlocks;\n        var isMiddlePage = isCache && (page > blocks || (this.isUpScroll && page > 1));\n        var start = isMiddlePage ? this.isUpScroll ? page : (page - blocks) + 1 : 1;\n        var end = isMiddlePage ? (start + blocks) - 1 : isCache ? blocks : keys.length;\n        for (var i = start; i <= end; i++) {\n            if (this.infiniteCurrentViewData[i]) {\n                gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n        var page = this.parent.pageSettings.currentPage;\n        var size = this.parent.pageSettings.pageSize;\n        var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var cache = this.parent.infiniteScrollSettings.enableCache;\n        if (!this.parent.groupSettings.columns.length) {\n            var isAdd = e.args.requestType === 'save';\n            var isDelete = e.args.requestType === 'delete';\n            if (!cache && (isAdd || isDelete)) {\n                if (isAdd) {\n                    this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n                }\n                else {\n                    this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n                }\n            }\n            else {\n                if (blocks > 1 && e.data.length === (blocks * size)) {\n                    this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n                }\n                else {\n                    this.infiniteCurrentViewData[page] = e.data.slice();\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.deleteComplate = function () {\n        if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n            this.parent.contentModule.refreshScrollOffset();\n        }\n    };\n    InfiniteScroll.prototype.modelChanged = function (args) {\n        var rows = this.parent.getRows();\n        if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n            this.firstIndex = getRowIndexFromElement(rows[0]);\n            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n            this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n            if (args.requestType === 'delete') {\n                var rowObj = this.parent.getRowsObject();\n                args.startIndex = this.parent.infiniteScrollSettings.enableCache\n                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n            }\n            else {\n                args.startIndex = this.firstIndex;\n            }\n            if (!this.parent.infiniteScrollSettings.enableCache\n                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n                this.isLastPage = true;\n                this.lastIndex = this.lastIndex - 1;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n        if (this.isNormaledit) {\n            this.isAdd = true;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                if (!Object.keys(this.emptyRowData).length) {\n                    this.createEmptyRowdata();\n                }\n                if (this.parent.pageSettings.currentPage > 1) {\n                    args.startEdit = false;\n                    this.resetInfiniteBlocks({}, true);\n                    this.makeRequest({ currentPage: 1 });\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'\n            || (args.e.requestType === 'save' && this.requestType === 'add'))) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var rowElms = this.parent.getRows();\n            var rows = this.parent.getRowsObject();\n            if (this.ensureRowAvailability(rows, args.result[0])) {\n                if (rowElms.length) {\n                    this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n                    if (frozenCols) {\n                        var rows_1 = this.parent.getMovableRowsObject();\n                        this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n                        if (this.parent.getFrozenMode() === literals.leftRight) {\n                            var frRows = this.parent.getFrozenRightRowsObject();\n                            this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n                        }\n                    }\n                }\n                if (!this.isLastPage) {\n                    this.createRow(rows, args);\n                }\n                else {\n                    this.isLastPage = false;\n                    this.parent.pageSettings.currentPage = this.maxPage;\n                    if (this.parent.selectionModule.index < this.parent.frozenRows) {\n                        remove(rowElms[this.parent.frozenRows - 1]);\n                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n                        if (frozenCols) {\n                            var movableRows = this.parent.getMovableDataRows();\n                            remove(movableRows[this.parent.frozenRows]);\n                            this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n                            if (this.parent.getFrozenMode() === literals.leftRight) {\n                                var rightRows = this.parent.getFrozenRightDataRows();\n                                remove(rightRows[this.parent.frozenRows]);\n                                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n                            }\n                        }\n                        setRowElements(this.parent);\n                    }\n                }\n            }\n            this.parent.hideSpinner();\n            this.parent.notify(events.refreshInfinitePersistSelection, {});\n            if (this.requestType === 'delete') {\n                this.parent.notify(events.deleteComplete, args.e);\n            }\n            else {\n                this.parent.notify(events.saveComplete, args.e);\n            }\n        }\n        this.parent.notify(events.freezeRender, { case: 'refreshHeight' });\n    };\n    InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n        var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        var tbody;\n        if (isFrozenRight) {\n            tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n        }\n        else {\n            tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable\n                ? this.parent.getMovableVirtualContent().querySelector(literals.tbody)\n                : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n        }\n        if (this.parent.frozenRows) {\n            tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'\n                ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody)\n                    : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody)\n                        : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody)\n                            : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n        }\n        var notifyArgs = {\n            rows: rows, cancel: false, args: args, isMovable: isMovable,\n            isFrozenRows: isFrozenRows, isFrozenRight: isFrozenRows, row: row\n        };\n        this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n        if (!notifyArgs.cancel) {\n            for (var i = row.length - 1; i >= 0; i--) {\n                if (this.requestType === 'delete') {\n                    tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n                }\n                else {\n                    tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n                }\n            }\n        }\n        if (!isFrozenRows && this.parent.frozenRows\n            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n            var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows()\n                : this.parent.getRows();\n            var index = (isMovable || isFrozenRight) && this.requestType === 'add'\n                ? this.parent.frozenRows : this.parent.frozenRows - 1;\n            remove(rowElems[index]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n        }\n        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n            if (isFrozenRight) {\n                setRowElements(this.parent);\n                this.parent.contentModule.rightFreezeRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n            }\n            else if (!this.parent.isFrozenGrid() || isMovable) {\n                setRowElements(this.parent);\n                this.parent.contentModule.visibleRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    args.e.renderMovableContent = true;\n                    this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n                }\n            }\n            else {\n                this.parent.contentModule.visibleFrozenRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                args.e.isFrozen = true;\n                this.createRow(this.parent.getMovableRowsObject(), args, true);\n            }\n        }\n    };\n    InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n        var resume = true;\n        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache\n            && this.parent.sortSettings.columns && this.requestType === 'add') {\n            var key = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < rows.length; i++) {\n                if (rows[i].data[key] === data[key]) {\n                    resume = false;\n                    break;\n                }\n            }\n        }\n        return resume;\n    };\n    InfiniteScroll.prototype.generateRows = function (data, args) {\n        return this.rowModelGenerator.generateRows(data, args);\n    };\n    InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n        var _this = this;\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n        if (isAdd) {\n            if (isRemove) {\n                if (isFrozen && !this.parent.groupSettings.columns.length) {\n                    this.swapCurrentViewData(1, true);\n                }\n                remove(rowElms[rows.length - 1]);\n                rowElms.splice(rows.length - 1, 1);\n                rows.splice(rows.length - 1, 1);\n            }\n        }\n        else {\n            rows.filter(function (e, index) {\n                if (e.data[keyField] === args.data[0][keyField]) {\n                    if (isFrozen && !_this.parent.groupSettings.columns.length) {\n                        var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n                        _this.resetInfiniteCurrentViewData(page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[index]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        }\n        var startIndex = isAdd ? 1 : 0;\n        resetRowIndex(this.parent, rows, rowElms, startIndex);\n    };\n    InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n        index = index - ((page - 1) * this.parent.pageSettings.pageSize);\n        this.infiniteCurrentViewData[page].splice(index, 1);\n        this.swapCurrentViewData(page, false);\n    };\n    InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var end = isAdd ? keys.length + 1 : keys.length;\n        for (var i = page; i < end; i++) {\n            if (this.infiniteCurrentViewData[i + 1]) {\n                var pageIndex = isAdd ? i : i + 1;\n                var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n                var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n                if (isAdd) {\n                    this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n                    if ((i + 1) === end - 1) {\n                        this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n                    }\n                }\n                else {\n                    this.infiniteCurrentViewData[i].push(data[0]);\n                }\n            }\n        }\n        this.updateCurrentViewData();\n    };\n    InfiniteScroll.prototype.setDisplayNone = function (args) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n            for (var i = 1; i <= keys.length; i++) {\n                var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0]\n                    : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n                cache.filter(function (e) {\n                    e.cells[args.index].visible = args.visible === '';\n                });\n            }\n            this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCache = function (args) {\n        this.getEditedRowObject().data = args.data;\n    };\n    InfiniteScroll.prototype.refreshInfiniteEditrowindex = function (args) {\n        this.editRowIndex = args.index;\n    };\n    InfiniteScroll.prototype.getEditedRowObject = function () {\n        var rowObjects = this.parent.getRowsObject();\n        var editedrow;\n        for (var i = 0; i < rowObjects.length; i++) {\n            if (rowObjects[i].index === this.editRowIndex) {\n                editedrow = rowObjects[i];\n            }\n        }\n        return editedrow;\n    };\n    InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n        if (this.isNormaledit) {\n            if (!this.isAdd && args.data) {\n                this.updateCurrentViewRecords(args.data);\n            }\n            this.isAdd = false;\n        }\n    };\n    InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n        var index = getEditedDataIndex(this.parent, data);\n        if (!isNullOrUndefined(index)) {\n            this.parent.getCurrentViewRecords()[index] = data;\n        }\n    };\n    InfiniteScroll.prototype.actionBegin = function (args) {\n        if (args.requestType === 'add' || args.requestType === 'delete') {\n            this.requestType = args.requestType;\n        }\n        else if (args.action === 'add' && args.requestType === 'save') {\n            this.requestType = args.action;\n        }\n        if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching'\n            || args.requestType === 'sorting' || args.requestType === 'filtering') {\n            this.isInitialRender = true;\n        }\n    };\n    InfiniteScroll.prototype.actionComplete = function (args) {\n        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n            this.requestType = this.empty;\n            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n            this.isAdd = this.isEdit = false;\n            if (this.isNormaledit) {\n                this.editRowIndex = this.empty;\n                this.virtualInfiniteData = {};\n                this.parent.editModule.previousVirtualData = {};\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteEdit = function () {\n        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {\n                this.parent.isEdit = true;\n            }\n        }\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n        data.virtualData = this.virtualInfiniteData;\n        data.isAdd = this.isAdd;\n        data.isCancel = this.isCancel;\n    };\n    InfiniteScroll.prototype.editActionBegin = function (e) {\n        this.isEdit = true;\n        this.editRowIndex = e.index;\n        var rowObject = extend({}, this.getEditedRowObject().data);\n        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n    };\n    InfiniteScroll.prototype.dataSourceModified = function () {\n        this.resetInfiniteBlocks({ requestType: this.empty }, true);\n    };\n    InfiniteScroll.prototype.onDataReady = function (e) {\n        if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n        }\n    };\n    InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n        this.isInitialCollapse = !isExpand;\n    };\n    InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n        this.restoreInfiniteEdit();\n        this.restoreInfiniteAdd();\n        var targetEle = e.target;\n        var isInfinite = targetEle.classList.contains(literals.content);\n        if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n            var scrollEle = this.parent.getContent().firstElementChild;\n            this.prevScrollTop = scrollEle.scrollTop;\n            var rows = this.parent.getRows();\n            if (!rows.length) {\n                return;\n            }\n            var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n            var prevPage = this.parent.pageSettings.currentPage;\n            var args = void 0;\n            var offset = targetEle.scrollHeight - targetEle.scrollTop;\n            var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n            var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n            if (floor > targetEle.clientHeight) {\n                floor = floor - 1;\n            }\n            var isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);\n            if (!isNullOrUndefined(this.groupCaptionAction)) {\n                return;\n            }\n            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isUpScroll = false;\n                    this.isDownScroll = true;\n                }\n                var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n                var row = rows_2[rows_2.length - 1];\n                var rowIndex = getRowIndexFromElement(row);\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n                args = {\n                    requestType: 'infiniteScroll',\n                    currentPage: this.parent.pageSettings.currentPage,\n                    prevPage: prevPage,\n                    startIndex: index,\n                    direction: 'down'\n                };\n                this.makeRequest(args);\n            }\n            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0\n                && this.parent.pageSettings.currentPage !== 1) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isDownScroll = false;\n                    this.isUpScroll = true;\n                }\n                var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n                var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n                var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n                if (this.parent.pageSettings.currentPage) {\n                    args = {\n                        requestType: 'infiniteScroll',\n                        currentPage: this.parent.pageSettings.currentPage,\n                        prevPage: prevPage,\n                        startIndex: startIndex,\n                        direction: 'up'\n                    };\n                    this.makeRequest(args);\n                }\n            }\n            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n                if (this.isDownScroll || this.isUpScroll) {\n                    scrollEle.scrollTop = this.top;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeRequest = function (args) {\n        var _this = this;\n        if (this.parent.pageSettings.currentPage !== args.prevPage) {\n            var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n            if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {\n                this.isInfiniteScroll = true;\n                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify('model-changed', args);\n                    }, 100);\n                }\n                else {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n                    }, 100);\n                }\n            }\n            else {\n                this.parent.pageSettings.currentPage = this.maxPage;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infinitePageQuery = function (query) {\n        if (this.initialRender) {\n            this.initialRender = false;\n            this.intialPageQuery(query);\n        }\n        else {\n            if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n                this.editPageQuery(query);\n            }\n            else {\n                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n            }\n        }\n    };\n    InfiniteScroll.prototype.editPageQuery = function (query) {\n        var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var isCache = this.parent.infiniteScrollSettings.enableCache;\n        if (isCache) {\n            this.infiniteCache = {};\n            this.infiniteFrozenCache = {};\n            this.infiniteCurrentViewData = {};\n            query.skip(this.firstIndex);\n            query.take(initialBlocks * this.parent.pageSettings.pageSize);\n        }\n        else {\n            if (this.parent.editSettings.mode === 'Dialog') {\n                this.parent.clearSelection();\n            }\n            var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n            query.skip(index);\n            query.take(1);\n        }\n    };\n    InfiniteScroll.prototype.intialPageQuery = function (query) {\n        if (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n        }\n        var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n        query.page(1, pageSize);\n    };\n    InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n        var gObj = this.parent;\n        var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n        var cellIdx = this.lastFocusInfo.cellIdx;\n        var row = gObj.getRowByIndex(rowIdx);\n        var content = gObj.getContent().firstElementChild;\n        if (!row) {\n            var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n            var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n            gObj.pageSettings.currentPage = page;\n            var cols = gObj.getColumns();\n            remove(gObj.getContent().querySelector('tbody'));\n            gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody'));\n            var focusRows = [];\n            for (var i = (page === 1 || this.maxPage === page) ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n                var rows = this.infiniteCache[page + i];\n                if (rows) {\n                    focusRows = focusRows.concat(rows);\n                    for (var j = 0; j < rows.length; j++) {\n                        gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));\n                    }\n                }\n            }\n            gObj.notify(events.contentReady, { rows: focusRows, args: {} });\n            setRowElements(gObj);\n        }\n        row = gObj.getRowByIndex(rowIdx);\n        var target = row.cells[cellIdx];\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({ target: target }, true);\n        gObj.selectRow(rowIdx);\n        target.focus();\n        this.isFocusScroll = false;\n        e.cancel = true;\n    };\n    InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n        var cell = ((e.byClick && e.clickArgs.target) || (e.byKey && e.keyArgs.target)\n            || (!this.isFocusScroll && e).target);\n        if (cell && cell.classList.contains('e-rowcell')) {\n            var cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);\n            var rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));\n            this.lastFocusInfo = { rowIdx: rowIdx, cellIdx: cellIdx };\n        }\n    };\n    InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n        var gObj = this.parent;\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (e.byKey) {\n            if (cache && this.isFocusScroll) {\n                this.scrollToLastFocusedCell(e);\n                return;\n            }\n            var cell = document.activeElement;\n            var rowIndex = getRowIndexFromElement(cell.parentElement);\n            this.cellIndex = parseInt(cell.getAttribute(literals.ariaColIndex), 10);\n            var content = gObj.getContent().firstElementChild;\n            var totalRowsCount = (this.maxPage * gObj.pageSettings.pageSize) - 1;\n            var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n            var contentRect = content.getBoundingClientRect();\n            if (!isNaN(rowIndex)) {\n                if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n                    this.rowIndex = rowIndex += 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex + 1;\n                    }\n                    if (this.isFocusScroll || (!row && rowIndex < totalRowsCount)\n                        || (rowRect && rowRect.bottom >= contentRect.bottom)) {\n                        if (!this.isFocusScroll) {\n                            this.pressedKey = e.keyArgs.action;\n                        }\n                        this.isFocusScroll = false;\n                        content.scrollTop = ((rowIndex - visibleRowCount) + 1) * this.parent.getRowHeight();\n                    }\n                    else if (!cache && row) {\n                        if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n                            row.cells[this.cellIndex].scrollIntoView();\n                        }\n                    }\n                }\n                else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n                    this.rowIndex = rowIndex -= 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex - 1;\n                    }\n                    if (!row || rowRect.top <= contentRect.top) {\n                        this.pressedKey = e.keyArgs.action;\n                        content.scrollTop = rowIndex * this.parent.getRowHeight();\n                    }\n                }\n            }\n        }\n        else if (e.key === 'PageDown' || e.key === 'PageUp') {\n            this.pressedKey = e.key;\n        }\n        this.setLastCellFocusInfo(e);\n    };\n    InfiniteScroll.prototype.createEmptyRowdata = function () {\n        var _this = this;\n        this.parent.getColumns().filter(function (e) {\n            _this.emptyRowData[e.field] = _this.empty;\n        });\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n        var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n        var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n        var gridForm = this.parent.element.querySelector('.e-gridform');\n        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n            var rowData = editForm ? extend({}, this.getEditedRowObject().data)\n                : extend({}, this.emptyRowData);\n            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n            if (this.parent.isFrozenGrid()) {\n                this.virtualInfiniteData = this.parent.editModule\n                    .getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n        var content = this.parent.getContent().firstElementChild;\n        var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n                var row = this.parent.getRowByIndex(this.editRowIndex);\n                if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n                    var top_1 = row.getBoundingClientRect().top;\n                    if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n                        this.parent.isEdit = false;\n                        this.parent.editModule.startEdit(row);\n                    }\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n        var content = this.parent.getContent().firstElementChild;\n        if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit &&\n            this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n            var isTop = content.scrollTop < this.parent.getRowHeight();\n            if (isTop) {\n                this.parent.isEdit = false;\n                this.parent.addRecord();\n            }\n        }\n    };\n    InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var scrollEle = this.parent.getContent().firstElementChild;\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n        if ((isInfiniteScroll && !e.args.isFrozen && !isMovable) || !isInfiniteScroll) {\n            if (isInfiniteScroll && e.args.direction === 'up') {\n                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n            }\n            else {\n                e.tbody.appendChild(e.frag);\n            }\n        }\n        if (!frozenCols) {\n            this.parent.contentModule.getTable().appendChild(e.tbody);\n            this.updateCurrentViewData();\n        }\n        else {\n            if (isInfiniteScroll) {\n                if (e.tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight)) {\n                    this.frozenFrag = e.frag;\n                }\n                else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n                    this.movableFrag = e.frag;\n                }\n                else {\n                    var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n                    if (e.args.direction === 'up') {\n                        tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n                    }\n                    else {\n                        tbody.appendChild(this.frozenFrag);\n                    }\n                    if (e.tableName === literals.frozenRight) {\n                        this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n                        this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n                    }\n                    else {\n                        this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n                    }\n                    this.parent.contentModule.refreshScrollOffset();\n                    this.updateCurrentViewData();\n                }\n            }\n            else {\n                var table = void 0;\n                if (e.tableName === literals.frozenLeft) {\n                    table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n                }\n                else if (e.tableName === 'movable') {\n                    table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() !== literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                else {\n                    table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() === literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                table.appendChild(e.tbody);\n                this.widthService.refreshFrozenScrollbar();\n            }\n        }\n        if (this.isInitialRender && !e.args.isFrozen) {\n            this.isInitialRender = false;\n            this.parent.scrollModule.setHeight();\n        }\n        if (!e.args.isFrozen) {\n            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n            if (isInfiniteScroll) {\n                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n                    scrollEle.scrollTop = this.top;\n                }\n                setRowElements(this.parent);\n            }\n            this.restoreInfiniteAdd();\n            this.isScroll = true;\n        }\n        this.isInfiniteScroll = false;\n    };\n    InfiniteScroll.prototype.selectNewRow = function (args) {\n        var _this = this;\n        var gObj = this.parent;\n        var row = gObj.getRowByIndex(this.rowIndex);\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (row && this.keys.some(function (value) { return value === _this.pressedKey; })) {\n            var content = gObj.getContent().firstElementChild;\n            var rowHeight = gObj.getRowHeight();\n            var target = row.cells[this.cellIndex];\n            if ((this.pressedKey === literals.downArrow || this.pressedKey === literals.enter)\n                || (cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter))) {\n                if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n                    content.scrollTop = content.scrollTop + rowHeight;\n                }\n                gObj.focusModule.isInfiniteScroll = true;\n                gObj.focusModule.onClick({ target: target }, true);\n                gObj.selectRow(this.rowIndex);\n            }\n        }\n        else if (this.lastFocusInfo || this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp) {\n            var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n            if (gObj.getRowByIndex(idx)) {\n                var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n                if (target) {\n                    this.isFocusScroll = true;\n                    if (!cache) {\n                        gObj.focusModule.isInfiniteScroll = true;\n                        gObj.focusModule.onClick({ target: target }, true);\n                    }\n                    else {\n                        target.focus({ preventScroll: true });\n                    }\n                }\n            }\n        }\n        this.pressedKey = undefined;\n    };\n    InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n            var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n            if (e.args.direction === 'down') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n            }\n            if (e.args.direction === 'up') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                else {\n                    this.removeBottomRows(rows, rows.length - 1, e.args);\n                }\n            }\n            this.isScroll = false;\n            this.top = this.calculateScrollTop(e.args);\n        }\n    };\n    InfiniteScroll.prototype.calculateScrollTop = function (args) {\n        var top = 0;\n        var scrollCnt = this.parent.getContent().firstElementChild;\n        if (args.direction === 'down') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.captionRowHeight();\n            }\n            var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n            var captionCount = 0;\n            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n            }\n            var value = captionCount ? captionCount\n                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n            var currentViewRowCount = 0;\n            var i = 0;\n            while (currentViewRowCount < scrollCnt.clientHeight) {\n                i++;\n                currentViewRowCount = i * this.parent.getRowHeight();\n            }\n            i = i - 1;\n            top += (value - i) * this.parent.getRowHeight();\n        }\n        if (args.direction === 'up') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n            }\n            else if (this.isInitialCollapse) {\n                var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n                var count = 0;\n                for (var i = 0; i < groupedData.length; i++) {\n                    if (groupedData[i].isCaptionRow) {\n                        count++;\n                    }\n                }\n                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n            }\n            else {\n                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());\n            }\n        }\n        return top;\n    };\n    InfiniteScroll.prototype.captionRowHeight = function () {\n        var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n        return rows.length * this.parent.getRowHeight();\n    };\n    InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n        var frozeCols = this.parent.isFrozenGrid();\n        var frRows = this.parent.getFrozenMode() === literals.leftRight\n            ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        for (var i = 0; i <= maxIndx; i++) {\n            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1\n                && i > (maxIndx - this.parent.frozenRows)) {\n                continue;\n            }\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n        var cnt = 0;\n        var frozeCols = this.parent.isFrozenGrid();\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        var frRows = this.parent.getFrozenMode() === literals.leftRight ?\n            [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var pageSize = this.parent.pageSettings.pageSize;\n        if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n        }\n        if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n        }\n        for (var i = maxIndx; cnt < pageSize; i--) {\n            cnt++;\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n        var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n        if (args.direction === 'down') {\n            var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n            var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n            var k = 0;\n            for (var i = 0; k < lastRowIndex; i++) {\n                if (!rows[i].classList.contains(literals.row)) {\n                    remove(rows[i]);\n                }\n                else {\n                    k = getRowIndexFromElement(rows[i]);\n                }\n            }\n        }\n        if (args.direction === 'up') {\n            var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n            var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n            var startIndex = 0;\n            for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n                startIndex += this.infiniteCache[i].length;\n            }\n            for (var i = startIndex; i < rows.length; i++) {\n                remove(rows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n            if (this.actions.some(function (value) { return value === args.requestType; }) || isDataModified) {\n                var scrollEle = this.parent.getContent().firstElementChild;\n                this.initialRender = true;\n                scrollEle.scrollTop = 0;\n                this.parent.pageSettings.currentPage = 1;\n                this.infiniteCache = this.infiniteFrozenCache = {};\n                this.infiniteCurrentViewData = {};\n                this.resetContentModuleCache({});\n                this.isRemove = false;\n                this.top = 0;\n                this.isInitialMovableRender = true;\n                this.isInitialCollapse = false;\n                this.parent.contentModule.isRemove = this.isRemove;\n                this.parent.contentModule.isAddRows = this.isRemove;\n                this.parent.contentModule.visibleRows = [];\n                this.parent.contentModule.visibleFrozenRows = [];\n            }\n        }\n    };\n    InfiniteScroll.prototype.setCache = function (e) {\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var frozeCols = this.parent.isFrozenGrid();\n            var idx = e.args.isFrozen ? 1 : 0;\n            var isEdit = e.args.requestType !== 'infiniteScroll'\n                && (this.requestType === 'delete' || this.requestType === 'add');\n            var currentPage = this.parent.pageSettings.currentPage;\n            if ((frozeCols && this.isInitialMovableRender) || (!frozeCols && !Object.keys(this.infiniteCache).length) || isEdit) {\n                this.isInitialMovableRender = !e.args.isFrozen;\n                this.setInitialCache(e.modelData, e.args, isEdit);\n            }\n            if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n                this.resetContentModuleCache(this.infiniteCache);\n            }\n            if (frozeCols) {\n                if ((idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]))\n                    || !this.infiniteFrozenCache[currentPage][idx].length) {\n                    this.createFrozenCache(currentPage);\n                    this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n                    if (idx === 1) {\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                }\n            }\n            if (e.isInfiniteScroll && !this.isRemove) {\n                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n                this.parent.contentModule.isRemove = this.isRemove;\n            }\n        }\n    };\n    InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var idx = args.isFrozen ? 1 : 0;\n        var k = !isEdit ? 1 : this.firstBlock;\n        for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n            var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n            var endIndex = i * this.parent.pageSettings.pageSize;\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n                this.setInitialGroupCache(data, k, startIndex, endIndex);\n            }\n            else {\n                if (isCurrentViewData) {\n                    this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n                }\n                else {\n                    if (frozenCols) {\n                        this.createFrozenCache(k);\n                        this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                    else {\n                        this.infiniteCache[k] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteCache);\n                    }\n                }\n            }\n            k++;\n        }\n    };\n    InfiniteScroll.prototype.createFrozenCache = function (index) {\n        if (!this.infiniteFrozenCache[index]) {\n            this.infiniteFrozenCache[index] = [[], []];\n        }\n    };\n    InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n        var pageData = [];\n        var startIndex = 0;\n        for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n            startIndex += this.infiniteCache[i].length;\n        }\n        var k = sIndex;\n        for (var i = startIndex; i < data.length && k < eIndex; i++) {\n            if (data[i].index < eIndex || data[i].isCaptionRow) {\n                k = data[i].isCaptionRow ? k : data[i].index;\n                pageData.push(data[i]);\n            }\n            if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n                break;\n            }\n        }\n        this.infiniteCache[index] = pageData;\n        this.resetContentModuleCache(this.infiniteCache);\n    };\n    InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n        this.parent.contentModule\n            .infiniteCache = data;\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}