{"ast":null,"code":"import { Browser, remove, EventHandler, isUndefined, closest, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport * as literals from '../base/string-literals';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n */\nvar Clipboard = /** @class */function () {\n  /**\n   * Constructor for the Grid clipboard module\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @hidden\n   */\n  function Clipboard(parent) {\n    this.copyContent = '';\n    this.isSelect = false;\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  Clipboard.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.on(events.contentReady, this.initialEnd, this);\n    this.parent.on(events.keyPressed, this.keyDownHandler, this);\n    this.parent.on(events.click, this.clickHandler, this);\n    EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n  Clipboard.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off(events.keyPressed, this.keyDownHandler);\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.parent.off(events.click, this.clickHandler);\n    EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);\n  };\n  Clipboard.prototype.clickHandler = function (e) {\n    var target = e.target;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    target = parentsUntil(target, 'e-rowcell');\n  };\n  Clipboard.prototype.pasteHandler = function (e) {\n    var _this = this;\n    var grid = this.parent;\n    var isMacLike = /(Mac)/i.test(navigator.platform);\n    if (e.keyCode === 67 && isMacLike && e.metaKey && !grid.isEdit) {\n      this.copy();\n    }\n    if (e.keyCode === 86 && (e.ctrlKey || isMacLike && e.metaKey) && !grid.isEdit) {\n      var target = closest(document.activeElement, '.' + literals.rowCell);\n      if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' || grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n        return;\n      }\n      this.activeElement = document.activeElement;\n      this.clipBoardTextArea.value = '';\n      var x_1 = window.scrollX;\n      var y_1 = window.scrollY;\n      this.clipBoardTextArea.focus();\n      setTimeout(function () {\n        _this.activeElement.focus();\n        window.scrollTo(x_1, y_1);\n        _this.paste(_this.clipBoardTextArea.value, _this.parent.getSelectedRowCellIndexes()[0].rowIndex, _this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);\n      }, 10);\n    }\n  };\n  /**\n   * Paste data from clipboard to selected cells.\n   *\n   * @param {boolean} data - Specifies the date for paste.\n   * @param {boolean} rowIndex - Specifies the row index.\n   * @param {boolean} colIndex - Specifies the column index.\n   * @returns {void}\n   */\n  Clipboard.prototype.paste = function (data, rowIndex, colIndex) {\n    var grid = this.parent;\n    var cIdx = colIndex;\n    var rIdx = rowIndex;\n    var col;\n    var value;\n    var isAvail;\n    if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' || grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n      return;\n    }\n    var rows = data.split('\\n');\n    var cols;\n    var dataRows = grid.getDataRows();\n    var mRows;\n    var frRows;\n    var isFrozen = this.parent.isFrozenGrid();\n    if (isFrozen) {\n      mRows = grid.getMovableDataRows();\n      if (grid.getFrozenRightColumnsCount()) {\n        frRows = grid.getFrozenRightDataRows();\n      }\n    }\n    for (var r = 0; r < rows.length; r++) {\n      cols = rows[r].split('\\t');\n      cIdx = colIndex;\n      if (r === rows.length - 1 && rows[r] === '' || isUndefined(grid.getRowByIndex(rIdx))) {\n        cIdx++;\n        break;\n      }\n      for (var c = 0; c < cols.length; c++) {\n        isAvail = grid.getCellFromIndex(rIdx, cIdx);\n        if (isFrozen) {\n          var fTr = dataRows[rIdx];\n          var mTr = mRows[rIdx];\n          isAvail = !fTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') ? mTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') : true;\n          if (frRows && !isAvail) {\n            var frTr = frRows[rIdx];\n            isAvail = frTr.querySelector('[aria-colindex=\"' + cIdx + '\"]');\n          }\n        }\n        if (!isAvail) {\n          cIdx++;\n          break;\n        }\n        col = grid.getColumnByIndex(cIdx);\n        value = col.getParser() ? col.getParser()(cols[c]) : cols[c];\n        if (col.allowEditing && !col.isPrimaryKey && !col.template) {\n          var args = {\n            column: col,\n            data: value,\n            rowIndex: rIdx\n          };\n          this.parent.trigger(events.beforePaste, args);\n          rIdx = args.rowIndex;\n          if (!args.cancel) {\n            if (grid.editModule) {\n              if (col.type === 'number') {\n                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));\n              } else {\n                grid.editModule.updateCell(rIdx, col.field, args.data);\n              }\n            }\n          }\n        }\n        cIdx++;\n      }\n      rIdx++;\n    }\n    grid.selectionModule.selectCellsByRange({\n      rowIndex: rowIndex,\n      cellIndex: colIndex\n    }, {\n      rowIndex: rIdx - 1,\n      cellIndex: cIdx - 1\n    });\n    var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);\n    if (cell) {\n      classList(cell, ['e-focus', 'e-focused'], []);\n    }\n  };\n  Clipboard.prototype.initialEnd = function () {\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.clipBoardTextArea = this.parent.createElement('textarea', {\n      className: 'e-clipboard',\n      styles: 'opacity: 0',\n      attrs: {\n        tabindex: '-1',\n        'aria-label': 'clipboard'\n      }\n    });\n    this.parent.element.appendChild(this.clipBoardTextArea);\n  };\n  Clipboard.prototype.keyDownHandler = function (e) {\n    if (e.action === 'ctrlPlusC') {\n      this.copy();\n    } else if (e.action === 'ctrlShiftPlusH') {\n      this.copy(true);\n    }\n  };\n  Clipboard.prototype.setCopyData = function (withHeader) {\n    if (window.getSelection().toString() === '') {\n      var isFrozen = this.parent.isFrozenGrid();\n      this.clipBoardTextArea.value = this.copyContent = '';\n      var mRows = void 0;\n      var frRows = void 0;\n      var rows = this.parent.getRows();\n      if (isFrozen) {\n        mRows = this.parent.getMovableDataRows();\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          frRows = this.parent.getFrozenRightRows();\n        }\n      }\n      if (this.parent.selectionSettings.mode !== 'Cell') {\n        var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) {\n          return a - b;\n        });\n        if (withHeader) {\n          var headerTextArray = [];\n          for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {\n            headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;\n          }\n          this.getCopyData(headerTextArray, false, '\\t', withHeader);\n          this.copyContent += '\\n';\n        }\n        for (var i = 0; i < selectedIndexes.length; i++) {\n          if (i > 0) {\n            this.copyContent += '\\n';\n          }\n          var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)'));\n          if (isFrozen) {\n            cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n            if (frRows) {\n              cells.push.apply(cells, [].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n            }\n          }\n          this.getCopyData(cells, false, '\\t', withHeader);\n        }\n      } else {\n        var obj = this.checkBoxSelection();\n        if (obj.status) {\n          if (withHeader) {\n            var headers = [];\n            for (var i = 0; i < obj.colIndexes.length; i++) {\n              headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));\n            }\n            this.getCopyData(headers, false, '\\t', withHeader);\n            this.copyContent += '\\n';\n          }\n          for (var i = 0; i < obj.rowIndexes.length; i++) {\n            if (i > 0) {\n              this.copyContent += '\\n';\n            }\n            var cells = [].slice.call(rows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground'));\n            if (isFrozen) {\n              cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground')));\n              if (frRows) {\n                cells.push.apply(cells, [].slice.call(frRows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground')));\n              }\n            }\n            this.getCopyData(cells, false, '\\t', withHeader);\n          }\n        } else {\n          this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\\n', withHeader);\n        }\n      }\n      var args = {\n        data: this.copyContent,\n        cancel: false\n      };\n      this.parent.trigger(events.beforeCopy, args);\n      if (args.cancel) {\n        return;\n      }\n      this.clipBoardTextArea.value = this.copyContent = args.data;\n      if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n        this.clipBoardTextArea.select();\n      } else {\n        this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n      }\n      this.isSelect = true;\n    }\n  };\n  Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {\n    var isElement = typeof cells[0] !== 'string';\n    for (var j = 0; j < cells.length; j++) {\n      if (withHeader && isCell) {\n        var colIdx = parseInt(cells[j].getAttribute(literals.ariaColIndex), 10);\n        this.copyContent += this.parent.getColumns()[colIdx].headerText + '\\n';\n      }\n      if (isElement) {\n        if (!cells[j].classList.contains('e-hide')) {\n          this.copyContent += cells[j].innerText;\n        }\n      } else {\n        this.copyContent += cells[j];\n      }\n      if (j < cells.length - 1) {\n        this.copyContent += splitKey;\n      }\n    }\n  };\n  /**\n   * Copy selected rows or cells data into clipboard.\n   *\n   * @returns {void}\n   * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.\n   */\n  Clipboard.prototype.copy = function (withHeader) {\n    if (document.queryCommandSupported('copy')) {\n      this.setCopyData(withHeader);\n      document.execCommand('copy');\n      this.clipBoardTextArea.blur();\n    }\n    if (this.isSelect) {\n      window.getSelection().removeAllRanges();\n      this.isSelect = false;\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} returns the module name\n   * @private\n   */\n  Clipboard.prototype.getModuleName = function () {\n    return 'clipboard';\n  };\n  /**\n   * To destroy the clipboard\n   *\n   * @returns {void}\n   * @hidden\n   */\n  Clipboard.prototype.destroy = function () {\n    this.removeEventListener();\n    if (this.clipBoardTextArea) {\n      remove(this.clipBoardTextArea);\n    }\n  };\n  Clipboard.prototype.checkBoxSelection = function () {\n    var gridObj = this.parent;\n    var obj = {\n      status: false\n    };\n    if (gridObj.selectionSettings.mode === 'Cell') {\n      var rowCellIndxes = gridObj.getSelectedRowCellIndexes();\n      var str = void 0;\n      var rowIndexes = [];\n      var i = void 0;\n      for (i = 0; i < rowCellIndxes.length; i++) {\n        if (rowCellIndxes[i].cellIndexes.length) {\n          rowIndexes.push(rowCellIndxes[i].rowIndex);\n        }\n        if (rowCellIndxes[i].cellIndexes.length) {\n          if (!str) {\n            str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());\n          }\n          if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {\n            break;\n          }\n        }\n      }\n      rowIndexes.sort(function (a, b) {\n        return a - b;\n      });\n      if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {\n        obj = {\n          status: true,\n          rowIndexes: rowIndexes,\n          colIndexes: rowCellIndxes[0].cellIndexes\n        };\n      }\n    }\n    return obj;\n  };\n  return Clipboard;\n}();\nexport { Clipboard };","map":{"version":3,"names":["Browser","remove","EventHandler","isUndefined","closest","classList","parentsUntil","events","literals","Clipboard","parent","copyContent","isSelect","addEventListener","prototype","isDestroyed","on","contentReady","initialEnd","keyPressed","keyDownHandler","click","clickHandler","add","element","pasteHandler","removeEventListener","off","e","target","_this","grid","isMacLike","test","navigator","platform","keyCode","metaKey","isEdit","copy","ctrlKey","document","activeElement","rowCell","editSettings","allowEditing","mode","selectionSettings","cellSelectionMode","clipBoardTextArea","value","x_1","window","scrollX","y_1","scrollY","focus","setTimeout","scrollTo","paste","getSelectedRowCellIndexes","rowIndex","cellIndexes","data","colIndex","cIdx","rIdx","col","isAvail","rows","split","cols","dataRows","getDataRows","mRows","frRows","isFrozen","isFrozenGrid","getMovableDataRows","getFrozenRightColumnsCount","getFrozenRightDataRows","r","length","getRowByIndex","c","getCellFromIndex","fTr","mTr","querySelector","frTr","getColumnByIndex","getParser","isPrimaryKey","template","args","column","trigger","beforePaste","cancel","editModule","type","updateCell","field","parseFloat","selectionModule","selectCellsByRange","cellIndex","cell","createElement","className","styles","attrs","tabindex","appendChild","action","setCopyData","withHeader","getSelection","toString","getRows","getFrozenMode","leftRight","getFrozenRightRows","selectedIndexes","getSelectedRowIndexes","sort","a","b","headerTextArray","i","getVisibleColumns","headerText","getCopyData","cells","slice","call","querySelectorAll","push","apply","obj","checkBoxSelection","status","headers","colIndexes","getColumnHeaderByIndex","rowIndexes","getElementsByClassName","beforeCopy","userAgent","match","select","setSelectionRange","isCell","splitKey","isElement","j","colIdx","parseInt","getAttribute","ariaColIndex","getColumns","contains","innerText","queryCommandSupported","execCommand","blur","removeAllRanges","getModuleName","destroy","gridObj","rowCellIndxes","str","JSON","stringify"],"sources":["C:/Users/Josh/Desktop/School-work/admin_dash/Admin_Dashboard/node_modules/@syncfusion/ej2-grids/src/grid/actions/clipboard.js"],"sourcesContent":["import { Browser, remove, EventHandler, isUndefined, closest, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport * as literals from '../base/string-literals';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n */\nvar Clipboard = /** @class */ (function () {\n    /**\n     * Constructor for the Grid clipboard module\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @hidden\n     */\n    function Clipboard(parent) {\n        this.copyContent = '';\n        this.isSelect = false;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.contentReady, this.initialEnd, this);\n        this.parent.on(events.keyPressed, this.keyDownHandler, this);\n        this.parent.on(events.click, this.clickHandler, this);\n        EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.keyPressed, this.keyDownHandler);\n        this.parent.off(events.contentReady, this.initialEnd);\n        this.parent.off(events.click, this.clickHandler);\n        EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);\n    };\n    Clipboard.prototype.clickHandler = function (e) {\n        var target = e.target;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        target = parentsUntil(target, 'e-rowcell');\n    };\n    Clipboard.prototype.pasteHandler = function (e) {\n        var _this = this;\n        var grid = this.parent;\n        var isMacLike = /(Mac)/i.test(navigator.platform);\n        if (e.keyCode === 67 && isMacLike && e.metaKey && !grid.isEdit) {\n            this.copy();\n        }\n        if (e.keyCode === 86 && (e.ctrlKey || (isMacLike && e.metaKey)) && !grid.isEdit) {\n            var target = closest(document.activeElement, '.' + literals.rowCell);\n            if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||\n                grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n                return;\n            }\n            this.activeElement = document.activeElement;\n            this.clipBoardTextArea.value = '';\n            var x_1 = window.scrollX;\n            var y_1 = window.scrollY;\n            this.clipBoardTextArea.focus();\n            setTimeout(function () {\n                _this.activeElement.focus();\n                window.scrollTo(x_1, y_1);\n                _this.paste(_this.clipBoardTextArea.value, _this.parent.getSelectedRowCellIndexes()[0].rowIndex, _this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);\n            }, 10);\n        }\n    };\n    /**\n     * Paste data from clipboard to selected cells.\n     *\n     * @param {boolean} data - Specifies the date for paste.\n     * @param {boolean} rowIndex - Specifies the row index.\n     * @param {boolean} colIndex - Specifies the column index.\n     * @returns {void}\n     */\n    Clipboard.prototype.paste = function (data, rowIndex, colIndex) {\n        var grid = this.parent;\n        var cIdx = colIndex;\n        var rIdx = rowIndex;\n        var col;\n        var value;\n        var isAvail;\n        if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||\n            grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n            return;\n        }\n        var rows = data.split('\\n');\n        var cols;\n        var dataRows = grid.getDataRows();\n        var mRows;\n        var frRows;\n        var isFrozen = this.parent.isFrozenGrid();\n        if (isFrozen) {\n            mRows = grid.getMovableDataRows();\n            if (grid.getFrozenRightColumnsCount()) {\n                frRows = grid.getFrozenRightDataRows();\n            }\n        }\n        for (var r = 0; r < rows.length; r++) {\n            cols = rows[r].split('\\t');\n            cIdx = colIndex;\n            if ((r === rows.length - 1 && rows[r] === '') || isUndefined(grid.getRowByIndex(rIdx))) {\n                cIdx++;\n                break;\n            }\n            for (var c = 0; c < cols.length; c++) {\n                isAvail = grid.getCellFromIndex(rIdx, cIdx);\n                if (isFrozen) {\n                    var fTr = dataRows[rIdx];\n                    var mTr = mRows[rIdx];\n                    isAvail = !fTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') ?\n                        mTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') : true;\n                    if (frRows && !isAvail) {\n                        var frTr = frRows[rIdx];\n                        isAvail = frTr.querySelector('[aria-colindex=\"' + cIdx + '\"]');\n                    }\n                }\n                if (!isAvail) {\n                    cIdx++;\n                    break;\n                }\n                col = grid.getColumnByIndex(cIdx);\n                value = col.getParser() ? col.getParser()(cols[c]) : cols[c];\n                if (col.allowEditing && !col.isPrimaryKey && !col.template) {\n                    var args = {\n                        column: col,\n                        data: value,\n                        rowIndex: rIdx\n                    };\n                    this.parent.trigger(events.beforePaste, args);\n                    rIdx = args.rowIndex;\n                    if (!args.cancel) {\n                        if (grid.editModule) {\n                            if (col.type === 'number') {\n                                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));\n                            }\n                            else {\n                                grid.editModule.updateCell(rIdx, col.field, args.data);\n                            }\n                        }\n                    }\n                }\n                cIdx++;\n            }\n            rIdx++;\n        }\n        grid.selectionModule.selectCellsByRange({ rowIndex: rowIndex, cellIndex: colIndex }, { rowIndex: rIdx - 1, cellIndex: cIdx - 1 });\n        var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);\n        if (cell) {\n            classList(cell, ['e-focus', 'e-focused'], []);\n        }\n    };\n    Clipboard.prototype.initialEnd = function () {\n        this.parent.off(events.contentReady, this.initialEnd);\n        this.clipBoardTextArea = this.parent.createElement('textarea', {\n            className: 'e-clipboard',\n            styles: 'opacity: 0',\n            attrs: { tabindex: '-1', 'aria-label': 'clipboard' }\n        });\n        this.parent.element.appendChild(this.clipBoardTextArea);\n    };\n    Clipboard.prototype.keyDownHandler = function (e) {\n        if (e.action === 'ctrlPlusC') {\n            this.copy();\n        }\n        else if (e.action === 'ctrlShiftPlusH') {\n            this.copy(true);\n        }\n    };\n    Clipboard.prototype.setCopyData = function (withHeader) {\n        if (window.getSelection().toString() === '') {\n            var isFrozen = this.parent.isFrozenGrid();\n            this.clipBoardTextArea.value = this.copyContent = '';\n            var mRows = void 0;\n            var frRows = void 0;\n            var rows = this.parent.getRows();\n            if (isFrozen) {\n                mRows = this.parent.getMovableDataRows();\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    frRows = this.parent.getFrozenRightRows();\n                }\n            }\n            if (this.parent.selectionSettings.mode !== 'Cell') {\n                var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) { return a - b; });\n                if (withHeader) {\n                    var headerTextArray = [];\n                    for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {\n                        headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;\n                    }\n                    this.getCopyData(headerTextArray, false, '\\t', withHeader);\n                    this.copyContent += '\\n';\n                }\n                for (var i = 0; i < selectedIndexes.length; i++) {\n                    if (i > 0) {\n                        this.copyContent += '\\n';\n                    }\n                    var cells = [].slice.call(rows[selectedIndexes[i]].\n                        querySelectorAll('.e-rowcell:not(.e-hide)'));\n                    if (isFrozen) {\n                        cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n                        if (frRows) {\n                            cells.push.apply(cells, [].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n                        }\n                    }\n                    this.getCopyData(cells, false, '\\t', withHeader);\n                }\n            }\n            else {\n                var obj = this.checkBoxSelection();\n                if (obj.status) {\n                    if (withHeader) {\n                        var headers = [];\n                        for (var i = 0; i < obj.colIndexes.length; i++) {\n                            headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));\n                        }\n                        this.getCopyData(headers, false, '\\t', withHeader);\n                        this.copyContent += '\\n';\n                    }\n                    for (var i = 0; i < obj.rowIndexes.length; i++) {\n                        if (i > 0) {\n                            this.copyContent += '\\n';\n                        }\n                        var cells = [].slice.call(rows[obj.rowIndexes[i]].\n                            getElementsByClassName('e-cellselectionbackground'));\n                        if (isFrozen) {\n                            cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]]\n                                .getElementsByClassName('e-cellselectionbackground')));\n                            if (frRows) {\n                                cells.push.apply(cells, [].slice.call(frRows[obj.rowIndexes[i]]\n                                    .getElementsByClassName('e-cellselectionbackground')));\n                            }\n                        }\n                        this.getCopyData(cells, false, '\\t', withHeader);\n                    }\n                }\n                else {\n                    this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\\n', withHeader);\n                }\n            }\n            var args = {\n                data: this.copyContent,\n                cancel: false\n            };\n            this.parent.trigger(events.beforeCopy, args);\n            if (args.cancel) {\n                return;\n            }\n            this.clipBoardTextArea.value = this.copyContent = args.data;\n            if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n                this.clipBoardTextArea.select();\n            }\n            else {\n                this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n            }\n            this.isSelect = true;\n        }\n    };\n    Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {\n        var isElement = typeof cells[0] !== 'string';\n        for (var j = 0; j < cells.length; j++) {\n            if (withHeader && isCell) {\n                var colIdx = parseInt(cells[j].getAttribute(literals.ariaColIndex), 10);\n                this.copyContent += this.parent.getColumns()[colIdx].headerText + '\\n';\n            }\n            if (isElement) {\n                if (!cells[j].classList.contains('e-hide')) {\n                    this.copyContent += cells[j].innerText;\n                }\n            }\n            else {\n                this.copyContent += cells[j];\n            }\n            if (j < cells.length - 1) {\n                this.copyContent += splitKey;\n            }\n        }\n    };\n    /**\n     * Copy selected rows or cells data into clipboard.\n     *\n     * @returns {void}\n     * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.\n     */\n    Clipboard.prototype.copy = function (withHeader) {\n        if (document.queryCommandSupported('copy')) {\n            this.setCopyData(withHeader);\n            document.execCommand('copy');\n            this.clipBoardTextArea.blur();\n        }\n        if (this.isSelect) {\n            window.getSelection().removeAllRanges();\n            this.isSelect = false;\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Clipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    /**\n     * To destroy the clipboard\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.clipBoardTextArea) {\n            remove(this.clipBoardTextArea);\n        }\n    };\n    Clipboard.prototype.checkBoxSelection = function () {\n        var gridObj = this.parent;\n        var obj = { status: false };\n        if (gridObj.selectionSettings.mode === 'Cell') {\n            var rowCellIndxes = gridObj.getSelectedRowCellIndexes();\n            var str = void 0;\n            var rowIndexes = [];\n            var i = void 0;\n            for (i = 0; i < rowCellIndxes.length; i++) {\n                if (rowCellIndxes[i].cellIndexes.length) {\n                    rowIndexes.push(rowCellIndxes[i].rowIndex);\n                }\n                if (rowCellIndxes[i].cellIndexes.length) {\n                    if (!str) {\n                        str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());\n                    }\n                    if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {\n                        break;\n                    }\n                }\n            }\n            rowIndexes.sort(function (a, b) { return a - b; });\n            if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {\n                obj = { status: true, rowIndexes: rowIndexes, colIndexes: rowCellIndxes[0].cellIndexes };\n            }\n        }\n        return obj;\n    };\n    return Clipboard;\n}());\nexport { Clipboard };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}