{"ast":null,"code":"import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns, measureColumnDepth } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */function () {\n  /**\n   * Constructor for the Grid Excel Export module.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} locator - specifies the ServiceLocator\n   * @hidden\n   */\n  function ExcelExport(parent, locator) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.isCsvExport = false;\n    this.isElementIdChanged = false;\n    this.gridPool = {};\n    this.sheet = {};\n    this.parent = parent;\n    this.helper = new ExportHelper(parent);\n    this.locator = locator;\n    this.l10n = this.locator.getService('localization');\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} returns the module name\n   */\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n  ExcelExport.prototype.init = function (gObj) {\n    if (gObj.element !== null && gObj.element.id === '') {\n      gObj.element.id = new Date().toISOString();\n      this.isElementIdChanged = true;\n    }\n    this.parent = gObj;\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.isExporting = undefined;\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.footer = undefined;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n    gObj.id = getUid('main-grid');\n    this.gridPool[gObj.id] = false;\n  };\n  /**\n   * Export Grid to Excel file.\n   *\n   * @param {IGrid} grid - Defines the grid.\n   * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n   * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n   * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.\n   * @param  {boolean} isCsv - true if export to CSV.\n   * @param {boolean} isBlob - true if isBlob is enabled.\n   * @returns {Promise<any>} - Returns the map for export.\n   */\n  // eslint-disable-next-line\n  ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n    var gObj = grid;\n    var cancel = 'cancel';\n    var isBlb = 'isBlob';\n    var csv = 'isCsv';\n    var workbk = 'workbook';\n    var isMultiEx = 'isMultipleExport';\n    this.gridPool = {};\n    if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n      grid.expandedRows = getPrintGridModel(grid).expandedRows;\n    }\n    var args = {\n      requestType: 'beforeExcelExport',\n      gridObject: gObj,\n      cancel: false,\n      isMultipleExport: isMultipleExport,\n      workbook: workbook,\n      isCsv: isCsv,\n      isBlob: isBlob\n    };\n    gObj.trigger(events.beforeExcelExport, args);\n    if (args[cancel]) {\n      return new Promise(function (resolve) {\n        return resolve();\n      });\n    }\n    this.parent.log('exporting_begin', this.getModuleName());\n    this.data = new Data(gObj);\n    this.isExporting = true;\n    this.isBlob = args[isBlb];\n    if (args[csv]) {\n      this.isCsvExport = args[csv];\n    } else {\n      this.isCsvExport = false;\n    }\n    if (isExportColumns(exportProperties)) {\n      updateColumnTypeForExportColumns(exportProperties, gObj);\n    }\n    return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n  };\n  ExcelExport.prototype.exportingSuccess = function (resolve) {\n    this.isExporting = false;\n    this.parent.trigger(events.excelExportComplete, this.isBlob ? {\n      promise: this.blobPromise\n    } : {});\n    this.parent.log('exporting_complete', this.getModuleName());\n    resolve(this.book);\n    this.sheet.images = [];\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n    var _this = this;\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && exportProperties.dataSource instanceof DataManager) {\n      var query_1 = exportProperties.query ? exportProperties.query : new Query();\n      if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n        query_1.isCountRequired = true;\n      }\n      return new Promise(function (resolve) {\n        var dataManager = exportProperties.dataSource.executeQuery(query_1);\n        dataManager.then(function (r) {\n          _this.init(gObj);\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        });\n      });\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      return new Promise(function (resolve) {\n        _this.init(gObj);\n        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n        _this.exportingSuccess(resolve);\n      });\n    } else {\n      var allPromise_1 = [];\n      allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n      allPromise_1.push(this.helper.getColumnData(gObj));\n      return new Promise(function (resolve, reject) {\n        Promise.all(allPromise_1).then(function (e) {\n          _this.init(gObj);\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        }).catch(function (e) {\n          reject(_this.book);\n          _this.parent.trigger(events.actionFailure, e);\n        });\n      });\n    }\n  };\n  ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isMultipleExport, workbook, r) {\n    var _this = this;\n    this.groupedColLength = gObj.groupSettings.columns.length;\n    var blankRows = 5;\n    var separator;\n    var rows = [];\n    var colDepth = measureColumnDepth(gObj.columns);\n    var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n      this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet';\n      if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n        blankRows = exportProperties.multipleExport.blankRows;\n      }\n    }\n    if (isNullOrUndefined(workbook)) {\n      this.workSheet = [];\n      this.rows = [];\n      this.columns = [];\n      this.styles = [];\n    } else if (this.expType === 'NewSheet') {\n      this.workSheet = workbook.worksheets;\n      this.rows = [];\n      this.columns = [];\n      this.styles = workbook.styles;\n    } else {\n      this.workSheet = [];\n      this.rows = workbook.worksheets[0].rows;\n      this.columns = workbook.worksheets[0].columns;\n      this.styles = workbook.styles;\n      this.rowLength = this.rows[this.rows.length - 1].index + blankRows;\n      this.rowLength++;\n    }\n    if (isExportPropertiesPresent) {\n      if (!isNullOrUndefined(isMultipleExport)) {\n        if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          if (this.expType === 'AppendToSheet') {\n            if (!isMultipleExport) {\n              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n            }\n          } else {\n            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n          }\n        }\n      } else {\n        if (!isNullOrUndefined(exportProperties.header)) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n        }\n      }\n    }\n    this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return new Promise(function (resolve, reject) {\n      gObj.childGridLevel = 0;\n      rows = _this.processGridExport(gObj, exportProperties, r);\n      _this.globalResolve = resolve;\n      _this.gridPool[gObj.id] = true;\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n    }).then(function () {\n      var organisedRows = [];\n      _this.organiseRows(rows, rows[0].index, organisedRows);\n      _this.rows = _this.rows.concat(organisedRows);\n      //footer template add\n      if (!isNullOrUndefined(_this.footer)) {\n        if (_this.expType === 'AppendToSheet' && !isMultipleExport || _this.expType === 'NewSheet') {\n          _this.processExcelFooter(_this.footer);\n        }\n      }\n      if (_this.columns.length > 0) {\n        _this.sheet.columns = _this.columns;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      _this.sheet.rows = _this.rows;\n      _this.sheet.enableRtl = _this.parent.enableRtl;\n      if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent && exportProperties.enableFilter) {\n        var headerRowLen = exportProperties.header ? exportProperties.header.headerRows || exportProperties.header.rows.length : 0;\n        var autoFilters = {\n          row: colDepth + headerRowLen,\n          column: _this.groupedColLength ? _this.groupedColLength + 1 : _this.sheet.columns[0].index,\n          lastRow: _this.sheet.rows.length,\n          lastColumn: _this.sheet.columns.length\n        };\n        _this.sheet.autoFilters = autoFilters;\n      }\n      _this.workSheet.push(_this.sheet);\n      _this.book.worksheets = _this.workSheet;\n      _this.book.styles = _this.styles;\n      gObj.notify('finalPageSetup', _this.book);\n      if (!isMultipleExport) {\n        if (_this.isCsvExport) {\n          if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ',') {\n            separator = exportProperties.separator;\n          }\n          var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.csv');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('text/csv');\n          }\n        } else {\n          var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.xlsx');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n          }\n        }\n        if (_this.isElementIdChanged) {\n          gObj.element.id = '';\n        }\n        delete gObj.expandedRows;\n      }\n      return workbook;\n    });\n  };\n  ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n    if (!rows.length) {\n      return initialIndex;\n    }\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var childRows = row.childRows;\n      if (childRows) {\n        row.index = initialIndex++;\n        delete row.childRows;\n        organisedRows.push(row);\n        initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n      } else {\n        row.index = initialIndex++;\n        organisedRows.push(row);\n      }\n    }\n    return initialIndex;\n  };\n  ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n    var excelRows = [];\n    var isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n      this.theme = exportProperties.theme;\n    }\n    if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n      gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n    }\n    var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());\n    var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);\n    var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n    var groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;\n    excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n    // eslint-disable-next-line max-len\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n      // eslint-disable-next-line max-len\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n    } else {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n    }\n    gObj.notify(events.exportDataBound, {\n      excelRows: excelRows,\n      type: 'excel'\n    });\n    return excelRows;\n  };\n  ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n    var record;\n    if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n      record = currentViewRecords;\n    } else {\n      record = returnType.result;\n    }\n    if (!isNullOrUndefined(record.level)) {\n      this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n    } else {\n      this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n    }\n    if (!isNullOrUndefined(returnType.aggregates)) {\n      if (!isNullOrUndefined(currentViewRecords)) {\n        this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n      } else {\n        var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;\n        this.processAggregates(gObj, result, excelRow);\n      }\n    }\n    return excelRow;\n  };\n  ExcelExport.prototype.processGroupedRows = function (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n      var item = dataSource_1[_i];\n      var cells = [];\n      var index = 1;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var cell = {};\n      cell.index = index + level - 1;\n      var col = gObj.getColumnByField(item.field);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var args = {\n        value: item.key,\n        column: col,\n        style: undefined,\n        isForeignKey: col.isForeignColumn()\n      };\n      var value = gObj.getColumnByField(item.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n      if (item.count > 1) {\n        value += item.count + ' items';\n      } else {\n        value += item.count + ' item';\n      }\n      var cArgs = {\n        captionText: value,\n        type: this.isCsvExport ? 'CSV' : 'Excel',\n        data: item\n      };\n      this.parent.trigger(events.exportGroupCaption, cArgs);\n      cell.value = cArgs.captionText;\n      cell.style = this.getCaptionThemeStyle(this.theme);\n      var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n      var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n      this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels - 1, excelRows, this.rowLength);\n      cells.push(cell);\n      if (excelRows[excelRows.length - 1].cells.length > 0) {\n        var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n        var hIndex = 0;\n        for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n          var tCell = _b[_a];\n          if (tCell.index < lIndex) {\n            lIndex = tCell.index;\n          }\n          if (tCell.index > hIndex) {\n            hIndex = tCell.index;\n          }\n          if (cells[cells.length - 1].index !== tCell.index) {\n            cells.push(tCell);\n          }\n        }\n        if (lIndex - cell.index > 1) {\n          cell.colSpan = lIndex - cell.index;\n        }\n        while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          var sCell = {};\n          sCell.index = hIndex + 1;\n          sCell.style = this.getCaptionThemeStyle(this.theme);\n          cells.push(sCell);\n          hIndex++;\n        }\n      } else {\n        var span = 0;\n        //Calculation for column span when group caption dont have aggregates\n        for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n          var col_1 = _d[_c];\n          if (col_1.visible) {\n            span++;\n          }\n        }\n        cell.colSpan = dataSource.childLevels + span;\n      }\n      excelRows[excelRows.length - 1].cells = cells;\n      this.rowLength++;\n      if (this.groupedColLength < 8 && level > 1) {\n        var grouping = {\n          outlineLevel: level - 1,\n          isCollapsed: true\n        };\n        excelRows[excelRows.length - 1].grouping = grouping;\n      }\n      if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n        this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level - 1 + dataSource.childLevels, true);\n      } else {\n        startIndex = this.processRecordRows(gObj, item.items, headerRow, level - 1, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level - 1, true);\n      }\n    }\n  };\n  ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    var index = 1;\n    var cells = [];\n    var columns = headerRow.columns;\n    var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      cells = [];\n      startIndex++;\n      index = 1;\n      var templateRowHeight = void 0;\n      for (var c = 0, len = row.cells.length; c < len; c++) {\n        var gCell = row.cells[c];\n        if (gCell.cellType !== CellType.Data) {\n          continue;\n        }\n        var column = gCell.column;\n        var field = column.field;\n        var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n        var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n        var fkData = void 0;\n        if (column.isForeignColumn && column.isForeignColumn()) {\n          fkData = helper.getFData(value, column);\n          value = getValue(column.foreignKeyValue, fkData);\n        }\n        if (!isNullOrUndefined(value)) {\n          var cell = {};\n          var idx = index + level + gObj.childGridLevel;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          var excelCellArgs = {\n            data: row.data,\n            column: column,\n            foreignKeyData: fkData,\n            value: value,\n            style: undefined,\n            colSpan: 1,\n            cell: cell\n          };\n          gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n          if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {\n            templateRowHeight = this.setImage(excelCellArgs, idx);\n          }\n          if (!isNullOrUndefined(excelCellArgs.hyperLink)) {\n            excelCellArgs.cell.hyperlink = {\n              target: excelCellArgs.hyperLink.target\n            };\n            excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;\n          }\n          cell = excelCellArgs.cell;\n          cell.index = idx;\n          cell.value = excelCellArgs.value;\n          if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n            var style = {};\n            style.hAlign = 'left';\n            excelCellArgs = {\n              style: style\n            };\n            cell.colSpan = gObj.getVisibleColumns().length;\n            cell.value = this.l10n.getConstant('EmptyRecord');\n          }\n          if (excelCellArgs.colSpan > 1) {\n            cell.colSpan = excelCellArgs.colSpan;\n          }\n          if (!isNullOrUndefined(excelCellArgs.style)) {\n            var styleIndex = this.getColumnStyle(gObj, index + level);\n            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n          } else {\n            cell.style = {\n              name: gObj.element.id + 'column' + (index + level)\n            };\n          }\n          cells.push(cell);\n        }\n        index++;\n      }\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n      if (!isNullOrUndefined(templateRowHeight)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        excelRow.height = templateRowHeight;\n      }\n      if (this.groupedColLength && this.groupedColLength < 8 && level + 1 > 0) {\n        excelRow.grouping = {\n          outlineLevel: level + 1,\n          isCollapsed: true\n        };\n        excelRows.push(excelRow);\n      } else {\n        excelRows.push(excelRow);\n      }\n      if (row.isExpand && !isNullOrUndefined(gObj.childGrid)) {\n        gObj.isPrinting = true;\n        var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : 'AllPages';\n        var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n        var childGridObj = returnVal.childGrid;\n        var element = returnVal.element;\n        childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n        childGridObj.childGridLevel = gObj.childGridLevel + 1;\n        var args = {\n          childGrid: childGridObj,\n          row: row,\n          exportProperties: excelExportProperties\n        };\n        this.parent.trigger(events.exportDetailDataBound, args);\n        childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n        childGridObj.appendTo(element);\n      }\n      gObj.notify(events.exportRowDataBound, {\n        rowObj: row,\n        type: 'excel',\n        excelRows: excelRows\n      });\n    }\n    return startIndex;\n  };\n  ExcelExport.prototype.setImage = function (args, idx) {\n    if (isNullOrUndefined(this.sheet.images)) {\n      this.sheet.images = [];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var excelImage = {\n      image: args.image.base64,\n      row: this.rowLength,\n      column: idx,\n      lastRow: this.rowLength,\n      lastColumn: idx\n    };\n    this.sheet.images.push(excelImage);\n    this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;\n    return args.image.height || 50;\n  };\n  ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n    var _this = this;\n    return function (result) {\n      childGridObj.beforeDataBound = null;\n      result.cancel = true;\n      if (result.result.length === 0) {\n        result.result = [''];\n      }\n      excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n      var intent = _this.parent.groupSettings.columns.length;\n      var rows = excelRow.childRows;\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].grouping = {\n          outlineLevel: intent + childGridObj.childGridLevel,\n          isCollapsed: !gRow.isExpand,\n          isHidden: !gRow.isExpand\n        };\n      }\n      childGridObj.destroy();\n      detach(childGridObj.element);\n      _this.gridPool[childGridObj.id] = true;\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n      return excelRow;\n    };\n  };\n  ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n    var summaryModel = new SummaryModelGenerator(gObj);\n    var columns = summaryModel.getColumns();\n    columns = columns.filter(function (col) {\n      return isNullOrUndefined(col.commands) && col.type !== 'checkbox';\n    });\n    if (gObj.aggregates.length && this.parent !== gObj) {\n      gObj.aggregateModule.prepareSummaryInfo();\n    }\n    var data = undefined;\n    if (!isNullOrUndefined(currentViewRecords)) {\n      data = currentViewRecords;\n    } else {\n      data = rec;\n    }\n    if (indent === undefined) {\n      indent = 0;\n    }\n    if (gObj.groupSettings.columns.length > 0 && byGroup) {\n      var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n      var groupSummaryRows = groupSummaryModel.generateRows(data, {\n        level: data.level\n      });\n      if (groupSummaryRows.length > 0) {\n        excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n      }\n    } else {\n      indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n      var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n      if (sRows.length > 0 && !byGroup) {\n        indent = gObj.groupSettings.columns.length ? indent - 1 : indent;\n        excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n      }\n    }\n    return excelRows;\n  };\n  ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n    for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n      var row = rows_2[_i];\n      var cells = [];\n      var isEmpty = true;\n      var index = 0;\n      for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n        var cell = _b[_a];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var eCell = {};\n        if (cell.cellType === CellType.DetailFooterIntent) {\n          continue;\n        }\n        if (cell.visible || this.includeHiddenColumn) {\n          index++;\n          if (cell.isDataCell) {\n            isEmpty = false;\n            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n            eCell.index = index + indent + gObj.childGridLevel;\n            if (footerTemplate) {\n              eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n            } else if (groupFooterTemplate) {\n              eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n            } else if (groupCaptionTemplate) {\n              eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n            } else {\n              for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                var key = _d[_c];\n                if (key === cell.column.type) {\n                  if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                    eCell.value = row.data[cell.column.field].Custom;\n                  }\n                }\n              }\n            }\n            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n            this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n            var gridCellStyle = cell.attributes.style;\n            if (gridCellStyle.textAlign) {\n              eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n            }\n            var args = {\n              row: row,\n              type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n              style: eCell\n            };\n            this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n            cells.push(eCell);\n          } else {\n            if (customIndex === undefined) {\n              eCell.index = index + indent + gObj.childGridLevel;\n              eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n              cells.push(eCell);\n            }\n          }\n        }\n      }\n      if (!isNullOrUndefined(customIndex)) {\n        excelRows.push({\n          index: customIndex,\n          cells: cells\n        });\n      } else {\n        var row_1 = {};\n        if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n          var dummyOutlineLevel = 'outlineLevel';\n          var dummyGrouping = 'grouping';\n          var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n          var grouping = {\n            outlineLevel: level,\n            isCollapsed: true\n          };\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells,\n            grouping: grouping\n          };\n        } else {\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells\n          };\n        }\n        if (!isEmpty) {\n          excelRows.push(row_1);\n        }\n      }\n    }\n    return excelRows;\n  };\n  ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n    var column = this.parent.getColumnByField(field);\n    if (typeof col.format === 'object') {\n      var format = col.format;\n      style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n      if (!isNullOrUndefined(format.type)) {\n        style.type = format.type.toLowerCase();\n      }\n    } else {\n      style.numberFormat = col.format;\n    }\n    if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n      style.type = column.type.toLowerCase();\n    }\n  };\n  ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n    var templateFn = {};\n    templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n    var txt;\n    var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n    if (this.parent.isReact || this.parent.isVue) {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent);\n      if (this.parent.isReact) {\n        this.parent.renderTemplates();\n      }\n    } else {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data);\n    }\n    return txt[0].textContent;\n  };\n  ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n    var result = {};\n    var attrname = Object.keys(JSON1);\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON1[attrname[index]];\n      }\n    }\n    attrname = Object.keys(JSON2);\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON2[attrname[index]];\n      }\n    }\n    return result;\n  };\n  ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n    var index = 0;\n    for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n      var style = _a[_i];\n      if (style.name === gObj.element.id + 'column' + columnIndex) {\n        return index;\n      }\n      index++;\n    }\n    return undefined;\n  };\n  ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n    var rowIndex = 1;\n    var gridRows = headerRow.rows;\n    // Column collection with respect to the records in the grid\n    var gridColumns = headerRow.columns;\n    var spannedCells = [];\n    if (indent > 0) {\n      var index = 0;\n      while (index !== indent) {\n        this.columns.push({\n          index: index + 1,\n          width: 30\n        });\n        index++;\n      }\n    }\n    for (var col = 0; col < gridColumns.length; col++) {\n      this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n    }\n    var templateRowHeight;\n    for (var row = 0; row < gridRows.length; row++) {\n      var currentCellIndex = 1 + indent;\n      var cells = [];\n      for (var column = 0; column < gridRows[row].cells.length; column++) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var style = {};\n        var cell = {};\n        var gridCell = gridRows[row].cells[column];\n        if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n          continue;\n        }\n        var result = {\n          contains: true,\n          index: 1\n        };\n        while (result.contains) {\n          result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n          currentCellIndex = result.index;\n          if (!result.contains) {\n            cell.index = result.index + gObj.childGridLevel;\n            break;\n          }\n        }\n        if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n          cell.rowSpan = gridCell.rowSpan;\n          for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n            var spannedCell = {\n              rowIndex: 0,\n              columnIndex: 0\n            };\n            spannedCell.rowIndex = i;\n            spannedCell.columnIndex = currentCellIndex;\n            spannedCells.push(spannedCell);\n          }\n        }\n        if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n          cell.colSpan = gridCell.colSpan;\n          currentCellIndex = currentCellIndex + cell.colSpan - 1;\n        }\n        cell.value = gridCell.column.headerText;\n        style = this.getHeaderThemeStyle(this.theme);\n        if (!isNullOrUndefined(gridCell.column.textAlign)) {\n          style.hAlign = gridCell.column.textAlign.toLowerCase();\n        }\n        if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n          style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n        }\n        var excelHeaderCellArgs = {\n          cell: cell,\n          gridCell: gridCell,\n          style: style\n        };\n        gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n        if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {\n          templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);\n        }\n        if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {\n          excelHeaderCellArgs.cell.hyperlink = {\n            target: excelHeaderCellArgs.hyperLink.target\n          };\n          cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;\n        }\n        cell.style = excelHeaderCellArgs.style;\n        cells.push(cell);\n        currentCellIndex++;\n      }\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n      if (!isNullOrUndefined(templateRowHeight)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        excelRow.height = templateRowHeight;\n      }\n      excelRows.push(excelRow);\n    }\n    return excelRows;\n  };\n  ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 12;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    style.bold = true;\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n      style = this.updateThemeStyle(theme.header, style);\n    }\n    return style;\n  };\n  ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n    return extend(style, themestyle);\n  };\n  ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.backColor = '#F6F6F6';\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n      style = this.updateThemeStyle(theme.caption, style);\n    }\n    return style;\n  };\n  ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n      style = this.updateThemeStyle(theme.record, style);\n    }\n    return style;\n  };\n  ExcelExport.prototype.processExcelHeader = function (header) {\n    if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n      var noRows = void 0;\n      if (header.headerRows === undefined) {\n        this.rowLength = header.rows.length;\n      } else {\n        this.rowLength = header.headerRows;\n      }\n      if (this.rowLength < header.rows.length) {\n        noRows = this.rowLength;\n      } else {\n        noRows = header.rows.length;\n      }\n      this.rowLength++;\n      for (var row = 0; row < noRows; row++) {\n        var json = header.rows[row];\n        //Row index\n        if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n          json.index = row + 1;\n        }\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n  ExcelExport.prototype.updatedCellIndex = function (json) {\n    var cellsLength = json.cells.length;\n    for (var cellId = 0; cellId < cellsLength; cellId++) {\n      var jsonCell = json.cells[cellId];\n      //cell index\n      if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n        jsonCell.index = cellId + 1;\n      }\n    }\n    this.rows.push(json);\n  };\n  ExcelExport.prototype.processExcelFooter = function (footer) {\n    if (!isNullOrUndefined(footer.rows)) {\n      var noRows = void 0;\n      if (footer.footerRows === undefined) {\n        this.rowLength += footer.rows.length;\n      } else {\n        if (footer.footerRows > footer.rows.length) {\n          this.rowLength += footer.footerRows - footer.rows.length;\n          noRows = footer.rows.length;\n        } else {\n          noRows = footer.footerRows;\n        }\n      }\n      for (var row = 0; row < noRows; row++) {\n        var json = footer.rows[row];\n        //Row index\n        if (json.index === null || json.index === undefined) {\n          json.index = this.rowLength++;\n        } else {\n          json.index += this.rowLength;\n        }\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n  ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n    for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n      var spannedCell = spannedCells_1[_i];\n      if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {\n        columnIndex = columnIndex + 1;\n        return {\n          contains: true,\n          index: columnIndex\n        };\n      }\n    }\n    return {\n      contains: false,\n      index: columnIndex\n    };\n  };\n  ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n    if (!isNullOrUndefined(col.format)) {\n      if (typeof col.format === 'object') {\n        var format = col.format;\n        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n        if (!isNullOrUndefined(format.type)) {\n          style.type = format.type.toLowerCase();\n        }\n      } else {\n        style.numberFormat = col.format;\n        style.type = col.type;\n      }\n    }\n    if (!isNullOrUndefined(col.textAlign)) {\n      style.hAlign = col.textAlign.toLowerCase();\n    }\n    if (Object.keys(style).length > 0) {\n      style.name = gObj.element.id + 'column' + index;\n      this.styles.push(style);\n    }\n    if (!isNullOrUndefined(col.width) && col.width !== 'auto') {\n      this.columns.push({\n        index: index + gObj.childGridLevel,\n        width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width)\n      });\n    }\n  };\n  ExcelExport.prototype.destroy = function () {\n    //destroy for exporting\n  };\n  return ExcelExport;\n}();\nexport { ExcelExport };","map":{"version":3,"names":["events","Workbook","isNullOrUndefined","getEnumValue","compile","getValue","detach","extend","Data","ExportHelper","ExportValueFormatter","SummaryModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","CellType","Query","DataManager","getPrintGridModel","getUid","isExportColumns","updateColumnTypeForExportColumns","prepareColumns","measureColumnDepth","ExcelExport","parent","locator","book","workSheet","rows","columns","styles","rowLength","expType","includeHiddenColumn","isCsvExport","isElementIdChanged","gridPool","sheet","helper","l10n","getService","prototype","getModuleName","init","gObj","element","id","Date","toISOString","isDestroyed","isExporting","undefined","footer","exportValueFormatter","locale","Map","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","cancel","isBlb","csv","workbk","isMultiEx","childGrid","hierarchyExportMode","expandedRows","args","requestType","gridObject","trigger","beforeExcelExport","Promise","resolve","log","data","processRecords","exportingSuccess","excelExportComplete","promise","blobPromise","images","_this","dataSource","query_1","query","isCountRequired","aggregates","dataManager","executeQuery","then","r","processInnerRecords","exportType","getCurrentViewRecords","allPromise_1","push","getData","getQuery","getColumnData","reject","all","e","catch","actionFailure","groupedColLength","groupSettings","length","blankRows","separator","colDepth","isExportPropertiesPresent","multipleExport","type","worksheets","index","header","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","concat","processExcelFooter","enableRtl","allowFiltering","getVisibleColumns","enableFilter","headerRowLen","headerRows","autoFilters","row","column","lastRow","lastColumn","notify","currencyCode","fileName","save","saveAsBlob","initialIndex","i","childRows","excelRows","isFrozen","isFrozenGrid","getFrozenColumns","theme","hierarchyPrintMode","getForeignKeyData","gColumns","enableColumnVirtualization","getGridExportColumns","getColumns","headerRow","getHeaders","groupIndent","processHeaderContent","processRecordContent","currentViewData","exportDataBound","returnType","currentViewRecords","excelRow","record","result","level","processGroupedRows","processRecordRows","processAggregates","GroupGuid","records","startIndex","excelExportProperties","_i","dataSource_1","item","cells","cell","col","getColumnByField","field","value","key","style","isForeignKey","isForeignColumn","headerText","enableGroupByFormat","formatCellValue","count","cArgs","captionText","exportGroupCaption","getCaptionThemeStyle","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","_a","_b","tCell","colSpan","sCell","span","_c","_d","col_1","visible","grouping","outlineLevel","isCollapsed","items","getGridRowModel","rows_1","templateRowHeight","c","len","gCell","cellType","cellValue","valueAccessor","fkData","getFData","foreignKeyValue","idx","excelCellArgs","foreignKeyData","excelQueryCellInfo","image","base64","setImage","hyperLink","hyperlink","target","displayText","hAlign","getConstant","styleIndex","getColumnStyle","mergeOptions","name","height","isExpand","isPrinting","returnVal","createChildGrid","childGridObj","failureHandler","exportDetailDataBound","beforeDataBound","childGridCell","appendTo","exportRowDataBound","rowObj","excelImage","width","excelExportProps","gRow","intent","isHidden","destroy","rec","indent","byGroup","summaryModel","filter","commands","aggregateModule","prepareSummaryInfo","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","isEmpty","eCell","DetailFooterIntent","isDataCell","footerTemplate","groupFooterTemplate","groupCaptionTemplate","getAggreateValue","Summary","GroupSummary","CaptionSummary","Object","keys","Sum","Average","Max","Min","Count","TrueCount","FalseCount","Custom","aggregateStyle","gridCellStyle","attributes","textAlign","toLowerCase","excelAggregateQueryCellInfo","row_1","dummyOutlineLevel","dummyGrouping","format","numberFormat","skeleton","template","templateFn","txt","columnName","isReact","isVue","renderTemplates","textContent","JSON1","JSON2","attrname","columnIndex","rowIndex","gridRows","gridColumns","spannedCells","parseStyles","getRecordThemeStyle","currentCellIndex","gridCell","HeaderIndent","DetailHeader","contains","getIndex","rowSpan","spannedCell","getHeaderThemeStyle","headerTextAlign","excelHeaderCellArgs","excelHeaderQueryCellInfo","fontSize","borders","color","bold","updateThemeStyle","themestyle","backColor","caption","noRows","json","updatedCellIndex","cellsLength","cellId","jsonCell","footerRows","spannedCells_1","getConvertedWidth"],"sources":["C:/Users/Josh/Desktop/School-work/admin_dash/Admin_Dashboard/node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js"],"sourcesContent":["import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns, measureColumnDepth } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} locator - specifies the ServiceLocator\n     * @hidden\n     */\n    function ExcelExport(parent, locator) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isElementIdChanged = false;\n        this.gridPool = {};\n        this.sheet = {};\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.locator = locator;\n        this.l10n = this.locator.getService('localization');\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     *\n     * @param {IGrid} grid - Defines the grid.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {boolean} isCsv - true if export to CSV.\n     * @param {boolean} isBlob - true if isBlob is enabled.\n     * @returns {Promise<any>} - Returns the map for export.\n     */\n    // eslint-disable-next-line\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[cancel]) {\n            return new Promise(function (resolve) {\n                return resolve();\n            });\n        }\n        this.parent.log('exporting_begin', this.getModuleName());\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[isBlb];\n        if (args[csv]) {\n            this.isCsvExport = args[csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        if (isExportColumns(exportProperties)) {\n            updateColumnTypeForExportColumns(exportProperties, gObj);\n        }\n        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n    };\n    ExcelExport.prototype.exportingSuccess = function (resolve) {\n        this.isExporting = false;\n        this.parent.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});\n        this.parent.log('exporting_complete', this.getModuleName());\n        resolve(this.book);\n        this.sheet.images = [];\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) &&\n            exportProperties.dataSource instanceof DataManager) {\n            var query_1 = exportProperties.query ? exportProperties.query : new Query();\n            if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n                query_1.isCountRequired = true;\n            }\n            return new Promise(function (resolve) {\n                var dataManager = exportProperties.dataSource.executeQuery(query_1);\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                });\n            });\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            return new Promise(function (resolve) {\n                _this.init(gObj);\n                _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n                _this.exportingSuccess(resolve);\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var separator;\n        var rows = [];\n        var colDepth = measureColumnDepth(gObj.columns);\n        var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n        if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (isExportPropertiesPresent) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            if (_this.columns.length > 0) {\n                _this.sheet.columns = _this.columns;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            _this.sheet.rows = _this.rows;\n            _this.sheet.enableRtl = _this.parent.enableRtl;\n            if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent &&\n                exportProperties.enableFilter) {\n                var headerRowLen = exportProperties.header ? exportProperties.header.headerRows ||\n                    exportProperties.header.rows.length : 0;\n                var autoFilters = {\n                    row: colDepth + headerRowLen, column: _this.groupedColLength ? _this.groupedColLength + 1 :\n                        _this.sheet.columns[0].index, lastRow: _this.sheet.rows.length, lastColumn: _this.sheet.columns.length\n                };\n                _this.sheet.autoFilters = autoFilters;\n            }\n            _this.workSheet.push(_this.sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            gObj.notify('finalPageSetup', _this.book);\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator)\n                        && exportProperties.separator !== ',') {\n                        separator = exportProperties.separator;\n                    }\n                    var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        var isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());\n        var gColumns = isExportColumns(exportProperties) ?\n            prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) :\n            helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);\n        var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        // eslint-disable-next-line max-len\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n            // eslint-disable-next-line max-len\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        gObj.notify(events.exportDataBound, { excelRows: excelRows, type: 'excel' });\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates)) {\n            if (!isNullOrUndefined(currentViewRecords)) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                var result = returnType.result.GroupGuid ?\n                    returnType.result.records : returnType.result;\n                this.processAggregates(gObj, result, excelRow);\n            }\n        }\n        return excelRow;\n    };\n    ExcelExport.prototype.processGroupedRows = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var cell = {};\n            cell.index = (index + level) - 1;\n            var col = gObj.getColumnByField(item.field);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn()\n            };\n            var value = gObj.getColumnByField(item.field).headerText +\n                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n            if (item.count > 1) {\n                value += item.count + ' items';\n            }\n            else {\n                value += item.count + ' item';\n            }\n            var cArgs = { captionText: value, type: this.isCsvExport ? 'CSV' : 'Excel', data: item };\n            this.parent.trigger(events.exportGroupCaption, cArgs);\n            cell.value = cArgs.captionText;\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, (dataSource.level + dataSource.childLevels) - 1, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level - 1) + dataSource.childLevels, true);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level - 1), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level - 1), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            var templateRowHeight = void 0;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[c];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    var idx = index + level + gObj.childGridLevel;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {\n                        templateRowHeight = this.setImage(excelCellArgs, idx);\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.hyperLink)) {\n                        excelCellArgs.cell.hyperlink = { target: excelCellArgs.hyperLink.target };\n                        excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;\n                    }\n                    cell = excelCellArgs.cell;\n                    cell.index = idx;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n                        var style = {};\n                        style.hAlign = 'left';\n                        excelCellArgs = { style: style };\n                        cell.colSpan = gObj.getVisibleColumns().length;\n                        cell.value = this.l10n.getConstant('EmptyRecord');\n                    }\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (!isNullOrUndefined(templateRowHeight)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                excelRow.height = templateRowHeight;\n            }\n            if (this.groupedColLength && this.groupedColLength < 8 && (level + 1) > 0) {\n                excelRow.grouping = { outlineLevel: (level + 1), isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if (row.isExpand && !isNullOrUndefined(gObj.childGrid)) {\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                    excelExportProperties.exportType : 'AllPages';\n                var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnVal.childGrid;\n                var element = returnVal.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                childGridObj.appendTo(element);\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel', excelRows: excelRows });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.setImage = function (args, idx) {\n        if (isNullOrUndefined(this.sheet.images)) {\n            this.sheet.images = [];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var excelImage = {\n            image: args.image.base64, row: this.rowLength, column: idx,\n            lastRow: this.rowLength, lastColumn: idx\n        };\n        this.sheet.images.push(excelImage);\n        this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;\n        return args.image.height || 50;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            if (result.result.length === 0) {\n                result.result = [''];\n            }\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            var rows = excelRow.childRows;\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].grouping = { outlineLevel: intent + childGridObj.childGridLevel,\n                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            }\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        var columns = summaryModel.getColumns();\n        columns = columns.filter(function (col) { return isNullOrUndefined(col.commands) && col.type !== 'checkbox'; });\n        if (gObj.aggregates.length && this.parent !== gObj) {\n            gObj.aggregateModule.prepareSummaryInfo();\n        }\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n            if (sRows.length > 0 && !byGroup) {\n                indent = gObj.groupSettings.columns.length ? indent - 1 : indent;\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var isEmpty = true;\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var eCell = {};\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        isEmpty = false;\n                        var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n                        var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n                        var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (footerTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (groupFooterTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (groupCaptionTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        var args = {\n                            row: row,\n                            type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n                            style: eCell\n                        };\n                        this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n                    var dummyOutlineLevel = 'outlineLevel';\n                    var dummyGrouping = 'grouping';\n                    var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                if (!isEmpty) {\n                    excelRows.push(row_1);\n                }\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n        var column = this.parent.getColumnByField(field);\n        if (typeof col.format === 'object') {\n            var format = col.format;\n            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n            if (!isNullOrUndefined(format.type)) {\n                style.type = format.type.toLowerCase();\n            }\n        }\n        else {\n            style.numberFormat = col.format;\n        }\n        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n            style.type = column.type.toLowerCase();\n        }\n    };\n    ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        var txt;\n        var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n        if (this.parent.isReact || this.parent.isVue) {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent));\n            if (this.parent.isReact) {\n                this.parent.renderTemplates();\n            }\n        }\n        else {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data));\n        }\n        return txt[0].textContent;\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON1[attrname[index]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON2[attrname[index]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        var templateRowHeight;\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[row].cells.length; column++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[row].cells[column];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {\n                    templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);\n                }\n                if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {\n                    excelHeaderCellArgs.cell.hyperlink = { target: excelHeaderCellArgs.hyperLink.target };\n                    cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;\n                }\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (!isNullOrUndefined(templateRowHeight)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                excelRow.height = templateRowHeight;\n            }\n            excelRows.push(excelRow);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[row];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[cellId];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[row];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type.toLowerCase();\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width) && col.width !== 'auto') {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,kBAAkB;AAC1C,SAASC,QAAQ,QAAQ,8BAA8B;AACvD,SAASC,iBAAiB,EAAEC,YAAY,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,sBAAsB;AACzG,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,iBAAiB;AACpE,SAASC,qBAAqB,EAAEC,0BAA0B,EAAEC,4BAA4B,QAAQ,qCAAqC;AACrI,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,KAAK,EAAEC,WAAW,QAAQ,sBAAsB;AACzD,SAASC,iBAAiB,EAAEC,MAAM,EAAEC,eAAe,EAAEC,gCAAgC,EAAEC,cAAc,EAAEC,kBAAkB,QAAQ,cAAc;AAC/I;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAe,YAAY;EACzC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAE;IAClC;IACA,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;IACd,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,OAAO,GAAG,eAAe;IAC9B,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAACb,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACc,MAAM,GAAG,IAAI7B,YAAY,CAACe,MAAM,CAAC;IACtC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,IAAI,GAAG,IAAI,CAACd,OAAO,CAACe,UAAU,CAAC,cAAc,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;EACIjB,WAAW,CAACkB,SAAS,CAACC,aAAa,GAAG,YAAY;IAC9C,OAAO,aAAa;EACxB,CAAC;EACDnB,WAAW,CAACkB,SAAS,CAACE,IAAI,GAAG,UAAUC,IAAI,EAAE;IACzC,IAAIA,IAAI,CAACC,OAAO,KAAK,IAAI,IAAID,IAAI,CAACC,OAAO,CAACC,EAAE,KAAK,EAAE,EAAE;MACjDF,IAAI,CAACC,OAAO,CAACC,EAAE,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC1C,IAAI,CAACb,kBAAkB,GAAG,IAAI;IAClC;IACA,IAAI,CAACX,MAAM,GAAGoB,IAAI;IAClB,IAAI,IAAI,CAACpB,MAAM,CAACyB,WAAW,EAAE;MACzB;IACJ;IACA,IAAI,CAACC,WAAW,GAAGC,SAAS;IAC5B,IAAI,CAACzB,IAAI,GAAG,CAAC,CAAC;IACd,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACqB,MAAM,GAAGD,SAAS;IACvB,IAAI,CAACnB,OAAO,GAAG,eAAe;IAC9B,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACoB,oBAAoB,GAAG,IAAI3C,oBAAoB,CAACkC,IAAI,CAACU,MAAM,CAAC;IACjEV,IAAI,CAACE,EAAE,GAAG5B,MAAM,CAAC,WAAW,CAAC;IAC7B,IAAI,CAACkB,QAAQ,CAACQ,IAAI,CAACE,EAAE,CAAC,GAAG,KAAK;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACAvB,WAAW,CAACkB,SAAS,CAACc,GAAG,GAAG,UAAUC,IAAI,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACrG,IAAIjB,IAAI,GAAGY,IAAI;IACf,IAAIM,MAAM,GAAG,QAAQ;IACrB,IAAIC,KAAK,GAAG,QAAQ;IACpB,IAAIC,GAAG,GAAG,OAAO;IACjB,IAAIC,MAAM,GAAG,UAAU;IACvB,IAAIC,SAAS,GAAG,kBAAkB;IAClC,IAAI,CAAC9B,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAIoB,IAAI,CAACW,SAAS,IAAI,EAAE,CAACjE,iBAAiB,CAACuD,gBAAgB,CAAC,IAAIA,gBAAgB,CAACW,mBAAmB,KAAK,MAAM,CAAC,EAAE;MAC9GZ,IAAI,CAACa,YAAY,GAAGpD,iBAAiB,CAACuC,IAAI,CAAC,CAACa,YAAY;IAC5D;IACA,IAAIC,IAAI,GAAG;MACPC,WAAW,EAAE,mBAAmB;MAAEC,UAAU,EAAE5B,IAAI;MAAEkB,MAAM,EAAE,KAAK;MACjEJ,gBAAgB,EAAEA,gBAAgB;MAAEC,QAAQ,EAAEA,QAAQ;MAAEC,KAAK,EAAEA,KAAK;MAAEC,MAAM,EAAEA;IAClF,CAAC;IACDjB,IAAI,CAAC6B,OAAO,CAACzE,MAAM,CAAC0E,iBAAiB,EAAEJ,IAAI,CAAC;IAC5C,IAAIA,IAAI,CAACR,MAAM,CAAC,EAAE;MACd,OAAO,IAAIa,OAAO,CAAC,UAAUC,OAAO,EAAE;QAClC,OAAOA,OAAO,CAAC,CAAC;MACpB,CAAC,CAAC;IACN;IACA,IAAI,CAACpD,MAAM,CAACqD,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACnC,aAAa,CAAC,CAAC,CAAC;IACxD,IAAI,CAACoC,IAAI,GAAG,IAAItE,IAAI,CAACoC,IAAI,CAAC;IAC1B,IAAI,CAACM,WAAW,GAAG,IAAI;IACvB,IAAI,CAACW,MAAM,GAAGS,IAAI,CAACP,KAAK,CAAC;IACzB,IAAIO,IAAI,CAACN,GAAG,CAAC,EAAE;MACX,IAAI,CAAC9B,WAAW,GAAGoC,IAAI,CAACN,GAAG,CAAC;IAChC,CAAC,MACI;MACD,IAAI,CAAC9B,WAAW,GAAG,KAAK;IAC5B;IACA,IAAIf,eAAe,CAACsC,gBAAgB,CAAC,EAAE;MACnCrC,gCAAgC,CAACqC,gBAAgB,EAAEb,IAAI,CAAC;IAC5D;IACA,OAAO,IAAI,CAACmC,cAAc,CAACnC,IAAI,EAAEa,gBAAgB,EAAEa,IAAI,CAACJ,SAAS,CAAC,EAAEI,IAAI,CAACL,MAAM,CAAC,CAAC;EACrF,CAAC;EACD1C,WAAW,CAACkB,SAAS,CAACuC,gBAAgB,GAAG,UAAUJ,OAAO,EAAE;IACxD,IAAI,CAAC1B,WAAW,GAAG,KAAK;IACxB,IAAI,CAAC1B,MAAM,CAACiD,OAAO,CAACzE,MAAM,CAACiF,mBAAmB,EAAE,IAAI,CAACpB,MAAM,GAAG;MAAEqB,OAAO,EAAE,IAAI,CAACC;IAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACjG,IAAI,CAAC3D,MAAM,CAACqD,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACnC,aAAa,CAAC,CAAC,CAAC;IAC3DkC,OAAO,CAAC,IAAI,CAAClD,IAAI,CAAC;IAClB,IAAI,CAACW,KAAK,CAAC+C,MAAM,GAAG,EAAE;EAC1B,CAAC;EACD;EACA7D,WAAW,CAACkB,SAAS,CAACsC,cAAc,GAAG,UAAUnC,IAAI,EAAEa,gBAAgB,EAAEC,gBAAgB,EAAEC,QAAQ,EAAE;IACjG,IAAI0B,KAAK,GAAG,IAAI;IAChB,IAAI,CAACnF,iBAAiB,CAACuD,gBAAgB,CAAC,IAAI,CAACvD,iBAAiB,CAACuD,gBAAgB,CAAC6B,UAAU,CAAC,IACvF7B,gBAAgB,CAAC6B,UAAU,YAAYtE,WAAW,EAAE;MACpD,IAAIuE,OAAO,GAAG9B,gBAAgB,CAAC+B,KAAK,GAAG/B,gBAAgB,CAAC+B,KAAK,GAAG,IAAIzE,KAAK,CAAC,CAAC;MAC3E,IAAIb,iBAAiB,CAACqF,OAAO,CAACE,eAAe,CAAC,IAAI7C,IAAI,CAAC8C,UAAU,EAAE;QAC/DH,OAAO,CAACE,eAAe,GAAG,IAAI;MAClC;MACA,OAAO,IAAId,OAAO,CAAC,UAAUC,OAAO,EAAE;QAClC,IAAIe,WAAW,GAAGlC,gBAAgB,CAAC6B,UAAU,CAACM,YAAY,CAACL,OAAO,CAAC;QACnEI,WAAW,CAACE,IAAI,CAAC,UAAUC,CAAC,EAAE;UAC1BT,KAAK,CAAC1C,IAAI,CAACC,IAAI,CAAC;UAChByC,KAAK,CAACU,mBAAmB,CAACnD,IAAI,EAAEa,gBAAgB,EAAEC,gBAAgB,EAAEC,QAAQ,EAAEmC,CAAC,CAAC,CAACD,IAAI,CAAC,YAAY;YAC9FR,KAAK,CAACL,gBAAgB,CAACJ,OAAO,CAAC;UACnC,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,MACI,IAAI,CAAC1E,iBAAiB,CAACuD,gBAAgB,CAAC,IAAIA,gBAAgB,CAACuC,UAAU,KAAK,aAAa,EAAE;MAC5F,OAAO,IAAIrB,OAAO,CAAC,UAAUC,OAAO,EAAE;QAClCS,KAAK,CAAC1C,IAAI,CAACC,IAAI,CAAC;QAChByC,KAAK,CAACU,mBAAmB,CAACnD,IAAI,EAAEa,gBAAgB,EAAEC,gBAAgB,EAAEC,QAAQ,EAAE0B,KAAK,CAAC7D,MAAM,CAACyE,qBAAqB,CAAC,CAAC,CAAC;QACnHZ,KAAK,CAACL,gBAAgB,CAACJ,OAAO,CAAC;MACnC,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAIsB,YAAY,GAAG,EAAE;MACrBA,YAAY,CAACC,IAAI,CAAC,IAAI,CAACrB,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC,EAAE3F,YAAY,CAAC4F,QAAQ,CAACzD,IAAI,EAAE,IAAI,CAACkC,IAAI,CAAC,CAAC,CAAC;MAChFoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC7D,MAAM,CAACgE,aAAa,CAAC1D,IAAI,CAAC,CAAC;MAClD,OAAO,IAAI+B,OAAO,CAAC,UAAUC,OAAO,EAAE2B,MAAM,EAAE;QAC1C5B,OAAO,CAAC6B,GAAG,CAACN,YAAY,CAAC,CAACL,IAAI,CAAC,UAAUY,CAAC,EAAE;UACxCpB,KAAK,CAAC1C,IAAI,CAACC,IAAI,CAAC;UAChByC,KAAK,CAACU,mBAAmB,CAACnD,IAAI,EAAEa,gBAAgB,EAAEC,gBAAgB,EAAEC,QAAQ,EAAE8C,CAAC,CAAC,CAAC,CAAC,CAAC,CAACZ,IAAI,CAAC,YAAY;YACjGR,KAAK,CAACL,gBAAgB,CAACJ,OAAO,CAAC;UACnC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC8B,KAAK,CAAC,UAAUD,CAAC,EAAE;UAClBF,MAAM,CAAClB,KAAK,CAAC3D,IAAI,CAAC;UAClB2D,KAAK,CAAC7D,MAAM,CAACiD,OAAO,CAACzE,MAAM,CAAC2G,aAAa,EAAEF,CAAC,CAAC;QACjD,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC;EACDlF,WAAW,CAACkB,SAAS,CAACsD,mBAAmB,GAAG,UAAUnD,IAAI,EAAEa,gBAAgB;EAC5E;EACAC,gBAAgB,EAAEC,QAAQ,EAAEmC,CAAC,EAAE;IAC3B,IAAIT,KAAK,GAAG,IAAI;IAChB,IAAI,CAACuB,gBAAgB,GAAGhE,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM;IACzD,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,SAAS;IACb,IAAIpF,IAAI,GAAG,EAAE;IACb,IAAIqF,QAAQ,GAAG3F,kBAAkB,CAACsB,IAAI,CAACf,OAAO,CAAC;IAC/C,IAAIqF,yBAAyB,GAAG,CAAChH,iBAAiB,CAACuD,gBAAgB,CAAC;IACpE,IAAIyD,yBAAyB,IAAI,CAAChH,iBAAiB,CAACuD,gBAAgB,CAAC0D,cAAc,CAAC,EAAE;MAClF,IAAI,CAACnF,OAAO,GAAI,CAAC9B,iBAAiB,CAACuD,gBAAgB,CAAC0D,cAAc,CAACC,IAAI,CAAC,GAAG3D,gBAAgB,CAAC0D,cAAc,CAACC,IAAI,GAAG,eAAgB;MAClI,IAAI,CAAClH,iBAAiB,CAACuD,gBAAgB,CAAC0D,cAAc,CAACJ,SAAS,CAAC,EAAE;QAC/DA,SAAS,GAAGtD,gBAAgB,CAAC0D,cAAc,CAACJ,SAAS;MACzD;IACJ;IACA,IAAI7G,iBAAiB,CAACyD,QAAQ,CAAC,EAAE;MAC7B,IAAI,CAAChC,SAAS,GAAG,EAAE;MACnB,IAAI,CAACC,IAAI,GAAG,EAAE;MACd,IAAI,CAACC,OAAO,GAAG,EAAE;MACjB,IAAI,CAACC,MAAM,GAAG,EAAE;IACpB,CAAC,MACI,IAAI,IAAI,CAACE,OAAO,KAAK,UAAU,EAAE;MAClC,IAAI,CAACL,SAAS,GAAGgC,QAAQ,CAAC0D,UAAU;MACpC,IAAI,CAACzF,IAAI,GAAG,EAAE;MACd,IAAI,CAACC,OAAO,GAAG,EAAE;MACjB,IAAI,CAACC,MAAM,GAAG6B,QAAQ,CAAC7B,MAAM;IACjC,CAAC,MACI;MACD,IAAI,CAACH,SAAS,GAAG,EAAE;MACnB,IAAI,CAACC,IAAI,GAAG+B,QAAQ,CAAC0D,UAAU,CAAC,CAAC,CAAC,CAACzF,IAAI;MACvC,IAAI,CAACC,OAAO,GAAG8B,QAAQ,CAAC0D,UAAU,CAAC,CAAC,CAAC,CAACxF,OAAO;MAC7C,IAAI,CAACC,MAAM,GAAG6B,QAAQ,CAAC7B,MAAM;MAC7B,IAAI,CAACC,SAAS,GAAI,IAAI,CAACH,IAAI,CAAC,IAAI,CAACA,IAAI,CAACkF,MAAM,GAAG,CAAC,CAAC,CAACQ,KAAK,GAAGP,SAAU;MACpE,IAAI,CAAChF,SAAS,EAAE;IACpB;IACA,IAAImF,yBAAyB,EAAE;MAC3B,IAAI,CAAChH,iBAAiB,CAACwD,gBAAgB,CAAC,EAAE;QACtC,IAAI,CAACxD,iBAAiB,CAACuD,gBAAgB,CAAC8D,MAAM,CAAC,KAAK7D,gBAAgB,IAAI,IAAI,CAAC1B,OAAO,KAAK,UAAU,CAAC,EAAE;UAClG,IAAI,CAACwF,kBAAkB,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClE,gBAAgB,CAAC8D,MAAM,CAAC,CAAC,CAAC;QAChF;QACA,IAAI,CAACrH,iBAAiB,CAACuD,gBAAgB,CAACL,MAAM,CAAC,EAAE;UAC7C,IAAI,IAAI,CAACpB,OAAO,KAAK,eAAe,EAAE;YAClC,IAAI,CAAC0B,gBAAgB,EAAE;cACnB,IAAI,CAACN,MAAM,GAAGqE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClE,gBAAgB,CAACL,MAAM,CAAC,CAAC;YACrE;UACJ,CAAC,MACI;YACD,IAAI,CAACA,MAAM,GAAGqE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClE,gBAAgB,CAACL,MAAM,CAAC,CAAC;UACrE;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAAClD,iBAAiB,CAACuD,gBAAgB,CAAC8D,MAAM,CAAC,EAAE;UAC7C,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClE,gBAAgB,CAAC8D,MAAM,CAAC,CAAC,CAAC;QAChF;QACA,IAAI,CAACrH,iBAAiB,CAACuD,gBAAgB,CAACL,MAAM,CAAC,EAAE;UAC7C,IAAI,CAACA,MAAM,GAAGqE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAClE,gBAAgB,CAACL,MAAM,CAAC,CAAC;QACrE;MACJ;IACJ;IACA,IAAI,CAACnB,mBAAmB,GAAIiF,yBAAyB,GAAGzD,gBAAgB,CAACxB,mBAAmB,GAAG,KAAM;IACrG;IACA,OAAO,IAAI0C,OAAO,CAAC,UAAUC,OAAO,EAAE2B,MAAM,EAAE;MAC1C3D,IAAI,CAACgF,cAAc,GAAG,CAAC;MACvBhG,IAAI,GAAGyD,KAAK,CAACwC,iBAAiB,CAACjF,IAAI,EAAEa,gBAAgB,EAAEqC,CAAC,CAAC;MACzDT,KAAK,CAACyC,aAAa,GAAGlD,OAAO;MAC7BS,KAAK,CAACjD,QAAQ,CAACQ,IAAI,CAACE,EAAE,CAAC,GAAG,IAAI;MAC9BuC,KAAK,CAAC/C,MAAM,CAACyF,cAAc,CAAC1C,KAAK,CAACjD,QAAQ,EAAEiD,KAAK,CAACyC,aAAa,CAAC;IACpE,CAAC,CAAC,CAACjC,IAAI,CAAC,YAAY;MAChB,IAAImC,aAAa,GAAG,EAAE;MACtB3C,KAAK,CAAC4C,YAAY,CAACrG,IAAI,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC0F,KAAK,EAAEU,aAAa,CAAC;MACtD3C,KAAK,CAACzD,IAAI,GAAGyD,KAAK,CAACzD,IAAI,CAACsG,MAAM,CAACF,aAAa,CAAC;MAC7C;MACA,IAAI,CAAC9H,iBAAiB,CAACmF,KAAK,CAACjC,MAAM,CAAC,EAAE;QAClC,IAAKiC,KAAK,CAACrD,OAAO,KAAK,eAAe,IAAI,CAAC0B,gBAAgB,IAAM2B,KAAK,CAACrD,OAAO,KAAK,UAAW,EAAE;UAC5FqD,KAAK,CAAC8C,kBAAkB,CAAC9C,KAAK,CAACjC,MAAM,CAAC;QAC1C;MACJ;MACA,IAAIiC,KAAK,CAACxD,OAAO,CAACiF,MAAM,GAAG,CAAC,EAAE;QAC1BzB,KAAK,CAAChD,KAAK,CAACR,OAAO,GAAGwD,KAAK,CAACxD,OAAO;MACvC;MACA;MACAwD,KAAK,CAAChD,KAAK,CAACT,IAAI,GAAGyD,KAAK,CAACzD,IAAI;MAC7ByD,KAAK,CAAChD,KAAK,CAAC+F,SAAS,GAAG/C,KAAK,CAAC7D,MAAM,CAAC4G,SAAS;MAC9C,IAAI/C,KAAK,CAAC7D,MAAM,CAAC6G,cAAc,IAAIzF,IAAI,CAAC0F,iBAAiB,CAAC,CAAC,CAACxB,MAAM,IAAII,yBAAyB,IAC3FzD,gBAAgB,CAAC8E,YAAY,EAAE;QAC/B,IAAIC,YAAY,GAAG/E,gBAAgB,CAAC8D,MAAM,GAAG9D,gBAAgB,CAAC8D,MAAM,CAACkB,UAAU,IAC3EhF,gBAAgB,CAAC8D,MAAM,CAAC3F,IAAI,CAACkF,MAAM,GAAG,CAAC;QAC3C,IAAI4B,WAAW,GAAG;UACdC,GAAG,EAAE1B,QAAQ,GAAGuB,YAAY;UAAEI,MAAM,EAAEvD,KAAK,CAACuB,gBAAgB,GAAGvB,KAAK,CAACuB,gBAAgB,GAAG,CAAC,GACrFvB,KAAK,CAAChD,KAAK,CAACR,OAAO,CAAC,CAAC,CAAC,CAACyF,KAAK;UAAEuB,OAAO,EAAExD,KAAK,CAAChD,KAAK,CAACT,IAAI,CAACkF,MAAM;UAAEgC,UAAU,EAAEzD,KAAK,CAAChD,KAAK,CAACR,OAAO,CAACiF;QACxG,CAAC;QACDzB,KAAK,CAAChD,KAAK,CAACqG,WAAW,GAAGA,WAAW;MACzC;MACArD,KAAK,CAAC1D,SAAS,CAACwE,IAAI,CAACd,KAAK,CAAChD,KAAK,CAAC;MACjCgD,KAAK,CAAC3D,IAAI,CAAC2F,UAAU,GAAGhC,KAAK,CAAC1D,SAAS;MACvC0D,KAAK,CAAC3D,IAAI,CAACI,MAAM,GAAGuD,KAAK,CAACvD,MAAM;MAChCc,IAAI,CAACmG,MAAM,CAAC,gBAAgB,EAAE1D,KAAK,CAAC3D,IAAI,CAAC;MACzC,IAAI,CAACgC,gBAAgB,EAAE;QACnB,IAAI2B,KAAK,CAACnD,WAAW,EAAE;UACnB,IAAIgF,yBAAyB,IAAI,CAAChH,iBAAiB,CAACuD,gBAAgB,CAACuD,SAAS,CAAC,IACxEvD,gBAAgB,CAACuD,SAAS,KAAK,GAAG,EAAE;YACvCA,SAAS,GAAGvD,gBAAgB,CAACuD,SAAS;UAC1C;UACA,IAAItF,IAAI,GAAG,IAAIzB,QAAQ,CAACoF,KAAK,CAAC3D,IAAI,EAAE,KAAK,EAAEkB,IAAI,CAACU,MAAM,EAAEV,IAAI,CAACoG,YAAY,EAAEhC,SAAS,CAAC;UACrF,IAAI,CAAC3B,KAAK,CAACxB,MAAM,EAAE;YACf,IAAIqD,yBAAyB,IAAIzD,gBAAgB,CAACwF,QAAQ,EAAE;cACxDvH,IAAI,CAACwH,IAAI,CAACzF,gBAAgB,CAACwF,QAAQ,CAAC;YACxC,CAAC,MACI;cACDvH,IAAI,CAACwH,IAAI,CAAC,YAAY,CAAC;YAC3B;UACJ,CAAC,MACI;YACD7D,KAAK,CAACF,WAAW,GAAGzD,IAAI,CAACyH,UAAU,CAAC,UAAU,CAAC;UACnD;QACJ,CAAC,MACI;UACD,IAAIzH,IAAI,GAAG,IAAIzB,QAAQ,CAACoF,KAAK,CAAC3D,IAAI,EAAE,MAAM,EAAEkB,IAAI,CAACU,MAAM,EAAEV,IAAI,CAACoG,YAAY,CAAC;UAC3E,IAAI,CAAC3D,KAAK,CAACxB,MAAM,EAAE;YACf,IAAIqD,yBAAyB,IAAIzD,gBAAgB,CAACwF,QAAQ,EAAE;cACxDvH,IAAI,CAACwH,IAAI,CAACzF,gBAAgB,CAACwF,QAAQ,CAAC;YACxC,CAAC,MACI;cACDvH,IAAI,CAACwH,IAAI,CAAC,aAAa,CAAC;YAC5B;UACJ,CAAC,MACI;YACD7D,KAAK,CAACF,WAAW,GAAGzD,IAAI,CAACyH,UAAU,CAAC,mEAAmE,CAAC;UAC5G;QACJ;QACA,IAAI9D,KAAK,CAAClD,kBAAkB,EAAE;UAC1BS,IAAI,CAACC,OAAO,CAACC,EAAE,GAAG,EAAE;QACxB;QACA,OAAOF,IAAI,CAACyB,YAAY;MAC5B;MACA,OAAOV,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC;EACDpC,WAAW,CAACkB,SAAS,CAACwF,YAAY,GAAG,UAAUrG,IAAI,EAAEwH,YAAY,EAAEpB,aAAa,EAAE;IAC9E,IAAI,CAACpG,IAAI,CAACkF,MAAM,EAAE;MACd,OAAOsC,YAAY;IACvB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzH,IAAI,CAACkF,MAAM,EAAEuC,CAAC,EAAE,EAAE;MAClC,IAAIV,GAAG,GAAG/G,IAAI,CAACyH,CAAC,CAAC;MACjB,IAAIC,SAAS,GAAGX,GAAG,CAACW,SAAS;MAC7B,IAAIA,SAAS,EAAE;QACXX,GAAG,CAACrB,KAAK,GAAG8B,YAAY,EAAE;QAC1B,OAAOT,GAAG,CAACW,SAAS;QACpBtB,aAAa,CAAC7B,IAAI,CAACwC,GAAG,CAAC;QACvBS,YAAY,GAAG,IAAI,CAACnB,YAAY,CAACqB,SAAS,EAAEF,YAAY,EAAEpB,aAAa,CAAC;MAC5E,CAAC,MACI;QACDW,GAAG,CAACrB,KAAK,GAAG8B,YAAY,EAAE;QAC1BpB,aAAa,CAAC7B,IAAI,CAACwC,GAAG,CAAC;MAC3B;IACJ;IACA,OAAOS,YAAY;EACvB,CAAC;EACD7H,WAAW,CAACkB,SAAS,CAACoF,iBAAiB,GAAG,UAAUjF,IAAI,EAAEa,gBAAgB,EAAEqC,CAAC,EAAE;IAC3E,IAAIyD,SAAS,GAAG,EAAE;IAClB,IAAIC,QAAQ,GAAG,IAAI,CAAChI,MAAM,CAACiI,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAACjI,MAAM,CAACkI,gBAAgB,CAAC,CAAC;IAC5E,IAAI,CAACxJ,iBAAiB,CAACuD,gBAAgB,CAAC,IAAI,CAACvD,iBAAiB,CAACuD,gBAAgB,CAACkG,KAAK,CAAC,EAAE;MACpF,IAAI,CAACA,KAAK,GAAGlG,gBAAgB,CAACkG,KAAK;IACvC;IACA,IAAI/G,IAAI,CAACuB,SAAS,IAAI,CAACjE,iBAAiB,CAACuD,gBAAgB,CAAC,EAAE;MACxDb,IAAI,CAACgH,kBAAkB,GAAGnG,gBAAgB,CAACW,mBAAmB,IAAI,UAAU;IAChF;IACA,IAAI9B,MAAM,GAAG,IAAI7B,YAAY,CAACmC,IAAI,EAAE,IAAI,CAACN,MAAM,CAACuH,iBAAiB,CAAC,CAAC,CAAC;IACpE,IAAIC,QAAQ,GAAG3I,eAAe,CAACsC,gBAAgB,CAAC,GAC5CpC,cAAc,CAACoC,gBAAgB,CAAC5B,OAAO,EAAEe,IAAI,CAACmH,0BAA0B,CAAC,GACzEzH,MAAM,CAAC0H,oBAAoB,CAACR,QAAQ,GAAG5G,IAAI,CAACqH,UAAU,CAAC,CAAC,GAAGrH,IAAI,CAACf,OAAO,CAAC;IAC5E,IAAIqI,SAAS,GAAG5H,MAAM,CAAC6H,UAAU,CAACL,QAAQ,EAAE,IAAI,CAAC7H,mBAAmB,CAAC;IACrE,IAAImI,WAAW,GAAGxH,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM,GAAGlE,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM,GAAG,CAAC,GAAG,CAAC;IAC/FyC,SAAS,GAAG,IAAI,CAACc,oBAAoB,CAACzH,IAAI,EAAEsH,SAAS,EAAEE,WAAW,EAAEb,SAAS,CAAC;IAC9E;IACA,IAAI,CAACrJ,iBAAiB,CAACuD,gBAAgB,CAAC,IAAI,CAACvD,iBAAiB,CAACuD,gBAAgB,CAAC6B,UAAU,CAAC,IAAI,EAAE7B,gBAAgB,CAAC6B,UAAU,YAAYtE,WAAW,CAAC,EAAE;MAClJ;MACAuI,SAAS,GAAG,IAAI,CAACe,oBAAoB,CAAC1H,IAAI,EAAEkD,CAAC,EAAEoE,SAAS,EAAEzG,gBAAgB,EAAEA,gBAAgB,CAAC6B,UAAU,EAAEiE,SAAS,EAAEjH,MAAM,CAAC;IAC/H,CAAC,MACI,IAAI,CAACpC,iBAAiB,CAACuD,gBAAgB,CAAC,IAAIA,gBAAgB,CAACuC,UAAU,KAAK,aAAa,EAAE;MAC5FuD,SAAS,GAAG,IAAI,CAACe,oBAAoB,CAAC1H,IAAI,EAAEkD,CAAC,EAAEoE,SAAS,EAAEzG,gBAAgB,EAAEb,IAAI,CAAC2H,eAAe,EAAEhB,SAAS,EAAEjH,MAAM,CAAC;IACxH,CAAC,MACI;MACDiH,SAAS,GAAG,IAAI,CAACe,oBAAoB,CAAC1H,IAAI,EAAEkD,CAAC,EAAEoE,SAAS,EAAEzG,gBAAgB,EAAEN,SAAS,EAAEoG,SAAS,EAAEjH,MAAM,CAAC;IAC7G;IACAM,IAAI,CAACmG,MAAM,CAAC/I,MAAM,CAACwK,eAAe,EAAE;MAAEjB,SAAS,EAAEA,SAAS;MAAEnC,IAAI,EAAE;IAAQ,CAAC,CAAC;IAC5E,OAAOmC,SAAS;EACpB,CAAC;EACDhI,WAAW,CAACkB,SAAS,CAAC6H,oBAAoB,GAAG,UAAU1H,IAAI,EAAE6H,UAAU,EAAEP,SAAS,EAAEzG,gBAAgB,EAAEiH,kBAAkB,EAAEC,QAAQ,EAAErI,MAAM,EAAE;IACxI,IAAIsI,MAAM;IACV,IAAI,CAAC1K,iBAAiB,CAACwK,kBAAkB,CAAC,IAAIA,kBAAkB,CAAC5D,MAAM,EAAE;MACrE8D,MAAM,GAAGF,kBAAkB;IAC/B,CAAC,MACI;MACDE,MAAM,GAAGH,UAAU,CAACI,MAAM;IAC9B;IACA,IAAI,CAAC3K,iBAAiB,CAAC0K,MAAM,CAACE,KAAK,CAAC,EAAE;MAClC,IAAI,CAACC,kBAAkB,CAACnI,IAAI,EAAEgI,MAAM,EAAEV,SAAS,EAAEU,MAAM,CAACE,KAAK,EAAE,CAAC,EAAErH,gBAAgB,EAAEkH,QAAQ,EAAErI,MAAM,CAAC;IACzG,CAAC,MACI;MACD,IAAI,CAAC0I,iBAAiB,CAACpI,IAAI,EAAEgI,MAAM,EAAEV,SAAS,EAAE,CAAC,EAAE,CAAC,EAAEzG,gBAAgB,EAAEkH,QAAQ,EAAErI,MAAM,CAAC;IAC7F;IACA,IAAI,CAACpC,iBAAiB,CAACuK,UAAU,CAAC/E,UAAU,CAAC,EAAE;MAC3C,IAAI,CAACxF,iBAAiB,CAACwK,kBAAkB,CAAC,EAAE;QACxC,IAAI,CAACO,iBAAiB,CAACrI,IAAI,EAAE6H,UAAU,CAACI,MAAM,EAAEF,QAAQ,EAAED,kBAAkB,CAAC;MACjF,CAAC,MACI;QACD,IAAIG,MAAM,GAAGJ,UAAU,CAACI,MAAM,CAACK,SAAS,GACpCT,UAAU,CAACI,MAAM,CAACM,OAAO,GAAGV,UAAU,CAACI,MAAM;QACjD,IAAI,CAACI,iBAAiB,CAACrI,IAAI,EAAEiI,MAAM,EAAEF,QAAQ,CAAC;MAClD;IACJ;IACA,OAAOA,QAAQ;EACnB,CAAC;EACDpJ,WAAW,CAACkB,SAAS,CAACsI,kBAAkB,GAAG;EAC3C;EACAnI,IAAI,EAAE0C,UAAU,EAAE4E,SAAS,EAAEY,KAAK,EAAEM,UAAU,EAAEC,qBAAqB,EAAE9B,SAAS,EAAEjH,MAAM,EAAE;IACtF,KAAK,IAAIgJ,EAAE,GAAG,CAAC,EAAEC,YAAY,GAAGjG,UAAU,EAAEgG,EAAE,GAAGC,YAAY,CAACzE,MAAM,EAAEwE,EAAE,EAAE,EAAE;MACxE,IAAIE,IAAI,GAAGD,YAAY,CAACD,EAAE,CAAC;MAC3B,IAAIG,KAAK,GAAG,EAAE;MACd,IAAInE,KAAK,GAAG,CAAC;MACb;MACA,IAAIoE,IAAI,GAAG,CAAC,CAAC;MACbA,IAAI,CAACpE,KAAK,GAAIA,KAAK,GAAGwD,KAAK,GAAI,CAAC;MAChC,IAAIa,GAAG,GAAG/I,IAAI,CAACgJ,gBAAgB,CAACJ,IAAI,CAACK,KAAK,CAAC;MAC3C;MACA,IAAIvH,IAAI,GAAG;QACPwH,KAAK,EAAEN,IAAI,CAACO,GAAG;QACfnD,MAAM,EAAE+C,GAAG;QACXK,KAAK,EAAE7I,SAAS;QAChB8I,YAAY,EAAEN,GAAG,CAACO,eAAe,CAAC;MACtC,CAAC;MACD,IAAIJ,KAAK,GAAGlJ,IAAI,CAACgJ,gBAAgB,CAACJ,IAAI,CAACK,KAAK,CAAC,CAACM,UAAU,GACpD,IAAI,IAAI,CAACR,GAAG,CAACS,mBAAmB,GAAG,IAAI,CAAC/I,oBAAoB,CAACgJ,eAAe,CAAC/H,IAAI,CAAC,GAAGkH,IAAI,CAACO,GAAG,CAAC,GAAG,KAAK;MAC1G,IAAIP,IAAI,CAACc,KAAK,GAAG,CAAC,EAAE;QAChBR,KAAK,IAAIN,IAAI,CAACc,KAAK,GAAG,QAAQ;MAClC,CAAC,MACI;QACDR,KAAK,IAAIN,IAAI,CAACc,KAAK,GAAG,OAAO;MACjC;MACA,IAAIC,KAAK,GAAG;QAAEC,WAAW,EAAEV,KAAK;QAAE1E,IAAI,EAAE,IAAI,CAAClF,WAAW,GAAG,KAAK,GAAG,OAAO;QAAE4C,IAAI,EAAE0G;MAAK,CAAC;MACxF,IAAI,CAAChK,MAAM,CAACiD,OAAO,CAACzE,MAAM,CAACyM,kBAAkB,EAAEF,KAAK,CAAC;MACrDb,IAAI,CAACI,KAAK,GAAGS,KAAK,CAACC,WAAW;MAC9Bd,IAAI,CAACM,KAAK,GAAG,IAAI,CAACU,oBAAoB,CAAC,IAAI,CAAC/C,KAAK,CAAC;MAClD,IAAIgD,eAAe,GAAG,IAAI9L,4BAA4B,CAAC+B,IAAI,CAAC;MAC5D,IAAIgK,uBAAuB,GAAGD,eAAe,CAACE,YAAY,CAACrB,IAAI,CAAC;MAChE,IAAI,CAACsB,cAAc,CAAClK,IAAI,EAAEgK,uBAAuB,EAAGtH,UAAU,CAACwF,KAAK,GAAGxF,UAAU,CAACyH,WAAW,GAAI,CAAC,EAAExD,SAAS,EAAE,IAAI,CAACxH,SAAS,CAAC;MAC9H0J,KAAK,CAACtF,IAAI,CAACuF,IAAI,CAAC;MAChB,IAAInC,SAAS,CAACA,SAAS,CAACzC,MAAM,GAAG,CAAC,CAAC,CAAC2E,KAAK,CAAC3E,MAAM,GAAG,CAAC,EAAE;QAClD,IAAIkG,MAAM,GAAG1H,UAAU,CAACwF,KAAK,GAAGxF,UAAU,CAACyH,WAAW,GAAGH,uBAAuB,CAAC,CAAC,CAAC,CAACnB,KAAK,CAAC3E,MAAM;QAChG,IAAImG,MAAM,GAAG,CAAC;QACd,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG5D,SAAS,CAACA,SAAS,CAACzC,MAAM,GAAG,CAAC,CAAC,CAAC2E,KAAK,EAAEyB,EAAE,GAAGC,EAAE,CAACrG,MAAM,EAAEoG,EAAE,EAAE,EAAE;UAC/E,IAAIE,KAAK,GAAGD,EAAE,CAACD,EAAE,CAAC;UAClB,IAAIE,KAAK,CAAC9F,KAAK,GAAG0F,MAAM,EAAE;YACtBA,MAAM,GAAGI,KAAK,CAAC9F,KAAK;UACxB;UACA,IAAI8F,KAAK,CAAC9F,KAAK,GAAG2F,MAAM,EAAE;YACtBA,MAAM,GAAGG,KAAK,CAAC9F,KAAK;UACxB;UACA,IAAImE,KAAK,CAACA,KAAK,CAAC3E,MAAM,GAAG,CAAC,CAAC,CAACQ,KAAK,KAAK8F,KAAK,CAAC9F,KAAK,EAAE;YAC/CmE,KAAK,CAACtF,IAAI,CAACiH,KAAK,CAAC;UACrB;QACJ;QACA,IAAKJ,MAAM,GAAGtB,IAAI,CAACpE,KAAK,GAAI,CAAC,EAAE;UAC3BoE,IAAI,CAAC2B,OAAO,GAAGL,MAAM,GAAGtB,IAAI,CAACpE,KAAK;QACtC;QACA,OAAO2F,MAAM,GAAI/C,SAAS,CAACrI,OAAO,CAACiF,MAAM,GAAGgE,KAAK,GAAGxF,UAAU,CAACyH,WAAY,EAAE;UACzE;UACA,IAAIO,KAAK,GAAG,CAAC,CAAC;UACdA,KAAK,CAAChG,KAAK,GAAI2F,MAAM,GAAG,CAAE;UAC1BK,KAAK,CAACtB,KAAK,GAAG,IAAI,CAACU,oBAAoB,CAAC,IAAI,CAAC/C,KAAK,CAAC;UACnD8B,KAAK,CAACtF,IAAI,CAACmH,KAAK,CAAC;UACjBL,MAAM,EAAE;QACZ;MACJ,CAAC,MACI;QACD,IAAIM,IAAI,GAAG,CAAC;QACZ;QACA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGvD,SAAS,CAACrI,OAAO,EAAE2L,EAAE,GAAGC,EAAE,CAAC3G,MAAM,EAAE0G,EAAE,EAAE,EAAE;UAC3D,IAAIE,KAAK,GAAGD,EAAE,CAACD,EAAE,CAAC;UAClB,IAAIE,KAAK,CAACC,OAAO,EAAE;YACfJ,IAAI,EAAE;UACV;QACJ;QACA7B,IAAI,CAAC2B,OAAO,GAAI/H,UAAU,CAACyH,WAAW,GAAGQ,IAAK;MAClD;MACAhE,SAAS,CAACA,SAAS,CAACzC,MAAM,GAAG,CAAC,CAAC,CAAC2E,KAAK,GAAGA,KAAK;MAC7C,IAAI,CAAC1J,SAAS,EAAE;MAChB,IAAI,IAAI,CAAC6E,gBAAgB,GAAG,CAAC,IAAIkE,KAAK,GAAG,CAAC,EAAE;QACxC,IAAI8C,QAAQ,GAAG;UAAEC,YAAY,EAAE/C,KAAK,GAAG,CAAC;UAAEgD,WAAW,EAAE;QAAK,CAAC;QAC7DvE,SAAS,CAACA,SAAS,CAACzC,MAAM,GAAG,CAAC,CAAC,CAAC8G,QAAQ,GAAGA,QAAQ;MACvD;MACA,IAAI,CAAC1N,iBAAiB,CAACoF,UAAU,CAACyH,WAAW,CAAC,IAAIzH,UAAU,CAACyH,WAAW,GAAG,CAAC,EAAE;QAC1E,IAAI,CAAChC,kBAAkB,CAACnI,IAAI,EAAE4I,IAAI,CAACuC,KAAK,EAAE7D,SAAS,EAAEsB,IAAI,CAACuC,KAAK,CAACjD,KAAK,EAAEM,UAAU,EAAEC,qBAAqB,EAAE9B,SAAS,EAAEjH,MAAM,CAAC;QAC5H,IAAI,CAAC2I,iBAAiB,CAACrI,IAAI,EAAE4I,IAAI,EAAEjC,SAAS,EAAEpG,SAAS,EAAG2H,KAAK,GAAG,CAAC,GAAIxF,UAAU,CAACyH,WAAW,EAAE,IAAI,CAAC;MACxG,CAAC,MACI;QACD3B,UAAU,GAAG,IAAI,CAACJ,iBAAiB,CAACpI,IAAI,EAAE4I,IAAI,CAACuC,KAAK,EAAE7D,SAAS,EAAGY,KAAK,GAAG,CAAC,EAAGM,UAAU,EAAEC,qBAAqB,EAAE9B,SAAS,EAAEjH,MAAM,CAAC;QACnI,IAAI,CAAC2I,iBAAiB,CAACrI,IAAI,EAAE4I,IAAI,EAAEjC,SAAS,EAAEpG,SAAS,EAAG2H,KAAK,GAAG,CAAC,EAAG,IAAI,CAAC;MAC/E;IACJ;EACJ,CAAC;EACDvJ,WAAW,CAACkB,SAAS,CAACuI,iBAAiB,GAAG,UAAUpI,IAAI,EAAEgI,MAAM,EAAEV,SAAS,EAAEY,KAAK,EAAEM,UAAU,EAAEC,qBAAqB,EAAE9B,SAAS,EAAEjH,MAAM,EAAE;IACtI,IAAIgF,KAAK,GAAG,CAAC;IACb,IAAImE,KAAK,GAAG,EAAE;IACd,IAAI5J,OAAO,GAAGqI,SAAS,CAACrI,OAAO;IAC/B,IAAID,IAAI,GAAGU,MAAM,CAAC0L,eAAe,CAACnM,OAAO,EAAE+I,MAAM,EAAEhI,IAAI,EAAEwI,UAAU,CAAC;IACpE,KAAK,IAAIE,EAAE,GAAG,CAAC,EAAE2C,MAAM,GAAGrM,IAAI,EAAE0J,EAAE,GAAG2C,MAAM,CAACnH,MAAM,EAAEwE,EAAE,EAAE,EAAE;MACtD,IAAI3C,GAAG,GAAGsF,MAAM,CAAC3C,EAAE,CAAC;MACpBG,KAAK,GAAG,EAAE;MACVL,UAAU,EAAE;MACZ9D,KAAK,GAAG,CAAC;MACT,IAAI4G,iBAAiB,GAAG,KAAK,CAAC;MAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGzF,GAAG,CAAC8C,KAAK,CAAC3E,MAAM,EAAEqH,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAClD,IAAIE,KAAK,GAAG1F,GAAG,CAAC8C,KAAK,CAAC0C,CAAC,CAAC;QACxB,IAAIE,KAAK,CAACC,QAAQ,KAAKxN,QAAQ,CAACN,IAAI,EAAE;UAClC;QACJ;QACA,IAAIoI,MAAM,GAAGyF,KAAK,CAACzF,MAAM;QACzB,IAAIiD,KAAK,GAAGjD,MAAM,CAACiD,KAAK;QACxB,IAAI0C,SAAS,GAAG,CAACrO,iBAAiB,CAAC2L,KAAK,CAAC,GAAGjD,MAAM,CAAC4F,aAAa,CAAC3C,KAAK,EAAElD,GAAG,CAAC7D,IAAI,EAAE8D,MAAM,CAAC,GAAG,EAAE;QAC9F,IAAIkD,KAAK,GAAG,CAAC5L,iBAAiB,CAACqO,SAAS,CAAC,GAAGA,SAAS,GAAG,EAAE;QAC1D,IAAIE,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI7F,MAAM,CAACsD,eAAe,IAAItD,MAAM,CAACsD,eAAe,CAAC,CAAC,EAAE;UACpDuC,MAAM,GAAGnM,MAAM,CAACoM,QAAQ,CAAC5C,KAAK,EAAElD,MAAM,CAAC;UACvCkD,KAAK,GAAGzL,QAAQ,CAACuI,MAAM,CAAC+F,eAAe,EAAEF,MAAM,CAAC;QACpD;QACA,IAAI,CAACvO,iBAAiB,CAAC4L,KAAK,CAAC,EAAE;UAC3B,IAAIJ,IAAI,GAAG,CAAC,CAAC;UACb,IAAIkD,GAAG,GAAGtH,KAAK,GAAGwD,KAAK,GAAGlI,IAAI,CAACgF,cAAc;UAC7C;UACA,IAAIiH,aAAa,GAAG;YAChB/J,IAAI,EAAE6D,GAAG,CAAC7D,IAAI;YAAE8D,MAAM,EAAEA,MAAM;YAAEkG,cAAc,EAAEL,MAAM;YACtD3C,KAAK,EAAEA,KAAK;YAAEE,KAAK,EAAE7I,SAAS;YAAEkK,OAAO,EAAE,CAAC;YAAE3B,IAAI,EAAEA;UACtD,CAAC;UACD9I,IAAI,CAAC6B,OAAO,CAACzE,MAAM,CAAC+O,kBAAkB,EAAEF,aAAa,CAAC;UACtD,IAAI,CAAC3O,iBAAiB,CAAC2O,aAAa,CAACG,KAAK,CAAC,IAAI,CAAC9O,iBAAiB,CAAC2O,aAAa,CAACG,KAAK,CAACC,MAAM,CAAC,EAAE;YAC3Ff,iBAAiB,GAAG,IAAI,CAACgB,QAAQ,CAACL,aAAa,EAAED,GAAG,CAAC;UACzD;UACA,IAAI,CAAC1O,iBAAiB,CAAC2O,aAAa,CAACM,SAAS,CAAC,EAAE;YAC7CN,aAAa,CAACnD,IAAI,CAAC0D,SAAS,GAAG;cAAEC,MAAM,EAAER,aAAa,CAACM,SAAS,CAACE;YAAO,CAAC;YACzER,aAAa,CAAC/C,KAAK,GAAG+C,aAAa,CAACM,SAAS,CAACG,WAAW,IAAIT,aAAa,CAAC/C,KAAK;UACpF;UACAJ,IAAI,GAAGmD,aAAa,CAACnD,IAAI;UACzBA,IAAI,CAACpE,KAAK,GAAGsH,GAAG;UAChBlD,IAAI,CAACI,KAAK,GAAG+C,aAAa,CAAC/C,KAAK;UAChC,IAAI+C,aAAa,CAAC/J,IAAI,KAAK,EAAE,IAAIlC,IAAI,CAACgF,cAAc,IAAIN,KAAK,KAAK,CAAC,EAAE;YACjE,IAAI0E,KAAK,GAAG,CAAC,CAAC;YACdA,KAAK,CAACuD,MAAM,GAAG,MAAM;YACrBV,aAAa,GAAG;cAAE7C,KAAK,EAAEA;YAAM,CAAC;YAChCN,IAAI,CAAC2B,OAAO,GAAGzK,IAAI,CAAC0F,iBAAiB,CAAC,CAAC,CAACxB,MAAM;YAC9C4E,IAAI,CAACI,KAAK,GAAG,IAAI,CAACvJ,IAAI,CAACiN,WAAW,CAAC,aAAa,CAAC;UACrD;UACA,IAAIX,aAAa,CAACxB,OAAO,GAAG,CAAC,EAAE;YAC3B3B,IAAI,CAAC2B,OAAO,GAAGwB,aAAa,CAACxB,OAAO;UACxC;UACA,IAAI,CAACnN,iBAAiB,CAAC2O,aAAa,CAAC7C,KAAK,CAAC,EAAE;YACzC,IAAIyD,UAAU,GAAG,IAAI,CAACC,cAAc,CAAC9M,IAAI,EAAE0E,KAAK,GAAGwD,KAAK,CAAC;YACzDY,IAAI,CAACM,KAAK,GAAG,IAAI,CAAC2D,YAAY,CAAC,IAAI,CAAC7N,MAAM,CAAC2N,UAAU,CAAC,EAAEZ,aAAa,CAAC7C,KAAK,CAAC;UAChF,CAAC,MACI;YACDN,IAAI,CAACM,KAAK,GAAG;cAAE4D,IAAI,EAAEhN,IAAI,CAACC,OAAO,CAACC,EAAE,GAAG,QAAQ,IAAIwE,KAAK,GAAGwD,KAAK;YAAE,CAAC;UACvE;UACAW,KAAK,CAACtF,IAAI,CAACuF,IAAI,CAAC;QACpB;QACApE,KAAK,EAAE;MACX;MACA,IAAIqD,QAAQ,GAAG;QAAErD,KAAK,EAAE,IAAI,CAACvF,SAAS,EAAE;QAAE0J,KAAK,EAAEA;MAAM,CAAC;MACxD,IAAI,CAACvL,iBAAiB,CAACgO,iBAAiB,CAAC,EAAE;QACvC;QACAvD,QAAQ,CAACkF,MAAM,GAAG3B,iBAAiB;MACvC;MACA,IAAI,IAAI,CAACtH,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,GAAG,CAAC,IAAKkE,KAAK,GAAG,CAAC,GAAI,CAAC,EAAE;QACvEH,QAAQ,CAACiD,QAAQ,GAAG;UAAEC,YAAY,EAAG/C,KAAK,GAAG,CAAE;UAAEgD,WAAW,EAAE;QAAK,CAAC;QACpEvE,SAAS,CAACpD,IAAI,CAACwE,QAAQ,CAAC;MAC5B,CAAC,MACI;QACDpB,SAAS,CAACpD,IAAI,CAACwE,QAAQ,CAAC;MAC5B;MACA,IAAIhC,GAAG,CAACmH,QAAQ,IAAI,CAAC5P,iBAAiB,CAAC0C,IAAI,CAACuB,SAAS,CAAC,EAAE;QACpDvB,IAAI,CAACmN,UAAU,GAAG,IAAI;QACtB,IAAI/J,UAAU,GAAI,CAAC9F,iBAAiB,CAACmL,qBAAqB,CAAC,IAAIA,qBAAqB,CAACrF,UAAU,GAC3FqF,qBAAqB,CAACrF,UAAU,GAAG,UAAU;QACjD,IAAIgK,SAAS,GAAG,IAAI,CAAC1N,MAAM,CAAC2N,eAAe,CAACrN,IAAI,EAAE+F,GAAG,EAAE3C,UAAU,EAAE,IAAI,CAAC5D,QAAQ,CAAC;QACjF,IAAI8N,YAAY,GAAGF,SAAS,CAAC7L,SAAS;QACtC,IAAItB,OAAO,GAAGmN,SAAS,CAACnN,OAAO;QAC/BqN,YAAY,CAACvJ,aAAa,GACtBrE,MAAM,CAAC6N,cAAc,CAAC,IAAI,CAAC/N,QAAQ,EAAE8N,YAAY,EAAE,IAAI,CAACpI,aAAa,CAAC;QAC1EoI,YAAY,CAACtI,cAAc,GAAGhF,IAAI,CAACgF,cAAc,GAAG,CAAC;QACrD,IAAItD,IAAI,GAAG;UAAEH,SAAS,EAAE+L,YAAY;UAAEvH,GAAG,EAAEA,GAAG;UAAElF,gBAAgB,EAAE4H;QAAsB,CAAC;QACzF,IAAI,CAAC7J,MAAM,CAACiD,OAAO,CAACzE,MAAM,CAACoQ,qBAAqB,EAAE9L,IAAI,CAAC;QACvD4L,YAAY,CAACG,eAAe,GAAG,IAAI,CAACC,aAAa,CAAC3F,QAAQ,EAAEuF,YAAY,EAAE7E,qBAAqB,EAAE1C,GAAG,CAAC;QACrGuH,YAAY,CAACK,QAAQ,CAAC1N,OAAO,CAAC;MAClC;MACAD,IAAI,CAACmG,MAAM,CAAC/I,MAAM,CAACwQ,kBAAkB,EAAE;QAAEC,MAAM,EAAE9H,GAAG;QAAEvB,IAAI,EAAE,OAAO;QAAEmC,SAAS,EAAEA;MAAU,CAAC,CAAC;IAChG;IACA,OAAO6B,UAAU;EACrB,CAAC;EACD7J,WAAW,CAACkB,SAAS,CAACyM,QAAQ,GAAG,UAAU5K,IAAI,EAAEsK,GAAG,EAAE;IAClD,IAAI1O,iBAAiB,CAAC,IAAI,CAACmC,KAAK,CAAC+C,MAAM,CAAC,EAAE;MACtC,IAAI,CAAC/C,KAAK,CAAC+C,MAAM,GAAG,EAAE;IAC1B;IACA;IACA,IAAIsL,UAAU,GAAG;MACb1B,KAAK,EAAE1K,IAAI,CAAC0K,KAAK,CAACC,MAAM;MAAEtG,GAAG,EAAE,IAAI,CAAC5G,SAAS;MAAE6G,MAAM,EAAEgG,GAAG;MAC1D/F,OAAO,EAAE,IAAI,CAAC9G,SAAS;MAAE+G,UAAU,EAAE8F;IACzC,CAAC;IACD,IAAI,CAACvM,KAAK,CAAC+C,MAAM,CAACe,IAAI,CAACuK,UAAU,CAAC;IAClC,IAAI,CAAC7O,OAAO,CAAC+M,GAAG,GAAG,CAAC,CAAC,CAAC+B,KAAK,GAAGrM,IAAI,CAAC0K,KAAK,CAAC2B,KAAK,IAAI,IAAI,CAAC9O,OAAO,CAAC+M,GAAG,GAAG,CAAC,CAAC,CAAC+B,KAAK;IAC7E,OAAOrM,IAAI,CAAC0K,KAAK,CAACa,MAAM,IAAI,EAAE;EAClC,CAAC;EACDtO,WAAW,CAACkB,SAAS,CAAC6N,aAAa,GAAG,UAAU3F,QAAQ,EAAEuF,YAAY,EAAEU,gBAAgB,EAAEC,IAAI,EAAE;IAC5F,IAAIxL,KAAK,GAAG,IAAI;IAChB,OAAO,UAAUwF,MAAM,EAAE;MACrBqF,YAAY,CAACG,eAAe,GAAG,IAAI;MACnCxF,MAAM,CAAC/G,MAAM,GAAG,IAAI;MACpB,IAAI+G,MAAM,CAACA,MAAM,CAAC/D,MAAM,KAAK,CAAC,EAAE;QAC5B+D,MAAM,CAACA,MAAM,GAAG,CAAC,EAAE,CAAC;MACxB;MACAF,QAAQ,CAACrB,SAAS,GAAGjE,KAAK,CAACwC,iBAAiB,CAACqI,YAAY,EAAEU,gBAAgB,EAAE/F,MAAM,CAAC;MACpF,IAAIiG,MAAM,GAAGzL,KAAK,CAAC7D,MAAM,CAACqF,aAAa,CAAChF,OAAO,CAACiF,MAAM;MACtD,IAAIlF,IAAI,GAAG+I,QAAQ,CAACrB,SAAS;MAC7B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzH,IAAI,CAACkF,MAAM,EAAEuC,CAAC,EAAE,EAAE;QAClCzH,IAAI,CAACyH,CAAC,CAAC,CAACuE,QAAQ,GAAG;UAAEC,YAAY,EAAEiD,MAAM,GAAGZ,YAAY,CAACtI,cAAc;UACnEkG,WAAW,EAAE,CAAC+C,IAAI,CAACf,QAAQ;UAAEiB,QAAQ,EAAE,CAACF,IAAI,CAACf;QAAS,CAAC;MAC/D;MACAI,YAAY,CAACc,OAAO,CAAC,CAAC;MACtB1Q,MAAM,CAAC4P,YAAY,CAACrN,OAAO,CAAC;MAC5BwC,KAAK,CAACjD,QAAQ,CAAC8N,YAAY,CAACpN,EAAE,CAAC,GAAG,IAAI;MACtCuC,KAAK,CAAC/C,MAAM,CAACyF,cAAc,CAAC1C,KAAK,CAACjD,QAAQ,EAAEiD,KAAK,CAACyC,aAAa,CAAC;MAChE,OAAO6C,QAAQ;IACnB,CAAC;EACL,CAAC;EACDpJ,WAAW,CAACkB,SAAS,CAACwI,iBAAiB,GAAG,UAAUrI,IAAI,EAAEqO,GAAG,EAAE1H,SAAS,EAAEmB,kBAAkB,EAAEwG,MAAM,EAAEC,OAAO,EAAE;IAC3G,IAAIC,YAAY,GAAG,IAAIzQ,qBAAqB,CAACiC,IAAI,CAAC;IAClD,IAAIf,OAAO,GAAGuP,YAAY,CAACnH,UAAU,CAAC,CAAC;IACvCpI,OAAO,GAAGA,OAAO,CAACwP,MAAM,CAAC,UAAU1F,GAAG,EAAE;MAAE,OAAOzL,iBAAiB,CAACyL,GAAG,CAAC2F,QAAQ,CAAC,IAAI3F,GAAG,CAACvE,IAAI,KAAK,UAAU;IAAE,CAAC,CAAC;IAC/G,IAAIxE,IAAI,CAAC8C,UAAU,CAACoB,MAAM,IAAI,IAAI,CAACtF,MAAM,KAAKoB,IAAI,EAAE;MAChDA,IAAI,CAAC2O,eAAe,CAACC,kBAAkB,CAAC,CAAC;IAC7C;IACA,IAAI1M,IAAI,GAAG3B,SAAS;IACpB,IAAI,CAACjD,iBAAiB,CAACwK,kBAAkB,CAAC,EAAE;MACxC5F,IAAI,GAAG4F,kBAAkB;IAC7B,CAAC,MACI;MACD5F,IAAI,GAAGmM,GAAG;IACd;IACA,IAAIC,MAAM,KAAK/N,SAAS,EAAE;MACtB+N,MAAM,GAAG,CAAC;IACd;IACA,IAAItO,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM,GAAG,CAAC,IAAIqK,OAAO,EAAE;MAClD,IAAIM,iBAAiB,GAAG,IAAI7Q,0BAA0B,CAACgC,IAAI,CAAC;MAC5D,IAAI8O,gBAAgB,GAAGD,iBAAiB,CAAC5E,YAAY,CAAC/H,IAAI,EAAE;QAAEgG,KAAK,EAAEhG,IAAI,CAACgG;MAAM,CAAC,CAAC;MAClF,IAAI4G,gBAAgB,CAAC5K,MAAM,GAAG,CAAC,EAAE;QAC7ByC,SAAS,GAAG,IAAI,CAACuD,cAAc,CAAClK,IAAI,EAAE8O,gBAAgB,EAAER,MAAM,EAAE3H,SAAS,CAAC;MAC9E;IACJ,CAAC,MACI;MACD2H,MAAM,GAAGtO,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM,GAAG,CAAC,IAAI,CAACqK,OAAO,GAAGvO,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM,GAAGoK,MAAM;MACvG,IAAIS,KAAK,GAAGP,YAAY,CAACvE,YAAY,CAAC/H,IAAI,EAAEmM,GAAG,CAACvL,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE7D,OAAO,CAAC;MAChF,IAAI8P,KAAK,CAAC7K,MAAM,GAAG,CAAC,IAAI,CAACqK,OAAO,EAAE;QAC9BD,MAAM,GAAGtO,IAAI,CAACiE,aAAa,CAAChF,OAAO,CAACiF,MAAM,GAAGoK,MAAM,GAAG,CAAC,GAAGA,MAAM;QAChE3H,SAAS,GAAG,IAAI,CAACuD,cAAc,CAAClK,IAAI,EAAE+O,KAAK,EAAET,MAAM,EAAE3H,SAAS,CAAC;MACnE;IACJ;IACA,OAAOA,SAAS;EACpB,CAAC;EACDhI,WAAW,CAACkB,SAAS,CAACqK,cAAc,GAAG,UAAUlK,IAAI,EAAEhB,IAAI,EAAEsP,MAAM,EAAE3H,SAAS,EAAEqI,WAAW,EAAE;IACzF,KAAK,IAAItG,EAAE,GAAG,CAAC,EAAEuG,MAAM,GAAGjQ,IAAI,EAAE0J,EAAE,GAAGuG,MAAM,CAAC/K,MAAM,EAAEwE,EAAE,EAAE,EAAE;MACtD,IAAI3C,GAAG,GAAGkJ,MAAM,CAACvG,EAAE,CAAC;MACpB,IAAIG,KAAK,GAAG,EAAE;MACd,IAAIqG,OAAO,GAAG,IAAI;MAClB,IAAIxK,KAAK,GAAG,CAAC;MACb,KAAK,IAAI4F,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGxE,GAAG,CAAC8C,KAAK,EAAEyB,EAAE,GAAGC,EAAE,CAACrG,MAAM,EAAEoG,EAAE,EAAE,EAAE;QACnD,IAAIxB,IAAI,GAAGyB,EAAE,CAACD,EAAE,CAAC;QACjB;QACA,IAAI6E,KAAK,GAAG,CAAC,CAAC;QACd,IAAIrG,IAAI,CAAC4C,QAAQ,KAAKxN,QAAQ,CAACkR,kBAAkB,EAAE;UAC/C;QACJ;QACA,IAAKtG,IAAI,CAACiC,OAAO,IAAI,IAAI,CAAC1L,mBAAmB,EAAG;UAC5CqF,KAAK,EAAE;UACP,IAAIoE,IAAI,CAACuG,UAAU,EAAE;YACjBH,OAAO,GAAG,KAAK;YACf,IAAII,cAAc,GAAG,CAAChS,iBAAiB,CAACwL,IAAI,CAAC9C,MAAM,CAACsJ,cAAc,CAAC;YACnE,IAAIC,mBAAmB,GAAG,CAACjS,iBAAiB,CAACwL,IAAI,CAAC9C,MAAM,CAACuJ,mBAAmB,CAAC;YAC7E,IAAIC,oBAAoB,GAAG,CAAClS,iBAAiB,CAACwL,IAAI,CAAC9C,MAAM,CAACwJ,oBAAoB,CAAC;YAC/EL,KAAK,CAACzK,KAAK,GAAGA,KAAK,GAAG4J,MAAM,GAAGtO,IAAI,CAACgF,cAAc;YAClD,IAAIsK,cAAc,EAAE;cAChBH,KAAK,CAACjG,KAAK,GAAG,IAAI,CAACuG,gBAAgB,CAACvR,QAAQ,CAACwR,OAAO,EAAE5G,IAAI,CAAC9C,MAAM,CAACsJ,cAAc,EAAExG,IAAI,EAAE/C,GAAG,CAAC;YAChG,CAAC,MACI,IAAIwJ,mBAAmB,EAAE;cAC1BJ,KAAK,CAACjG,KAAK,GAAG,IAAI,CAACuG,gBAAgB,CAACvR,QAAQ,CAACyR,YAAY,EAAE7G,IAAI,CAAC9C,MAAM,CAACuJ,mBAAmB,EAAEzG,IAAI,EAAE/C,GAAG,CAAC;YAC1G,CAAC,MACI,IAAIyJ,oBAAoB,EAAE;cAC3BL,KAAK,CAACjG,KAAK,GAAG,IAAI,CAACuG,gBAAgB,CAACvR,QAAQ,CAAC0R,cAAc,EAAE9G,IAAI,CAAC9C,MAAM,CAACwJ,oBAAoB,EAAE1G,IAAI,EAAE/C,GAAG,CAAC;YAC7G,CAAC,MACI;cACD,KAAK,IAAI6E,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGgF,MAAM,CAACC,IAAI,CAAC/J,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAAC,EAAE2B,EAAE,GAAGC,EAAE,CAAC3G,MAAM,EAAE0G,EAAE,EAAE,EAAE;gBAClF,IAAIzB,GAAG,GAAG0B,EAAE,CAACD,EAAE,CAAC;gBAChB,IAAIzB,GAAG,KAAKL,IAAI,CAAC9C,MAAM,CAACxB,IAAI,EAAE;kBAC1B,IAAI,CAAClH,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAAC8G,GAAG,CAAC,EAAE;oBACrDZ,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,QAAQ,CAAC;kBAC3E,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAAC+G,OAAO,CAAC,EAAE;oBAC9Db,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,YAAY,CAAC;kBAC/E,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACgH,GAAG,CAAC,EAAE;oBAC1Dd,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,QAAQ,CAAC;kBAC3E,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACiH,GAAG,CAAC,EAAE;oBAC1Df,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,QAAQ,CAAC;kBAC3E,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACkH,KAAK,CAAC,EAAE;oBAC5DhB,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,UAAU,CAAC;kBAC7E,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACmH,SAAS,CAAC,EAAE;oBAChEjB,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,cAAc,CAAC;kBACjF,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACoH,UAAU,CAAC,EAAE;oBACjElB,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAG,eAAe,CAAC;kBAClF,CAAC,MACI,IAAI,CAAC3L,iBAAiB,CAACyI,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACqH,MAAM,CAAC,EAAE;oBAC7DnB,KAAK,CAACjG,KAAK,GAAGnD,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC,CAACqH,MAAM;kBACpD;gBACJ;cACJ;YACJ;YACAnB,KAAK,CAAC/F,KAAK,GAAG,IAAI,CAACU,oBAAoB,CAAC,IAAI,CAAC/C,KAAK,CAAC,CAAC,CAAC;YACrD,IAAI,CAACwJ,cAAc,CAACzH,IAAI,CAAC9C,MAAM,EAAEmJ,KAAK,CAAC/F,KAAK,EAAEN,IAAI,CAAC9C,MAAM,CAACiD,KAAK,CAAC;YAChE,IAAIuH,aAAa,GAAG1H,IAAI,CAAC2H,UAAU,CAACrH,KAAK;YACzC,IAAIoH,aAAa,CAACE,SAAS,EAAE;cACzBvB,KAAK,CAAC/F,KAAK,CAACuD,MAAM,GAAG6D,aAAa,CAACE,SAAS,CAACC,WAAW,CAAC,CAAC;YAC9D;YACA,IAAIjP,IAAI,GAAG;cACPqE,GAAG,EAAEA,GAAG;cACRvB,IAAI,EAAE8K,cAAc,GAAG,QAAQ,GAAGC,mBAAmB,GAAG,aAAa,GAAG,cAAc;cACtFnG,KAAK,EAAE+F;YACX,CAAC;YACD,IAAI,CAACvQ,MAAM,CAACiD,OAAO,CAACzE,MAAM,CAACwT,2BAA2B,EAAElP,IAAI,CAAC;YAC7DmH,KAAK,CAACtF,IAAI,CAAC4L,KAAK,CAAC;UACrB,CAAC,MACI;YACD,IAAIH,WAAW,KAAKzO,SAAS,EAAE;cAC3B4O,KAAK,CAACzK,KAAK,GAAGA,KAAK,GAAG4J,MAAM,GAAGtO,IAAI,CAACgF,cAAc;cAClDmK,KAAK,CAAC/F,KAAK,GAAG,IAAI,CAACU,oBAAoB,CAAC,IAAI,CAAC/C,KAAK,CAAC,CAAC,CAAC;cACrD8B,KAAK,CAACtF,IAAI,CAAC4L,KAAK,CAAC;YACrB;UACJ;QACJ;MACJ;MACA,IAAI,CAAC7R,iBAAiB,CAAC0R,WAAW,CAAC,EAAE;QACjCrI,SAAS,CAACpD,IAAI,CAAC;UAAEmB,KAAK,EAAEsK,WAAW;UAAEnG,KAAK,EAAEA;QAAM,CAAC,CAAC;MACxD,CAAC,MACI;QACD,IAAIgI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,IAAI,CAAC7M,gBAAgB,GAAG,CAAC,IAAI,IAAI,CAACA,gBAAgB,GAAG,CAAC,EAAE;UACxD,IAAI8M,iBAAiB,GAAG,cAAc;UACtC,IAAIC,aAAa,GAAG,UAAU;UAC9B,IAAI7I,KAAK,GAAGvB,SAAS,CAACA,SAAS,CAACzC,MAAM,GAAG,CAAC,CAAC,CAAC6M,aAAa,CAAC,CAACD,iBAAiB,CAAC;UAC7E,IAAI9F,QAAQ,GAAG;YAAEC,YAAY,EAAE/C,KAAK;YAAEgD,WAAW,EAAE;UAAK,CAAC;UACzD2F,KAAK,GAAG;YAAEnM,KAAK,EAAE,IAAI,CAACvF,SAAS,EAAE;YAAE0J,KAAK,EAAEA,KAAK;YAAEmC,QAAQ,EAAEA;UAAS,CAAC;QACzE,CAAC,MACI;UACD6F,KAAK,GAAG;YAAEnM,KAAK,EAAE,IAAI,CAACvF,SAAS,EAAE;YAAE0J,KAAK,EAAEA;UAAM,CAAC;QACrD;QACA,IAAI,CAACqG,OAAO,EAAE;UACVvI,SAAS,CAACpD,IAAI,CAACsN,KAAK,CAAC;QACzB;MACJ;IACJ;IACA,OAAOlK,SAAS;EACpB,CAAC;EACDhI,WAAW,CAACkB,SAAS,CAAC0Q,cAAc,GAAG,UAAUxH,GAAG,EAAEK,KAAK,EAAEH,KAAK,EAAE;IAChE,IAAIjD,MAAM,GAAG,IAAI,CAACpH,MAAM,CAACoK,gBAAgB,CAACC,KAAK,CAAC;IAChD,IAAI,OAAOF,GAAG,CAACiI,MAAM,KAAK,QAAQ,EAAE;MAChC,IAAIA,MAAM,GAAGjI,GAAG,CAACiI,MAAM;MACvB5H,KAAK,CAAC6H,YAAY,GAAG,CAAC3T,iBAAiB,CAAC0T,MAAM,CAACA,MAAM,CAAC,GAAGA,MAAM,CAACA,MAAM,GAAGA,MAAM,CAACE,QAAQ;MACxF,IAAI,CAAC5T,iBAAiB,CAAC0T,MAAM,CAACxM,IAAI,CAAC,EAAE;QACjC4E,KAAK,CAAC5E,IAAI,GAAGwM,MAAM,CAACxM,IAAI,CAACmM,WAAW,CAAC,CAAC;MAC1C;IACJ,CAAC,MACI;MACDvH,KAAK,CAAC6H,YAAY,GAAGlI,GAAG,CAACiI,MAAM;IACnC;IACA,IAAI,CAAC1T,iBAAiB,CAAC0I,MAAM,CAAC,IAAI1I,iBAAiB,CAAC8L,KAAK,CAAC5E,IAAI,CAAC,EAAE;MAC7D4E,KAAK,CAAC5E,IAAI,GAAGwB,MAAM,CAACxB,IAAI,CAACmM,WAAW,CAAC,CAAC;IAC1C;EACJ,CAAC;EACDhS,WAAW,CAACkB,SAAS,CAAC4P,gBAAgB,GAAG,UAAU/D,QAAQ,EAAEyF,QAAQ,EAAErI,IAAI,EAAE/C,GAAG,EAAE;IAC9E,IAAIqL,UAAU,GAAG,CAAC,CAAC;IACnBA,UAAU,CAAC7T,YAAY,CAACW,QAAQ,EAAE4K,IAAI,CAAC4C,QAAQ,CAAC,CAAC,GAAGlO,OAAO,CAAC2T,QAAQ,CAAC;IACrE,IAAIE,GAAG;IACP,IAAInP,IAAI,GAAG6D,GAAG,CAAC7D,IAAI,CAAC4G,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAGH,IAAI,CAAC9C,MAAM,CAACiD,KAAK,GAAGH,IAAI,CAAC9C,MAAM,CAACsL,UAAU,CAAC;IACnF,IAAI,IAAI,CAAC1S,MAAM,CAAC2S,OAAO,IAAI,IAAI,CAAC3S,MAAM,CAAC4S,KAAK,EAAE;MAC1CH,GAAG,GAAID,UAAU,CAAC7T,YAAY,CAACW,QAAQ,EAAE4K,IAAI,CAAC4C,QAAQ,CAAC,CAAC,CAACxJ,IAAI,EAAE,IAAI,CAACtD,MAAM,CAAE;MAC5E,IAAI,IAAI,CAACA,MAAM,CAAC2S,OAAO,EAAE;QACrB,IAAI,CAAC3S,MAAM,CAAC6S,eAAe,CAAC,CAAC;MACjC;IACJ,CAAC,MACI;MACDJ,GAAG,GAAID,UAAU,CAAC7T,YAAY,CAACW,QAAQ,EAAE4K,IAAI,CAAC4C,QAAQ,CAAC,CAAC,CAACxJ,IAAI,CAAE;IACnE;IACA,OAAOmP,GAAG,CAAC,CAAC,CAAC,CAACK,WAAW;EAC7B,CAAC;EACD/S,WAAW,CAACkB,SAAS,CAACkN,YAAY,GAAG,UAAU4E,KAAK,EAAEC,KAAK,EAAE;IACzD,IAAI3J,MAAM,GAAG,CAAC,CAAC;IACf,IAAI4J,QAAQ,GAAGhC,MAAM,CAACC,IAAI,CAAC6B,KAAK,CAAC;IACjC,KAAK,IAAIjN,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGmN,QAAQ,CAAC3N,MAAM,EAAEQ,KAAK,EAAE,EAAE;MAClD,IAAImN,QAAQ,CAACnN,KAAK,CAAC,KAAK,MAAM,EAAE;QAC5BuD,MAAM,CAAC4J,QAAQ,CAACnN,KAAK,CAAC,CAAC,GAAGiN,KAAK,CAACE,QAAQ,CAACnN,KAAK,CAAC,CAAC;MACpD;IACJ;IACAmN,QAAQ,GAAGhC,MAAM,CAACC,IAAI,CAAC8B,KAAK,CAAC;IAC7B,KAAK,IAAIlN,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGmN,QAAQ,CAAC3N,MAAM,EAAEQ,KAAK,EAAE,EAAE;MAClD,IAAImN,QAAQ,CAACnN,KAAK,CAAC,KAAK,MAAM,EAAE;QAC5BuD,MAAM,CAAC4J,QAAQ,CAACnN,KAAK,CAAC,CAAC,GAAGkN,KAAK,CAACC,QAAQ,CAACnN,KAAK,CAAC,CAAC;MACpD;IACJ;IACA,OAAOuD,MAAM;EACjB,CAAC;EACDtJ,WAAW,CAACkB,SAAS,CAACiN,cAAc,GAAG,UAAU9M,IAAI,EAAE8R,WAAW,EAAE;IAChE,IAAIpN,KAAK,GAAG,CAAC;IACb,KAAK,IAAIgE,EAAE,GAAG,CAAC,EAAE4B,EAAE,GAAG,IAAI,CAACpL,MAAM,EAAEwJ,EAAE,GAAG4B,EAAE,CAACpG,MAAM,EAAEwE,EAAE,EAAE,EAAE;MACrD,IAAIU,KAAK,GAAGkB,EAAE,CAAC5B,EAAE,CAAC;MAClB,IAAIU,KAAK,CAAC4D,IAAI,KAAKhN,IAAI,CAACC,OAAO,CAACC,EAAE,GAAG,QAAQ,GAAG4R,WAAW,EAAE;QACzD,OAAOpN,KAAK;MAChB;MACAA,KAAK,EAAE;IACX;IACA,OAAOnE,SAAS;EACpB,CAAC;EACD5B,WAAW,CAACkB,SAAS,CAAC4H,oBAAoB,GAAG,UAAUzH,IAAI,EAAEsH,SAAS,EAAEgH,MAAM,EAAE3H,SAAS,EAAE;IACvF,IAAIoL,QAAQ,GAAG,CAAC;IAChB,IAAIC,QAAQ,GAAG1K,SAAS,CAACtI,IAAI;IAC7B;IACA,IAAIiT,WAAW,GAAG3K,SAAS,CAACrI,OAAO;IACnC,IAAIiT,YAAY,GAAG,EAAE;IACrB,IAAI5D,MAAM,GAAG,CAAC,EAAE;MACZ,IAAI5J,KAAK,GAAG,CAAC;MACb,OAAOA,KAAK,KAAK4J,MAAM,EAAE;QACrB,IAAI,CAACrP,OAAO,CAACsE,IAAI,CAAC;UAAEmB,KAAK,EAAEA,KAAK,GAAG,CAAC;UAAEqJ,KAAK,EAAE;QAAG,CAAC,CAAC;QAClDrJ,KAAK,EAAE;MACX;IACJ;IACA,KAAK,IAAIqE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGkJ,WAAW,CAAC/N,MAAM,EAAE6E,GAAG,EAAE,EAAE;MAC/C,IAAI,CAACoJ,WAAW,CAACnS,IAAI,EAAEiS,WAAW,CAAClJ,GAAG,CAAC,EAAE,IAAI,CAACqJ,mBAAmB,CAAC,IAAI,CAACrL,KAAK,CAAC,EAAEuH,MAAM,GAAGvF,GAAG,GAAG,CAAC,CAAC;IACpG;IACA,IAAIuC,iBAAiB;IACrB,KAAK,IAAIvF,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGiM,QAAQ,CAAC9N,MAAM,EAAE6B,GAAG,EAAE,EAAE;MAC5C,IAAIsM,gBAAgB,GAAG,CAAC,GAAG/D,MAAM;MACjC,IAAIzF,KAAK,GAAG,EAAE;MACd,KAAK,IAAI7C,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGgM,QAAQ,CAACjM,GAAG,CAAC,CAAC8C,KAAK,CAAC3E,MAAM,EAAE8B,MAAM,EAAE,EAAE;QAChE;QACA,IAAIoD,KAAK,GAAG,CAAC,CAAC;QACd,IAAIN,IAAI,GAAG,CAAC,CAAC;QACb,IAAIwJ,QAAQ,GAAGN,QAAQ,CAACjM,GAAG,CAAC,CAAC8C,KAAK,CAAC7C,MAAM,CAAC;QAC1C,IAAIsM,QAAQ,CAAC5G,QAAQ,KAAKxN,QAAQ,CAACqU,YAAY,IAAID,QAAQ,CAAC5G,QAAQ,KAAKxN,QAAQ,CAACsU,YAAY,EAAE;UAC5F;QACJ;QACA,IAAIvK,MAAM,GAAG;UAAEwK,QAAQ,EAAE,IAAI;UAAE/N,KAAK,EAAE;QAAE,CAAC;QACzC,OAAOuD,MAAM,CAACwK,QAAQ,EAAE;UACpBxK,MAAM,GAAG,IAAI,CAACyK,QAAQ,CAACR,YAAY,EAAEH,QAAQ,EAAEM,gBAAgB,CAAC;UAChEA,gBAAgB,GAAGpK,MAAM,CAACvD,KAAK;UAC/B,IAAI,CAACuD,MAAM,CAACwK,QAAQ,EAAE;YAClB3J,IAAI,CAACpE,KAAK,GAAGuD,MAAM,CAACvD,KAAK,GAAG1E,IAAI,CAACgF,cAAc;YAC/C;UACJ;QACJ;QACA,IAAI,CAAC1H,iBAAiB,CAACgV,QAAQ,CAACK,OAAO,CAAC,IAAIL,QAAQ,CAACK,OAAO,KAAK,CAAC,EAAE;UAChE7J,IAAI,CAAC6J,OAAO,GAAGL,QAAQ,CAACK,OAAO;UAC/B,KAAK,IAAIlM,CAAC,GAAGsL,QAAQ,EAAEtL,CAAC,GAAG6L,QAAQ,CAACK,OAAO,GAAGZ,QAAQ,EAAEtL,CAAC,EAAE,EAAE;YACzD,IAAImM,WAAW,GAAG;cAAEb,QAAQ,EAAE,CAAC;cAAED,WAAW,EAAE;YAAE,CAAC;YACjDc,WAAW,CAACb,QAAQ,GAAGtL,CAAC;YACxBmM,WAAW,CAACd,WAAW,GAAGO,gBAAgB;YAC1CH,YAAY,CAAC3O,IAAI,CAACqP,WAAW,CAAC;UAClC;QACJ;QACA,IAAI,CAACtV,iBAAiB,CAACgV,QAAQ,CAAC7H,OAAO,CAAC,IAAI6H,QAAQ,CAAC7H,OAAO,KAAK,CAAC,EAAE;UAChE3B,IAAI,CAAC2B,OAAO,GAAG6H,QAAQ,CAAC7H,OAAO;UAC/B4H,gBAAgB,GAAGA,gBAAgB,GAAGvJ,IAAI,CAAC2B,OAAO,GAAG,CAAC;QAC1D;QACA3B,IAAI,CAACI,KAAK,GAAGoJ,QAAQ,CAACtM,MAAM,CAACuD,UAAU;QACvCH,KAAK,GAAG,IAAI,CAACyJ,mBAAmB,CAAC,IAAI,CAAC9L,KAAK,CAAC;QAC5C,IAAI,CAACzJ,iBAAiB,CAACgV,QAAQ,CAACtM,MAAM,CAAC0K,SAAS,CAAC,EAAE;UAC/CtH,KAAK,CAACuD,MAAM,GAAG2F,QAAQ,CAACtM,MAAM,CAAC0K,SAAS,CAACC,WAAW,CAAC,CAAC;QAC1D;QACA,IAAI,CAACrT,iBAAiB,CAACgV,QAAQ,CAACtM,MAAM,CAAC8M,eAAe,CAAC,EAAE;UACrD1J,KAAK,CAACuD,MAAM,GAAG2F,QAAQ,CAACtM,MAAM,CAAC8M,eAAe,CAACnC,WAAW,CAAC,CAAC;QAChE;QACA,IAAIoC,mBAAmB,GAAG;UAAEjK,IAAI,EAAEA,IAAI;UAAEwJ,QAAQ,EAAEA,QAAQ;UAAElJ,KAAK,EAAEA;QAAM,CAAC;QAC1EpJ,IAAI,CAAC6B,OAAO,CAACzE,MAAM,CAAC4V,wBAAwB,EAAED,mBAAmB,CAAC;QAClE,IAAI,CAACzV,iBAAiB,CAACyV,mBAAmB,CAAC3G,KAAK,CAAC,IAAI,CAAC9O,iBAAiB,CAACyV,mBAAmB,CAAC3G,KAAK,CAACC,MAAM,CAAC,EAAE;UACvGf,iBAAiB,GAAG,IAAI,CAACgB,QAAQ,CAACyG,mBAAmB,EAAEV,gBAAgB,CAAC;QAC5E;QACA,IAAI,CAAC/U,iBAAiB,CAACyV,mBAAmB,CAACxG,SAAS,CAAC,EAAE;UACnDwG,mBAAmB,CAACjK,IAAI,CAAC0D,SAAS,GAAG;YAAEC,MAAM,EAAEsG,mBAAmB,CAACxG,SAAS,CAACE;UAAO,CAAC;UACrF3D,IAAI,CAACI,KAAK,GAAG6J,mBAAmB,CAACxG,SAAS,CAACG,WAAW,IAAI5D,IAAI,CAACI,KAAK;QACxE;QACAJ,IAAI,CAACM,KAAK,GAAG2J,mBAAmB,CAAC3J,KAAK;QACtCP,KAAK,CAACtF,IAAI,CAACuF,IAAI,CAAC;QAChBuJ,gBAAgB,EAAE;MACtB;MACA,IAAItK,QAAQ,GAAG;QAAErD,KAAK,EAAE,IAAI,CAACvF,SAAS,EAAE;QAAE0J,KAAK,EAAEA;MAAM,CAAC;MACxD,IAAI,CAACvL,iBAAiB,CAACgO,iBAAiB,CAAC,EAAE;QACvC;QACAvD,QAAQ,CAACkF,MAAM,GAAG3B,iBAAiB;MACvC;MACA3E,SAAS,CAACpD,IAAI,CAACwE,QAAQ,CAAC;IAC5B;IACA,OAAOpB,SAAS;EACpB,CAAC;EACDhI,WAAW,CAACkB,SAAS,CAACgT,mBAAmB,GAAG,UAAU9L,KAAK,EAAE;IACzD,IAAIqC,KAAK,GAAG,CAAC,CAAC;IACdA,KAAK,CAAC6J,QAAQ,GAAG,EAAE;IACnB7J,KAAK,CAAC8J,OAAO,GAAG;MAAEC,KAAK,EAAE;IAAU,CAAC;IACpC/J,KAAK,CAACgK,IAAI,GAAG,IAAI;IACjB,IAAI,CAAC9V,iBAAiB,CAACyJ,KAAK,CAAC,IAAI,CAACzJ,iBAAiB,CAACyJ,KAAK,CAACpC,MAAM,CAAC,EAAE;MAC/DyE,KAAK,GAAG,IAAI,CAACiK,gBAAgB,CAACtM,KAAK,CAACpC,MAAM,EAAEyE,KAAK,CAAC;IACtD;IACA,OAAOA,KAAK;EAChB,CAAC;EACDzK,WAAW,CAACkB,SAAS,CAACwT,gBAAgB,GAAG,UAAUC,UAAU,EAAElK,KAAK,EAAE;IAClE,OAAOzL,MAAM,CAACyL,KAAK,EAAEkK,UAAU,CAAC;EACpC,CAAC;EACD3U,WAAW,CAACkB,SAAS,CAACiK,oBAAoB,GAAG,UAAU/C,KAAK,EAAE;IAC1D,IAAIqC,KAAK,GAAG,CAAC,CAAC;IACdA,KAAK,CAAC6J,QAAQ,GAAG,EAAE;IACnB7J,KAAK,CAACmK,SAAS,GAAG,SAAS;IAC3B,IAAI,CAACjW,iBAAiB,CAACyJ,KAAK,CAAC,IAAI,CAACzJ,iBAAiB,CAACyJ,KAAK,CAACyM,OAAO,CAAC,EAAE;MAChEpK,KAAK,GAAG,IAAI,CAACiK,gBAAgB,CAACtM,KAAK,CAACyM,OAAO,EAAEpK,KAAK,CAAC;IACvD;IACA,OAAOA,KAAK;EAChB,CAAC;EACDzK,WAAW,CAACkB,SAAS,CAACuS,mBAAmB,GAAG,UAAUrL,KAAK,EAAE;IACzD,IAAIqC,KAAK,GAAG,CAAC,CAAC;IACdA,KAAK,CAAC6J,QAAQ,GAAG,EAAE;IACnB7J,KAAK,CAAC8J,OAAO,GAAG;MAAEC,KAAK,EAAE;IAAU,CAAC;IACpC,IAAI,CAAC7V,iBAAiB,CAACyJ,KAAK,CAAC,IAAI,CAACzJ,iBAAiB,CAACyJ,KAAK,CAACiB,MAAM,CAAC,EAAE;MAC/DoB,KAAK,GAAG,IAAI,CAACiK,gBAAgB,CAACtM,KAAK,CAACiB,MAAM,EAAEoB,KAAK,CAAC;IACtD;IACA,OAAOA,KAAK;EAChB,CAAC;EACDzK,WAAW,CAACkB,SAAS,CAAC+E,kBAAkB,GAAG,UAAUD,MAAM,EAAE;IACzD,IAAI,CAACrH,iBAAiB,CAACqH,MAAM,CAAC3F,IAAI,CAAC,KAAK,IAAI,CAACI,OAAO,KAAK,UAAU,IAAI,IAAI,CAACD,SAAS,KAAK,CAAC,CAAC,EAAE;MAC1F,IAAIsU,MAAM,GAAG,KAAK,CAAC;MACnB,IAAI9O,MAAM,CAACkB,UAAU,KAAKtF,SAAS,EAAE;QACjC,IAAI,CAACpB,SAAS,GAAGwF,MAAM,CAAC3F,IAAI,CAACkF,MAAM;MACvC,CAAC,MACI;QACD,IAAI,CAAC/E,SAAS,GAAGwF,MAAM,CAACkB,UAAU;MACtC;MACA,IAAI,IAAI,CAAC1G,SAAS,GAAGwF,MAAM,CAAC3F,IAAI,CAACkF,MAAM,EAAE;QACrCuP,MAAM,GAAG,IAAI,CAACtU,SAAS;MAC3B,CAAC,MACI;QACDsU,MAAM,GAAG9O,MAAM,CAAC3F,IAAI,CAACkF,MAAM;MAC/B;MACA,IAAI,CAAC/E,SAAS,EAAE;MAChB,KAAK,IAAI4G,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG0N,MAAM,EAAE1N,GAAG,EAAE,EAAE;QACnC,IAAI2N,IAAI,GAAG/O,MAAM,CAAC3F,IAAI,CAAC+G,GAAG,CAAC;QAC3B;QACA,IAAI,EAAE2N,IAAI,CAAChP,KAAK,KAAK,IAAI,IAAI,CAACpH,iBAAiB,CAACoW,IAAI,CAAChP,KAAK,CAAC,CAAC,EAAE;UAC1DgP,IAAI,CAAChP,KAAK,GAAIqB,GAAG,GAAG,CAAE;QAC1B;QACA,IAAI,CAAC4N,gBAAgB,CAACD,IAAI,CAAC;MAC/B;IACJ;EACJ,CAAC;EACD/U,WAAW,CAACkB,SAAS,CAAC8T,gBAAgB,GAAG,UAAUD,IAAI,EAAE;IACrD,IAAIE,WAAW,GAAGF,IAAI,CAAC7K,KAAK,CAAC3E,MAAM;IACnC,KAAK,IAAI2P,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGD,WAAW,EAAEC,MAAM,EAAE,EAAE;MACjD,IAAIC,QAAQ,GAAGJ,IAAI,CAAC7K,KAAK,CAACgL,MAAM,CAAC;MACjC;MACA,IAAI,EAAEC,QAAQ,CAACpP,KAAK,KAAK,IAAI,IAAI,CAACpH,iBAAiB,CAACwW,QAAQ,CAACpP,KAAK,CAAC,CAAC,EAAE;QAClEoP,QAAQ,CAACpP,KAAK,GAAImP,MAAM,GAAG,CAAE;MACjC;IACJ;IACA,IAAI,CAAC7U,IAAI,CAACuE,IAAI,CAACmQ,IAAI,CAAC;EACxB,CAAC;EACD/U,WAAW,CAACkB,SAAS,CAAC0F,kBAAkB,GAAG,UAAU/E,MAAM,EAAE;IACzD,IAAI,CAAClD,iBAAiB,CAACkD,MAAM,CAACxB,IAAI,CAAC,EAAE;MACjC,IAAIyU,MAAM,GAAG,KAAK,CAAC;MACnB,IAAIjT,MAAM,CAACuT,UAAU,KAAKxT,SAAS,EAAE;QACjC,IAAI,CAACpB,SAAS,IAAIqB,MAAM,CAACxB,IAAI,CAACkF,MAAM;MACxC,CAAC,MACI;QACD,IAAI1D,MAAM,CAACuT,UAAU,GAAGvT,MAAM,CAACxB,IAAI,CAACkF,MAAM,EAAE;UACxC,IAAI,CAAC/E,SAAS,IAAKqB,MAAM,CAACuT,UAAU,GAAGvT,MAAM,CAACxB,IAAI,CAACkF,MAAO;UAC1DuP,MAAM,GAAGjT,MAAM,CAACxB,IAAI,CAACkF,MAAM;QAC/B,CAAC,MACI;UACDuP,MAAM,GAAGjT,MAAM,CAACuT,UAAU;QAC9B;MACJ;MACA,KAAK,IAAIhO,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG0N,MAAM,EAAE1N,GAAG,EAAE,EAAE;QACnC,IAAI2N,IAAI,GAAGlT,MAAM,CAACxB,IAAI,CAAC+G,GAAG,CAAC;QAC3B;QACA,IAAI2N,IAAI,CAAChP,KAAK,KAAK,IAAI,IAAIgP,IAAI,CAAChP,KAAK,KAAKnE,SAAS,EAAE;UACjDmT,IAAI,CAAChP,KAAK,GAAG,IAAI,CAACvF,SAAS,EAAE;QACjC,CAAC,MACI;UACDuU,IAAI,CAAChP,KAAK,IAAI,IAAI,CAACvF,SAAS;QAChC;QACA,IAAI,CAACwU,gBAAgB,CAACD,IAAI,CAAC;MAC/B;IACJ;EACJ,CAAC;EACD/U,WAAW,CAACkB,SAAS,CAAC6S,QAAQ,GAAG,UAAUR,YAAY,EAAEH,QAAQ,EAAED,WAAW,EAAE;IAC5E,KAAK,IAAIpJ,EAAE,GAAG,CAAC,EAAEsL,cAAc,GAAG9B,YAAY,EAAExJ,EAAE,GAAGsL,cAAc,CAAC9P,MAAM,EAAEwE,EAAE,EAAE,EAAE;MAC9E,IAAIkK,WAAW,GAAGoB,cAAc,CAACtL,EAAE,CAAC;MACpC,IAAKkK,WAAW,CAACb,QAAQ,KAAKA,QAAQ,IAAMa,WAAW,CAACd,WAAW,KAAKA,WAAY,EAAE;QAClFA,WAAW,GAAGA,WAAW,GAAG,CAAC;QAC7B,OAAO;UAAEW,QAAQ,EAAE,IAAI;UAAE/N,KAAK,EAAEoN;QAAY,CAAC;MACjD;IACJ;IACA,OAAO;MAAEW,QAAQ,EAAE,KAAK;MAAE/N,KAAK,EAAEoN;IAAY,CAAC;EAClD,CAAC;EACDnT,WAAW,CAACkB,SAAS,CAACsS,WAAW,GAAG,UAAUnS,IAAI,EAAE+I,GAAG,EAAEK,KAAK,EAAE1E,KAAK,EAAE;IACnE,IAAI,CAACpH,iBAAiB,CAACyL,GAAG,CAACiI,MAAM,CAAC,EAAE;MAChC,IAAI,OAAOjI,GAAG,CAACiI,MAAM,KAAK,QAAQ,EAAE;QAChC,IAAIA,MAAM,GAAGjI,GAAG,CAACiI,MAAM;QACvB5H,KAAK,CAAC6H,YAAY,GAAG,CAAC3T,iBAAiB,CAAC0T,MAAM,CAACA,MAAM,CAAC,GAAGA,MAAM,CAACA,MAAM,GAAGA,MAAM,CAACE,QAAQ;QACxF,IAAI,CAAC5T,iBAAiB,CAAC0T,MAAM,CAACxM,IAAI,CAAC,EAAE;UACjC4E,KAAK,CAAC5E,IAAI,GAAGwM,MAAM,CAACxM,IAAI,CAACmM,WAAW,CAAC,CAAC;QAC1C;MACJ,CAAC,MACI;QACDvH,KAAK,CAAC6H,YAAY,GAAGlI,GAAG,CAACiI,MAAM;QAC/B5H,KAAK,CAAC5E,IAAI,GAAGuE,GAAG,CAACvE,IAAI;MACzB;IACJ;IACA,IAAI,CAAClH,iBAAiB,CAACyL,GAAG,CAAC2H,SAAS,CAAC,EAAE;MACnCtH,KAAK,CAACuD,MAAM,GAAG5D,GAAG,CAAC2H,SAAS,CAACC,WAAW,CAAC,CAAC;IAC9C;IACA,IAAId,MAAM,CAACC,IAAI,CAAC1G,KAAK,CAAC,CAAClF,MAAM,GAAG,CAAC,EAAE;MAC/BkF,KAAK,CAAC4D,IAAI,GAAGhN,IAAI,CAACC,OAAO,CAACC,EAAE,GAAG,QAAQ,GAAGwE,KAAK;MAC/C,IAAI,CAACxF,MAAM,CAACqE,IAAI,CAAC6F,KAAK,CAAC;IAC3B;IACA,IAAI,CAAC9L,iBAAiB,CAACyL,GAAG,CAACgF,KAAK,CAAC,IAAIhF,GAAG,CAACgF,KAAK,KAAK,MAAM,EAAE;MACvD,IAAI,CAAC9O,OAAO,CAACsE,IAAI,CAAC;QAAEmB,KAAK,EAAEA,KAAK,GAAG1E,IAAI,CAACgF,cAAc;QAAE+I,KAAK,EAAE,OAAOhF,GAAG,CAACgF,KAAK,KAAK,QAAQ,GACpFhF,GAAG,CAACgF,KAAK,GAAG,IAAI,CAACrO,MAAM,CAACuU,iBAAiB,CAAClL,GAAG,CAACgF,KAAK;MAAE,CAAC,CAAC;IACnE;EACJ,CAAC;EACDpP,WAAW,CAACkB,SAAS,CAACuO,OAAO,GAAG,YAAY;IACxC;EAAA,CACH;EACD,OAAOzP,WAAW;AACtB,CAAC,CAAC,CAAE;AACJ,SAASA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}